<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuoXin Li&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/liysky/liysky.github.io.git/"/>
  <updated>2022-07-02T16:06:32.587Z</updated>
  <id>https://github.com/liysky/liysky.github.io.git/</id>
  
  <author>
    <name>jax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rendering pipline</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/07/02/Rendering-pipline/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/07/02/Rendering-pipline/</id>
    <published>2022-07-02T15:23:46.000Z</published>
    <updated>2022-07-02T16:06:32.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h1><ul><li>应用程序阶段</li><li>几何阶段</li><li>光栅化阶段</li></ul><h2 id="应用程序阶段"><a href="#应用程序阶段" class="headerlink" title="应用程序阶段"></a>应用程序阶段</h2><ul><li>通过软件的方式来实现的阶段（其他阶段全部或者部分建立在硬件基础之上）</li><li>可以并行在 CPU 上执行，超标量体系结构，同一阶段同一时间做不同的几件事情。</li><li>包含碰撞检测、加速算法、输入检测、动画、力反馈、纹理动画、变换仿真、几何变形等。（视锥体裁剪等加速算法）</li><li>主要任务为：将需要在屏幕上显示出来的几何体（图元）输入到绘制管线的下一阶段。</li></ul><h2 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h2><ul><li>模型视点变换</li><li>顶点着色</li><li>投影</li><li>裁剪</li><li>屏幕映射</li></ul><h2 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h2><ul><li>即给每个像素进行正确的配色，以便正确的绘制整幅图像。</li><li>三角形设定（Triangle Setup）</li><li>三角形遍历 (Triangle Traversal)</li><li>像素着色阶段 (Pixel Shading)</li><li>融合阶段 (Merging)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阶段&quot;&gt;&lt;a href=&quot;#阶段&quot; class=&quot;headerlink&quot; title=&quot;阶段&quot;&gt;&lt;/a&gt;阶段&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;应用程序阶段&lt;/li&gt;
&lt;li&gt;几何阶段&lt;/li&gt;
&lt;li&gt;光栅化阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用程序阶段&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="CG" scheme="https://github.com/liysky/liysky.github.io.git/tags/CG/"/>
    
  </entry>
  
  <entry>
    <title>Java Reflect</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/04/22/Java-Reflect/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/04/22/Java-Reflect/</id>
    <published>2022-04-22T14:44:17.000Z</published>
    <updated>2022-04-23T13:32:01.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射-注解-泛型"><a href="#反射-注解-泛型" class="headerlink" title="反射|注解|泛型"></a>反射|注解|泛型</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射：解决运行期间对某个未知实例，进行调用其方法。反射是一种专门为静态语言（编译时变量的数据类型即可确定的语言，要求使用变量之前必须声明数据类型。如c++、Java、C#等）提供的技术，用于在程序运行时动态的改变程序的状态和行为。运行时，对于任意一个类或对象，都能够调用它的任意字段和方法。</p><p>Java 类的成员包括：属性字段、构造函数、方法。</p><p>反射API与Java的以上成员相关：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/v2-312b1b34ca2ebd1317bedf70ddfad38b.jpg" alt="img"></p><p>获取 Class 对象的三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span></span><br><span class="line">Class s1 = Class.forName(<span class="string">"com.test.reflection.Student"</span>);</span><br><span class="line"><span class="comment">// 2.通过类的class属性</span></span><br><span class="line">Class s2 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// 3.通过对象的getClass()函数</span></span><br><span class="line">Student object3 = <span class="keyword">new</span> Student();</span><br><span class="line">Class s3 = object3.getClass();</span><br></pre></td></tr></table></figure><p>获取成员变量：</p><ul><li>getDeclaredFields：用于获取所有声明的字段，包括公有和私有字段（属性）。</li><li>getFields：仅用来获取公有字段。</li></ul><p>获取构造方法：</p><ul><li>getDeclaredConstructors：获取所有构造方法。</li><li>getConstructors ：获取公有构造方法。</li></ul><p>获取非构造方法：</p><ul><li>getDeclaredMethods：获取所有声明的非构造函数。</li><li>getMethods：获取仅公有非构造函数。</li></ul><p>需要注意的是，需要调用 <code>Field/Constructor/Methods.setAccessible(true)</code> 才可使得私有的字段/构造方法/方法得以使用。</p><h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解 Annotation"></a>注解 Annotation</h2><p>Java 注解为jdk5.0之后引入的一种注释机制。</p><p>Java中的类、方法、变量、参数和包等都可以被标注。Java 标注可以通过反射获取标注的内容。在编译器生成类文件时，标注可以被嵌入到字节码中。</p><p><strong>内置注解</strong></p><p>Java7之前 一共定义了3个 java.lang中，剩下的4个在java.annotation中。</p><p><strong>作用于代码之上：</strong></p><ul><li>Override： 检查该方法是否被重写，若发现父类或者引用的接口中没有该方法，则编译报错。</li><li>Deprecated：标记过时的方法，编译警告。</li><li>SuppressWarnings：提示编译器忽略注解中声明的警告。</li></ul><p><strong>作用于其他注解的注解（元注解）：</strong></p><ul><li>Retention：标注注解怎么保存，只在代码中，还是编入class，还是运行时可通过反射访问。</li><li>Documented：标注注解是否用在用户文档中。</li><li>Target：标记这个注解应该是哪种 Java 成员。</li><li>Inherited：标记此注解用于哪个注解类</li></ul><p>Java7 之后的注解：</p><ul><li>SafaVarargs：Java7 支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>FunctionalInterface：Java8支持，表示一个匿名函数或函数式接口。</li><li>Repeatable：Java8支持，标识某注解可以在同一声明上使用多次。</li></ul><h2 id="Annotation架构"><a href="#Annotation架构" class="headerlink" title="Annotation架构"></a>Annotation架构</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-23%20at%2021.18.51.png" alt="Screen Shot 2022-04-23 at 21.18.51" style="zoom:67%;" /></p><p>Java Annotation组成中3个主干类：Annotation.java, ElementType.java, retentionPolicy.java.</p><ul><li>Annotation为接口</li><li>ElementType 为枚举类，用来制定 Annotation 类型。</li><li>RetentionPolicy 为枚举类型，用来指定 Annotation 策略。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反射-注解-泛型&quot;&gt;&lt;a href=&quot;#反射-注解-泛型&quot; class=&quot;headerlink&quot; title=&quot;反射|注解|泛型&quot;&gt;&lt;/a&gt;反射|注解|泛型&lt;/h1&gt;&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Android Learning</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/04/19/Android%20Learning/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/04/19/Android%20Learning/</id>
    <published>2022-04-19T07:13:47.000Z</published>
    <updated>2022-04-19T09:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Learning"><a href="#Android-Learning" class="headerlink" title="Android Learning"></a>Android Learning</h1><h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><ul><li><p>Linux 内核层</p><p>为Android设备多种硬件提供底层的驱动及电源等管理。</p></li><li><p>系统运行库</p><p>通过C/C++库为Android系统提供主要的特性支持。如 OpenGL ES库和 Webkit浏览器内核。</p></li><li><p>应用框架层</p><p>提供构建应用程序时可能用到各种API。</p></li><li><p>应用层</p><p>安装使用的软件。</p></li></ul><h2 id="项目目录资源"><a href="#项目目录资源" class="headerlink" title="项目目录资源"></a>项目目录资源</h2><p>res下</p><ul><li>drawable ：存放图片</li><li>mipmap：存放应用图标</li><li>values：存放字符串、样式、颜色配置</li><li>layout：存放布局文件</li></ul><p><img src="https://winpic-1253102271.cos.ap-beijing.myqcloud.com/image-20220419163647118.png" alt="image-20220419163647118" style="zoom:80%;" /></p><h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><p>最外层的为项目配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">//gradle 的版本</span></span><br><span class="line">    id <span class="string">'com.android.application'</span> version <span class="string">'7.1.2'</span> apply <span class="keyword">false</span></span><br><span class="line">    id <span class="string">'com.android.library'</span> version <span class="string">'7.1.2'</span> apply <span class="keyword">false</span></span><br><span class="line">    id <span class="string">'org.jetbrains.kotlin.android'</span> version <span class="string">'1.5.30'</span> apply <span class="keyword">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">clean</span><span class="params">(type: Delete)</span> </span>&#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中的部分配置能够在 setting.gradle 中找到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = <span class="string">"My Application"</span></span><br><span class="line">include <span class="string">':app'</span></span><br></pre></td></tr></table></figure><p>其中repositories 闭包中声明了 google() 和 jcenter() 配置，为Google拓展依赖库和第三方开源库。</p><p>app下的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'com.android.application'</span></span><br><span class="line">    id <span class="string">'org.jetbrains.kotlin.android'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdk <span class="number">32</span><span class="comment">//根据Android系统适配的sdk</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.myapplication"</span></span><br><span class="line">        minSdk <span class="number">25</span></span><br><span class="line">        targetSdk <span class="number">32</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前项目中启用 JUnit 测试。</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    buildTypes闭包中用于指定生成安装文件的相关配置，通常只会有两个子闭包：一个是debug，一个是release。debug闭包用于指定生成测试版安装文件的配置，release闭包用于指定生成正式版安装文件的配置。另外，debug闭包是可以忽略不写的，因此我们看到上面的代码中就只有一个release闭包。下面来看一下release闭包中的具体内容吧，minifyEnabled用于指定是否对项目的代码进行混淆true表示混淆，false表示不混淆。proguardFiles用于指定混淆时使用的规则文件，这里指定了两个文件：第一个proguard-android-optimize.txt是在&lt;Android SDK&gt;/tools/proguard目录下的，里面是所有项目通用的混淆规则；第二个proguard-rules.pro是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android-optimize.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    compileOptions </span>&#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">'1.8'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程依赖声明：implementation</span></span><br><span class="line">    implementation <span class="string">'androidx.core:core-ktx:1.7.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.4.1'</span></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.5.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:2.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.13.2'</span></span><br><span class="line">    <span class="comment">//声明测试用例</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.3'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.4.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Learning&quot;&gt;&lt;a href=&quot;#Android-Learning&quot; class=&quot;headerlink&quot; title=&quot;Android Learning&quot;&gt;&lt;/a&gt;Android Learning&lt;/h1&gt;&lt;h2 id=&quot;Android系统
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Thread, Process and Parallel computing</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/04/04/Thread-Process-and-Parallel-computing/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/04/04/Thread-Process-and-Parallel-computing/</id>
    <published>2022-04-04T04:12:49.000Z</published>
    <updated>2022-04-06T04:15:15.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><ul><li>程序指令能被<strong>单独</strong>操作的最小序列单位</li><li>拥有自己的寄存器，PC（program counter，程序计数器），SP（stack pointer 栈计数器）</li></ul><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul><li><p>进程被执行的实例</p></li><li><p>一个进程有多个线程</p></li><li><p>大部分为单线程</p></li></ul><h2 id="Parallel-computing"><a href="#Parallel-computing" class="headerlink" title="Parallel computing"></a>Parallel computing</h2><ul><li>在一个或多个CPU执行</li><li>多线程（内存共享</li><li>多进程（内存独立</li></ul><p><strong>多线程</strong></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;a += <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">thread1</span><span class="params">(<span class="built_in">run</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">thread2</span><span class="params">(<span class="built_in">run</span>)</span></span>;</span><br><span class="line">    thread1.join();</span><br><span class="line">    thread2.join();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-04%20at%2013.31.49.png" alt="Screen Shot 2022-04-04 at 13.31.49" style="zoom:67%;" /></p><p><strong>多进程</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">bool</span> child)</span></span>&#123;</span><br><span class="line">    a += child ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="built_in">run</span>(pid == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-04%20at%2013.44.40.png" alt="Screen Shot 2022-04-04 at 13.44.40" style="zoom:80%;" /></p><p>多线程导致结果不同的原因：指令执行顺序可能不一样。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-04%20at%2013.50.44.png" alt="Screen Shot 2022-04-04 at 13.50.44"></p><h3 id="通信："><a href="#通信：" class="headerlink" title="通信："></a>通信：</h3><ul><li><p>多线程</p><ul><li>变量共享（高效</li><li>semaphore 信号，mutex 互斥，加锁</li></ul></li><li><p>多进程</p><ul><li><p>内存共享（高效</p></li><li><p>pipe管道</p><p>  <code>&gt; cat a.cpp | grep &quot;hello&quot;</code></p></li><li><p>socket</p><p>  <code>&gt; curl http://example.com/now</code></p></li><li><p>RPC</p><ul><li>RMI</li><li>HTTP/Rest</li></ul></li></ul></li></ul><h2 id="为什么需要多线程"><a href="#为什么需要多线程" class="headerlink" title="为什么需要多线程"></a>为什么需要多线程</h2><h4 id="更多的响应"><a href="#更多的响应" class="headerlink" title="更多的响应"></a>更多的响应</h4><ul><li><p>UI</p><p>  单线程程序 UI –&gt; job —&gt; UI 在这个过程中job响应时间比较长就会造成比较差的用户体验。</p><p>  多线程：（单内核情况）UI –&gt; job –&gt;UI—&gt; job —&gt; UI （例如点击UI button 之后，button disable，然后UI可以继续拖动）。</p><p>  （多内核情况） UI —&gt; 空 —&gt;UI —&gt; 空 —&gt; UI ；Job –&gt; （UI和job 分别运行在多个CPU核心上）</p></li><li><p>Web servers</p><p>  IO 多线程，可以提高处理时间速度</p></li></ul><h4 id="进程加速"><a href="#进程加速" class="headerlink" title="进程加速"></a>进程加速</h4><ul><li>多线程算法</li><li>并行计算</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序指令能被&lt;strong&gt;单独&lt;/strong&gt;操作的最小序列单位&lt;/li&gt;
&lt;li&gt;拥有自己
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++ Smart pointer</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/04/02/C-Smart-pointer/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/04/02/C-Smart-pointer/</id>
    <published>2022-04-02T15:36:40.000Z</published>
    <updated>2022-08-10T14:54:13.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-智能指针"><a href="#C-智能指针" class="headerlink" title="C++ 智能指针"></a>C++ 智能指针</h1><blockquote><p>C++指针支持使用 和 运算符动态分配和释放<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/new-operator-cpp?view=msvc-170" target="_blank" rel="noopener"><code>new</code></a><a href="https://docs.microsoft.com/zh-cn/cpp/cpp/delete-operator-cpp?view=msvc-170" target="_blank" rel="noopener"><code>delete</code></a>对象。 这些运算符为来自称为“自由存储”的池中的对象分配内存。 运算符 <strong><code>new</code></strong> 调用特殊函数 <a href="https://docs.microsoft.com/zh-cn/cpp/cpp/new-operator-cpp?view=msvc-170" target="_blank" rel="noopener"><code>operator new</code></a>，运算符 <strong><code>delete</code></strong> 调用特殊函数 <a href="https://docs.microsoft.com/zh-cn/cpp/cpp/delete-operator-cpp?view=msvc-170" target="_blank" rel="noopener"><code>operator delete</code></a>。</p><p>C++ 智能指针思路类似于在语言（如 C#）中创建对象的过程：创建对象后让系统负责在正确的时间将其删除。 不同之处在于，单独的垃圾回收器不在后台运行；按照标准 C++ 范围规则对内存进行管理，以使运行时环境更快速更有效。</p></blockquote><p>实际的C++开发过程中存在程序崩溃、程序运行所需内存越来越多的问题等，主要原因有：</p><ul><li>内存资源已经释放，但它的指针并没有改变指向（未指向nullptr，成为了野指针），并且后续还在使用。</li><li>有些内存资源已经释放，后期又试图再次释放（重复释放会导致程序运行崩溃）。</li><li>没有及时释放不再使用的内存资源，造成内存泄漏。</li></ul><p>C++在 98/03 标准时支持使用 auto_ptr 智能指针来实现堆内存的自动回收，C++11标准在废弃 auto_ptr 同时添加了 unique_ptr，shared_ptr 以及 weak_ptr 3个智能指针来实现堆内存的自动回收。</p><blockquote><p>C++ 智能指针底层是采用引用计数的方式实现的。简单的理解，智能指针在申请堆内存空间的同时，会为其配备一个整形值（初始值为 1），每当有新对象使用此堆内存时，该整形值 +1；反之，每当使用此堆内存的对象被释放时，该整形值减 1。当堆空间对应的整形值为 0 时，即表明不再有对象使用它，该堆空间就会被释放掉。</p></blockquote><h3 id="share-ptr-初始化"><a href="#share-ptr-初始化" class="headerlink" title="share_ptr 初始化"></a>share_ptr 初始化</h3><p>智能指针类模板 \<memory> 头文件，并位于 std 命名空间中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>unique_dir、weak_ptr 指针不同之处：多个 shared_ptr 智能指针可以共同使用同一块堆内存。</p><p>构造 shared_ptr\<T> 类型空智能指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p1;             <span class="comment">//不传入任何实参</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;    <span class="comment">//传入空指针 nullptr</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;<span class="comment">//明确指针指向</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p3 = <span class="built_in">std</span>::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>); <span class="comment">//通过std::make_shared&lt;T&gt; 初始化智能指针, 消除了使用 new 关键字带来的与 delete 不对称的问题</span></span><br></pre></td></tr></table></figure><hr><p>shared_ptr<T> 模板还提供有相应的拷贝构造函数和移动构造函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用拷贝构造函数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p4</span><span class="params">(p3)</span></span>;<span class="comment">//或者 std::shared_ptr&lt;int&gt; p4 = p3;</span></span><br><span class="line"><span class="comment">//调用移动构造函数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p5</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">move</span>(p4))</span></span>; <span class="comment">//或者 std::shared_ptr&lt;int&gt; p5 = std::move(p4);</span></span><br></pre></td></tr></table></figure><ul><li>p3为左值，调用拷贝构造函数</li><li>使用std::move(p4)来说，函数会强制将p4转换成对应的右值，且 std::move(p4)初始化p5，使得p5拥有了p4的堆内存，而p4变成了空智能指针。</li></ul><p><strong>注意：同一普通指针不能同时为多个 shared_ptr 对象赋值，否则会导致程序发生异常</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* ptr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(ptr)</span></span>;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="内存释放（自定义）"><a href="#内存释放（自定义）" class="headerlink" title="内存释放（自定义）"></a>内存释放（自定义）</h3><p>shared_ptr 指针默认的释放规则不支持释放数组，只能自定应双方规则。</p><p>C++11 标准中提供的 default_delete\<T> 模板类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定 default_delete 作为释放规则</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>], <span class="built_in">std</span>::default_delete&lt;<span class="keyword">int</span>[]&gt;() )</span></span>;</span><br><span class="line"><span class="comment">//自定义释放规则，并初始化智能指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteInt</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> []p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>], deleteInt)</span></span>;</span><br></pre></td></tr></table></figure><p>借助 lambda 表达式进行初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>], [](<span class="keyword">int</span> *p) &#123; <span class="keyword">delete</span>[]p; &#125; )</span></span>;</span><br></pre></td></tr></table></figure><hr><p>std::shared_ptr 可以通过 get()方法来获取原始指针，通过 reset() 来减少一个引用计数，通过 use_count()来查看一个对象的引用计数。</p><p>也就是说 子引用reset时父引用也会减1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> pointer = <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">auto</span> pointer2 = pointer; <span class="comment">// 引用计数+1</span></span><br><span class="line"><span class="keyword">auto</span> pointer3 = pointer; <span class="comment">//引用计数+1</span></span><br><span class="line"><span class="keyword">int</span> *p = pointer.<span class="built_in">get</span>(); <span class="comment">// 这样不会增加引用计数</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer.use_count() = "</span> &lt;&lt; pointer.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer2.use_count() = "</span> &lt;&lt; pointer2.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer3.use_count() = "</span> &lt;&lt; pointer3.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">pointer2.reset();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reset pointer2:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer.use_count() = "</span> &lt;&lt; pointer.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer2.use_count() = "</span> &lt;&lt; pointer2.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 0, pointer2 已 reset</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer3.use_count() = "</span> &lt;&lt; pointer3.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">pointer3.reset();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reset pointer3:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer.use_count() = "</span> &lt;&lt; pointer.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer2.use_count() = "</span> &lt;&lt; pointer2.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pointer3.use_count() = "</span> &lt;&lt; pointer3.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 0, pointer3 已 reset</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>(Entity) e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//bar owns e;</span></span><br><span class="line">    <span class="comment">//e will be automatically destroyed.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> e = <span class="built_in">std</span>::make_unique&lt;Entity&gt;();</span><br><span class="line">    e-&gt;doSomething();</span><br><span class="line">    bar(<span class="built_in">std</span>::<span class="built_in">move</span>(e));</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="comment">//No memory leak;</span></span><br></pre></td></tr></table></figure><h3 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h3><p>std::unique_ptr 是一种独占的智能指针，它禁止其他智能指针与其共享同一个对象。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; pointer = <span class="built_in">std</span>::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);<span class="comment">//make_unique从C++14开始</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span> pointer2 = pointer;<span class="comment">//illegal 非法</span></span><br></pre></td></tr></table></figure><p>std::unique_ptr 只能使用 move 函数进行移动。</p><p>std::unique_ptr 不能直接进行函数传参，只能通过foo(std::move(p)) 方式传递。</p><p><img src="https://docs.microsoft.com/zh-cn/cpp/cpp/media/unique_ptr.png?view=msvc-170" alt="Diagram that shows moving the ownership of a unique pointer."></p><p>使用 <code>unique_ptr</code> 进行封装指向大型对象的指针：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessLargeObject</span><span class="params">(<span class="keyword">const</span> LargeObject&amp; lo)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SmartPointerDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="comment">// Create the object and pass it to a smart pointer</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;LargeObject&gt; <span class="title">pLarge</span><span class="params">(<span class="keyword">new</span> LargeObject())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Call a method on the object</span></span><br><span class="line">    pLarge-&gt;DoSomething();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass a reference to a method.</span></span><br><span class="line">    ProcessLargeObject(*pLarge);</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//pLarge is deleted automatically when function block goes out of scope.</span></span><br></pre></td></tr></table></figure><p>或者使用reset来进行手动释放指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SmartPointerDemo2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Create the object and pass it to a smart pointer</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;LargeObject&gt; <span class="title">pLarge</span><span class="params">(<span class="keyword">new</span> LargeObject())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Call a method on the object</span></span><br><span class="line">    pLarge-&gt;DoSomething();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Free the memory before we exit function block.</span></span><br><span class="line">    pLarge.reset();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do some other work...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fun</span>&#123;</span></span><br><span class="line">    fun()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Fun::fun()"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~fun()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Fun::fun()"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Fun::fun"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> Fun &amp;)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"f(const Fun&amp;)"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>(Fun) p (<span class="built_in">std</span>::make_unique&lt;Fun&gt;() );</span><br><span class="line">    <span class="keyword">if</span>(p) p-&gt;fun();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Fun) p1 (<span class="built_in">std</span>::<span class="built_in">move</span>(p));</span><br><span class="line">     <span class="comment">// p 不空, 输出</span></span><br><span class="line">        f(*p); <span class="comment">// f(const Fun&amp;)</span></span><br><span class="line">        <span class="comment">// p2 不空, 输出</span></span><br><span class="line">        <span class="keyword">if</span>(p1) p1-&gt;foo();</span><br><span class="line">        <span class="comment">// p 为空, 无输出</span></span><br><span class="line">        <span class="keyword">if</span>(p) p-&gt;foo();</span><br><span class="line">        p = <span class="built_in">std</span>::<span class="built_in">move</span>(p1);</span><br><span class="line">        <span class="comment">// p1 为空, 无输出</span></span><br><span class="line">        <span class="keyword">if</span>(p1) p1-&gt;foo();</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 被销毁"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// p 不空, 输出</span></span><br><span class="line">    <span class="keyword">if</span> (p) p-&gt;foo();</span><br><span class="line">    <span class="comment">// Foo 的实例会在离开作用域时被销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h3><p>weak_ptr 使用之前必须转换为 shared_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">observe</span><span class="params">(<span class="built_in">std</span>::weak_ptr&lt;Entity&gt; ew)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Entity&gt; p = ew.lock())&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p.use_count()&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"entity still alive."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"entity was expired."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-------------"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter"</span>);</span><br><span class="line">    <span class="built_in">std</span>::weak_ptr&lt;Entity&gt; ew;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"enter scope"</span>);</span><br><span class="line">        <span class="keyword">auto</span> e1 = <span class="built_in">std</span>::make_shared&lt;Entity&gt;();</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;e1.use_count()&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        ew = e1;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;e1.use_count()&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        observe(ew);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"leave scope"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    observe(ew);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"leave"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">enter;</span><br><span class="line">enter scope;</span><br><span class="line">entity create;</span><br><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">2</span>;</span><br><span class="line">entity still alive;</span><br><span class="line">leave scope;</span><br><span class="line">entity was destroyed;</span><br><span class="line">leave;</span><br></pre></td></tr></table></figure><p>std::shared_ptr 在类间指针类型的成员变量互相引用的情况下会出现无法释放的问题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;B&gt; pointer;</span><br><span class="line">    ~A()&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"delete A"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;A&gt; pointer;</span><br><span class="line">    ~B()&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"delete B"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://winpic-1253102271.cos.ap-beijing.myqcloud.com/image-20220403152434189.png" alt="image-20220403152434189" style="zoom:50%;" /></p><p>使用 std::weak_ptr 弱引用，弱引用不会引起引用计数的增加。</p><p><img src="https://winpic-1253102271.cos.ap-beijing.myqcloud.com/image-20220403152525559.png" alt="image-20220403152525559" style="zoom:50%;" /></p><p>std::weak_ptr 没有 * 和 -&gt; 运算符，不能够对资源进行操作。</p><p>它可以用来检查 std::shared_ptr 是否存在，expired() 方法能够检测资源未释放时返回false，释放时返回true。</p><p>还可以用来获取指向原始对象的 std::shared_ptr ，其lock() 方法在原始对象未被释放时，返回一个指向原始对象的 std::share_ptr 指针，进而访问原始对象的资源，否则返回 nullptr。</p><h2 id="智能指针类"><a href="#智能指针类" class="headerlink" title="智能指针类"></a>智能指针类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SharedPointer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">//默认构造函数，内部指针，未指向任何资源，引用计数为0,因为它未与任何资源绑定</span></span><br><span class="line">    SharedPointer() :m_refCount(<span class="literal">nullptr</span>), m_pointer(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，初始化时，指向一个已经分配好的资源</span></span><br><span class="line">    SharedPointer(T* adoptTarget) :m_refCount(<span class="literal">nullptr</span>), m_pointer(adoptTarget)</span><br><span class="line">    &#123;</span><br><span class="line">        addReference();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数，使用其它对象创建新对象</span></span><br><span class="line">    SharedPointer(<span class="keyword">const</span> SharedPointer&lt;T&gt;&amp; copy)</span><br><span class="line">        :m_refCount(copy.m_refCount), m_pointer(copy.m_pointer)</span><br><span class="line">    &#123;</span><br><span class="line">        addReference();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//析构函数，引用计数递减，当为0时，释放资源</span></span><br><span class="line">    <span class="keyword">virtual</span> ~SharedPointer()</span><br><span class="line">    &#123;</span><br><span class="line">        removeReference();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//操作符重载</span></span><br><span class="line">    <span class="comment">//赋值操作</span></span><br><span class="line">    <span class="comment">//当左值被赋值时，表明它不再指向所指的资源，故引用计数减一</span></span><br><span class="line">    <span class="comment">//之后，它指向了新的资源，所以对应这个资源的引用计数加一</span></span><br><span class="line">    SharedPointer&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SharedPointer&lt;T&gt;&amp; that)</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否指向同一个资源</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> SharedPointer&lt;T&gt;&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> SharedPointer&lt;T&gt;&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指针解引用</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用所知对象的公共成员</span></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取引用计数个数</span></span><br><span class="line">    <span class="keyword">int</span> GetReferenceCount() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//当为nullpter时，创建引用计数资源，并初始化为1</span></span><br><span class="line">    <span class="comment">//否则，引用计数加1。</span></span><br><span class="line">    <span class="keyword">void</span> addReference()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//引用计数减一，当变为0时，释放所有资源</span></span><br><span class="line">    <span class="keyword">void</span> removeReference()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//定义原始指针和指针计数器</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> * m_refCount;</span><br><span class="line">    T   * m_pointer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-智能指针&quot;&gt;&lt;a href=&quot;#C-智能指针&quot; class=&quot;headerlink&quot; title=&quot;C++ 智能指针&quot;&gt;&lt;/a&gt;C++ 智能指针&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C++指针支持使用 和 运算符动态分配和释放&lt;a href=&quot;https:
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://github.com/liysky/liysky.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Cmake common syntax</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2022/03/30/Cmake-common-syntax/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2022/03/30/Cmake-common-syntax/</id>
    <published>2022-03-30T15:14:09.000Z</published>
    <updated>2022-03-30T15:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>以一个 OpenGL 程序为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//文件目录</span><br><span class="line">./</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── build</span><br><span class="line">├── lib</span><br><span class="line">│   └── glad.c</span><br><span class="line">└── main.cpp</span><br></pre></td></tr></table></figure><p>CMakeLists.txt文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake的版本号</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="comment"># project 的名字</span></span><br><span class="line"><span class="keyword">project</span>(OpenglDemo)</span><br><span class="line"><span class="comment"># C++ version</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="comment">#set(CMAKE_CXX_STANDARD 17)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查环境变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="keyword">DEFINED</span> ENV&#123;GLFW_HOME&#125;)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">"found no env named GLFW_HOME"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="keyword">DEFINED</span> ENV&#123;GLAD_HOME&#125;)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">"found no env named GLAD_HOME"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存环境变量</span></span><br><span class="line"><span class="keyword">set</span>(GLFW_HOME $ENV&#123;GLFW_HOME&#125;)</span><br><span class="line"><span class="keyword">set</span>(GLAD_HOME $ENV&#123;GLAD_HOME&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">"$&#123;GLFW_HOME&#125;/include"</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">"$&#123;GLAD_HOME&#125;/include"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 GLFW3 预编译库</span></span><br><span class="line"><span class="keyword">add_library</span>(glfw SHARED IMPORTED)   <span class="comment"># add_library(想要编译成的库名字 类型 文件地址/导入类型) 其中如果是导入类型的话需要搭配下面的 SET_TARGET_PROPERTIES 使用</span></span><br><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>( glfw <span class="comment">#指定库名</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION     <span class="comment">#指明要设置的参数</span></span><br><span class="line">                       <span class="string">"$&#123;GLFW_HOME&#125;/lib/libglfw.3.3.dylib"</span> <span class="comment">#指定路径</span></span><br><span class="line">                       ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(OpenglDemo main.cpp <span class="string">"lib/glad.c"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 GLFW GLAD OpenGL</span></span><br><span class="line"><span class="comment"># target_link_libraries(可执行程序 需要链接的库)</span></span><br><span class="line"><span class="comment">#target_link_libraries(&lt;name&gt; lib1 lib2 lib3) 库的依赖顺序为：lib1依赖于lib2依赖于lib3</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(OpenglDemo glfw <span class="string">"-framework OpenGL"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以一个 OpenGL 程序为例：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="cmake" scheme="https://github.com/liysky/liysky.github.io.git/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode TIPS</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/11/29/LeetCode-TIPS/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/11/29/LeetCode-TIPS/</id>
    <published>2021-11-29T14:58:13.000Z</published>
    <updated>2022-08-15T13:48:58.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-OWNTIPS"><a href="#LeetCode-OWNTIPS" class="headerlink" title="LeetCode OWNTIPS"></a>LeetCode OWNTIPS</h1><div class="table-container"><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">C++</th><th style="text-align:center">Java</th></tr></thead><tbody><tr><td style="text-align:center">array</td><td style="text-align:center">T dirs[n]</td><td style="text-align:center">T[] dirs = new T[n]</td></tr><tr><td style="text-align:center">dynamic array</td><td style="text-align:center">vector\<T\></td><td style="text-align:center">ArrayList\<T\></td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">list\<T\></td><td style="text-align:center">LinkedList\<T\></td></tr><tr><td style="text-align:center">OrderedSet \ OrderedMap</td><td style="text-align:center">set\<T\>, map\<T1,T2\></td><td style="text-align:center">TreeSet\<T\>, TreeMap\<T1,T2\></td></tr><tr><td style="text-align:center">HashSet  \ HashMap</td><td style="text-align:center">unordered_set\<T\>, unordered_map\<T1,T2\></td><td style="text-align:center">HashSet\<T\>, HashMap\<T1,T2\></td></tr><tr><td style="text-align:center">heap</td><td style="text-align:center">priority_queue\<T\></td><td style="text-align:center">PriorityQueue\<T\></td></tr><tr><td style="text-align:center">queue, deque</td><td style="text-align:center">queue\<T\>, deque\<T></td><td style="text-align:center">Queue\<T\>, Deque\<T></td></tr><tr><td style="text-align:center">stack</td><td style="text-align:center">stack\<T></td><td style="text-align:center">Stack\<T></td></tr><tr><td style="text-align:center">pair \ tuple</td><td style="text-align:center">pair\<T1,T2>, tuple\<T1, T2, T3></td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">customized</td><td style="text-align:center">struct , class , long</td><td style="text-align:center">class</td></tr></tbody></table></div><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-04%20at%2011.15.00.png" alt="Screen Shot 2022-04-04 at 11.15.00" style="zoom:67%;" /></p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蓝红左右双指针二分法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRight</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = -<span class="number">1</span>, r = nums.size();</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> != r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l ) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// isBlue  &lt;= </span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt;= target)&#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findLeft</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = -<span class="number">1</span>, r = nums.size();</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> != r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l ) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// isBlue  &lt; </span></span><br><span class="line">        <span class="comment">// isRed &gt;= target --&gt; left is right first;</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//单调递增区间查找某个值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找不到target返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单调区间查找第一个大于等于某个值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bsearch1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left == nums.lenght)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单调区间查找第一个小于等于某个值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bsearch1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nSum 之和问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">fourSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// n 为 4，从 nums[0] 开始计算和为 target 的四元组</span></span><br><span class="line">        <span class="keyword">return</span> nSumTarget(nums, <span class="number">4</span>, <span class="number">0</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意：调用这个函数之前一定要先给 nums 排序 */</span></span><br><span class="line">    <span class="comment">// n 填写想求的是几数之和，start 从哪个索引开始计算（一般填 0），target 填想凑出的目标和</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">nSumTarget</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">long</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sz = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="comment">// 至少是 2Sum，且数组大小不应该小于 n</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span> || sz &lt; n) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">// 2Sum 是 base case</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 双指针那一套操作</span></span><br><span class="line">            <span class="keyword">int</span> lo = start, hi = sz - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[lo] + nums[hi];</span><br><span class="line">                <span class="keyword">int</span> left = nums[lo], right = nums[hi];</span><br><span class="line">                <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.push_back(&#123;left, right&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// n &gt; 2 时，递归计算 (n-1)Sum 的结果</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; sz; i++) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;</span><br><span class="line">                        sub = nSumTarget(nums, n - <span class="number">1</span>, i + <span class="number">1</span>, target - nums[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; arr : sub) &#123;</span><br><span class="line">                    <span class="comment">// (n-1)Sum 加上 nums[i] 就是 nSum</span></span><br><span class="line">                    arr.emplace_back(nums[i]);</span><br><span class="line">                    res.emplace_back(arr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; sz - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong></p><ul><li>对于两数之和，双指针操作时间复杂度为 O(N)，排序为 Nlog(N) —&gt; 总时间复杂度为 Nlog(N)</li><li>对于三数之和，因为有循环调用所以为  O (Nlog(N) (排序) +  N^2(循环调用) )  = O(N^2) </li><li>对于四数之和，同上分析多了一层循环调用，为 O(N^3)</li></ul><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLoop</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">  ListNode *slow, *fast;</span><br><span class="line">  slow = fast = head;</span><br><span class="line">  <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span> )&#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    fast = fast-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并两个链表"><a href="#合并两个链表" class="headerlink" title="合并两个链表"></a>合并两个链表</h2><p>dump 指针的妙用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoList</span><span class="params">( ListNode* l1, ListNode* l2)</span></span>&#123;</span><br><span class="line">  ListNode* dump = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">while</span>(l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">      dump-&gt;next = l1;</span><br><span class="line">      l1 = l1-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      dump-&gt;next = l2;</span><br><span class="line">      l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dump-&gt;next = l1 == <span class="literal">nullptr</span> ? l2 : l1;</span><br><span class="line">  <span class="keyword">return</span> dump-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><ul><li><p>通常多是循环整个流水线</p><ul><li><p>右窗口移动时的条件：</p><p>窗口未满足条件</p><p>右窗口移动时，该做什么？添加谁，删除谁？</p></li><li><p>左窗口移动的条件：</p><p>窗口满了？</p><p>需要删除什么元素？</p></li><li><p>什么时间添加 ans 结果。</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; nums.<span class="built_in">size</span>(); right++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!q.empty() &amp;&amp; nums[right] &gt;= nums[q.back()] )&#123;</span><br><span class="line">                q.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            q.push_back(right);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> left = right - k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!q.empty() &amp;&amp; left &gt; q.front() )&#123;</span><br><span class="line">                q.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// right + 1 &gt;= k 时，代表窗口已经形成，即已经满足窗口大小，再往后移动每一步都会满足一个窗口的大小。</span></span><br><span class="line">            <span class="comment">//由于下标是从0开始的，所以当right+1&gt;=k时，意味着窗口形成。</span></span><br><span class="line">            <span class="keyword">if</span>(right + <span class="number">1</span> &gt;= k)&#123;</span><br><span class="line">                ans.push_back(nums[q.front()]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优先队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">      <span class="comment">//priority_queue 容器默认为按照元素值从大到小进行排序</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            q.emplace(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = &#123;q.top().first&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">            q.emplace(nums[i], i);</span><br><span class="line">            <span class="keyword">while</span> (q.top().second &lt; i - k + <span class="number">1</span>) &#123;</span><br><span class="line">                q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(q.top().first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的迭代-非递归遍历"><a href="#二叉树的迭代-非递归遍历" class="headerlink" title="二叉树的迭代-非递归遍历"></a>二叉树的迭代-非递归遍历</h2><p>思想即：</p><p>中左右，左中右，左右中。</p><p>利用 stack 来先入后出，即入栈的顺序与上述相反，记住此即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            TreeNode* node = st.top();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line"></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">NULL</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.top();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.push_back(node-&gt;val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreePrint</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preTreeorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode *&gt; mystack;</span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">          <span class="keyword">if</span>( root != <span class="literal">nullptr</span> )&#123;</span><br><span class="line">                mystack.emplace(root);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>( !mystack.empty() )&#123;</span><br><span class="line">          TreeNode* p = mystack.top();</span><br><span class="line">          mystack.pop();</span><br><span class="line">          <span class="keyword">if</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;right);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(p-&gt;left)&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;left);</span><br><span class="line">              &#125;</span><br><span class="line">              mystack.emplace(p);</span><br><span class="line">              mystack.emplace(<span class="literal">nullptr</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p = mystack.top();</span><br><span class="line">                mystack.pop();</span><br><span class="line">                ans.push_back(p-&gt;val);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode *&gt; mystack;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            mystack.emplace(root);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">while</span>(!mystack.empty())&#123;</span><br><span class="line">            TreeNode* p = mystack.top();</span><br><span class="line">            mystack.pop();</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right != <span class="literal">nullptr</span> )&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;right);</span><br><span class="line">              &#125;</span><br><span class="line">                mystack.emplace(p);</span><br><span class="line">                mystack.emplace(<span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;left);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p = mystack.top();</span><br><span class="line">                mystack.pop();</span><br><span class="line">                ans.push_back(p-&gt;val);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode *&gt; mystack;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">      <span class="comment">//judge root whether is nullprt or not</span></span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            mystack.emplace(root);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//push into stack</span></span><br><span class="line">        <span class="keyword">while</span>(!mystack.empty())&#123;</span><br><span class="line">            TreeNode* p = mystack.top();</span><br><span class="line">            mystack.pop();</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">              mystack.emplace(p);</span><br><span class="line">                mystack.emplace(<span class="literal">nullptr</span>);</span><br><span class="line">              <span class="keyword">if</span>(p-&gt;right != <span class="literal">nullptr</span> )&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;right);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(p-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    mystack.emplace(p-&gt;left);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;    <span class="comment">// important: when to output and merge into anwser</span></span><br><span class="line">                p = mystack.top();</span><br><span class="line">                mystack.pop();</span><br><span class="line">                ans.push_back(p-&gt;val);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树题目的一个难点就是，如何把题目的要求细化成每个节点需要做的事情</strong></p><h3 id="构造最大树"><a href="#构造最大树" class="headerlink" title="构造最大树"></a>构造最大树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">constructMaximumBinarytree</span><span class="params">(<span class="keyword">int</span> &amp;num[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> buildTree( num, <span class="number">0</span>, num.<span class="built_in">size</span>() - <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> num[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(low &gt; high)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">int</span> maxValue = MAX_INT;</span><br><span class="line">      <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = low; i &lt;= high; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxValue &lt; num[i])&#123;</span><br><span class="line">                maxValue = num[i];</span><br><span class="line">              index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      TreeNode* root = <span class="keyword">new</span> TreeNode(maxValue);</span><br><span class="line">      root-&gt;left = buildTree(num, low, index<span class="number">-1</span>);</span><br><span class="line">      root-&gt;right = buildTree(num, index+<span class="number">1</span>, high);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过前序遍历中序遍历来构造二叉树"><a href="#通过前序遍历中序遍历来构造二叉树" class="headerlink" title="通过前序遍历中序遍历来构造二叉树"></a>通过前序遍历中序遍历来构造二叉树</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20211212212719158.png" alt="image-20211212212719158" style="zoom:50%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">treeBuildTree</span><span class="params">( <span class="keyword">int</span>&amp; preorder, <span class="keyword">int</span>&amp; inorder )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>() - <span class="number">1</span> , </span><br><span class="line">                 inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>() - <span class="number">1</span> )</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* build(<span class="keyword">int</span>&amp; preorder[], <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>&amp; inorder[], <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)&#123;</span><br><span class="line">    <span class="comment">//base case: </span></span><br><span class="line">    <span class="keyword">if</span>(preStart &lt; preEnd || inStart &lt; inEnd )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rootvalue = preorder[preStart];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// find the index in order array;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rootValue = inorder[i] )&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// manage the root-&gt;left and root-&gt;right;</span></span><br><span class="line">    <span class="keyword">int</span> leftsize = index - preStart;</span><br><span class="line">    root-&gt;left = build( preorder, preStart + <span class="number">1</span>, preStart + leftsize, </span><br><span class="line">                        inorder, inStart, index <span class="number">-1</span> );</span><br><span class="line">    root-&gt;right = build(preorder, preStart + leftsize + <span class="number">1</span>, preEnd,</span><br><span class="line">                        inorder, index + <span class="number">1</span>, inEnd );</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过中序遍历后序遍历来构造二叉树"><a href="#通过中序遍历后序遍历来构造二叉树" class="headerlink" title="通过中序遍历后序遍历来构造二叉树"></a>通过中序遍历后序遍历来构造二叉树</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-12-12%20at%2021.27.29.png" alt="Screen Shot 2021-12-12 at 21.27.29" style="zoom:50%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">treeBuildTree</span><span class="params">( <span class="keyword">int</span>&amp; preorder, <span class="keyword">int</span>&amp; inorder )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>() - <span class="number">1</span> , </span><br><span class="line">                 inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>() - <span class="number">1</span> )</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* build(<span class="keyword">int</span>&amp; postorder[], <span class="keyword">int</span> posStart, <span class="keyword">int</span> posEnd, <span class="keyword">int</span>&amp; inorder[], <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)&#123;</span><br><span class="line">    <span class="comment">//base case: </span></span><br><span class="line">    <span class="keyword">if</span>(posStart &lt; posEnd || inStart &lt; inEnd )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rootvalue = posorder[posEnd];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// find the index in order array;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rootValue = inorder[i] )&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// manage the root-&gt;left and root-&gt;right;</span></span><br><span class="line">    <span class="keyword">int</span> leftsize = index - preStart;</span><br><span class="line">    root-&gt;left = build( posorder, posStart, posStart + leftsize - <span class="number">1</span> , </span><br><span class="line">                        inorder, inStart, index <span class="number">-1</span> );</span><br><span class="line">    root-&gt;right = build(posorder, posStart + leftsize, posEnd - <span class="number">1</span>,</span><br><span class="line">                        inorder, index + <span class="number">1</span>, inEnd );</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找重复的子树"><a href="#寻找重复的子树" class="headerlink" title="寻找重复的子树"></a>寻找重复的子树</h3><p>通过深度优先搜索，递归所有的子树的序列化的结果，并将其保存到 map 中，然后判断是否存在重复的子树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solutio</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;TreeNode* &gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TreeNode*&gt; ans;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        buildMap(root, mp, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">buildMap</span><span class="params">(TreeNode* root, <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&amp; mp, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TreeNode*&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> str = to_string( root-&gt;val ) + buildMap(root-&gt;left, mp, ans) + buildMap(root-&gt;right, mp, ans);</span><br><span class="line">        <span class="keyword">if</span>(mp[str] == <span class="number">1</span>)&#123;</span><br><span class="line">            ans.emplace_back(root);</span><br><span class="line">        &#125;</span><br><span class="line">        mp[str]++;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的序列化与反序列化"><a href="#二叉树的序列化与反序列化" class="headerlink" title="二叉树的序列化与反序列化"></a>二叉树的序列化与反序列化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> to_string(root-&gt;val) + <span class="string">' '</span> + serialize(root-&gt;left) + <span class="string">' '</span> + serialize(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">mydeserialize</span><span class="params">(<span class="built_in">istringstream</span> &amp;ss )</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> tmp;</span><br><span class="line">        ss&gt;&gt;tmp;</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="string">"#"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> TreeNode(stoi(tmp));</span><br><span class="line">        node-&gt;left = mydeserialize(ss);</span><br><span class="line">        node-&gt;right = mydeserialize(ss);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">ss</span><span class="params">(data)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> mydeserialize(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">return</span> to_string(root-&gt;val) + <span class="string">','</span> + serialize(root-&gt;left) + <span class="string">','</span> + serialize(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">       <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">list</span> = splitString(data, <span class="string">','</span>); </span><br><span class="line">       TreeNode* ans = buildTree(<span class="built_in">list</span>);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;&amp; <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">list</span>.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> temp = <span class="built_in">list</span>.front();</span><br><span class="line">        <span class="built_in">list</span>.pop_front();</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="string">"#"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(stoi(temp));</span><br><span class="line">        root-&gt;left = buildTree(<span class="built_in">list</span>);</span><br><span class="line">        root-&gt;right = buildTree(<span class="built_in">list</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; <span class="title">splitString</span><span class="params">(<span class="built_in">string</span>&amp; data, <span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> frontpot = <span class="number">-1</span>,  pos = <span class="number">0</span>; pos &lt; data.length(); pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[pos] == c)&#123;</span><br><span class="line">                res.emplace_back( data.substr(++frontpot, pos-frontpot) );</span><br><span class="line">                frontpot = pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser, deser;</span></span><br><span class="line"><span class="comment">// TreeNode* ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure><h3 id="二叉搜索子树的最大键值和"><a href="#二叉搜索子树的最大键值和" class="headerlink" title="二叉搜索子树的最大键值和"></a><a href="https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree/" target="_blank" rel="noopener">二叉搜索子树的最大键值和</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">         <span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">         ans = tranverse(root, maxSum );</span><br><span class="line">         <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tranverse</span><span class="params">(TreeNode* root, <span class="keyword">int</span>&amp; maxSum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp&#123;<span class="number">1</span>,INT_MAX, INT_MIN, <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">4</span>,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        left = tranverse(root-&gt;left, maxSum);</span><br><span class="line">        right = tranverse(root-&gt;right, maxSum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; right[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; root-&gt;val &gt; left[<span class="number">2</span>] &amp;&amp; root-&gt;val &lt; right[<span class="number">1</span>] )&#123;</span><br><span class="line">            res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            res[<span class="number">1</span>] = <span class="built_in">min</span>( left[<span class="number">1</span>], root-&gt;val );</span><br><span class="line">            res[<span class="number">2</span>] = <span class="built_in">max</span>( right[<span class="number">2</span>], root-&gt;val );</span><br><span class="line">            res[<span class="number">3</span>] = left[<span class="number">3</span>] + right[<span class="number">3</span>] + root-&gt;val;</span><br><span class="line">            maxSum = <span class="built_in">max</span>( res[<span class="number">3</span>], maxSum);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">二叉树的最近公共祖先</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);</span><br><span class="line">        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left != <span class="literal">nullptr</span> &amp;&amp; right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">nullptr</span> &amp;&amp; right == <span class="literal">nullptr</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left == <span class="literal">nullptr</span> ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>using postorder traversal to calculate the further node <code>left</code> and <code>right</code>.</p><h3 id="完全二叉树节点个数"><a href="#完全二叉树节点个数" class="headerlink" title="完全二叉树节点个数"></a><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">完全二叉树节点个数</a></h3><ul><li>完全二叉树：在完全二叉树中，除了最底层节点可能没有填满之外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。</li><li>满二叉树，即所有节点都满，共有 $2^{i}-1$个节点，第 i 层上有 $2^{i-1}$个节点。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode *l = root, *r = root;</span><br><span class="line">        <span class="keyword">int</span> hl = <span class="number">0</span>, hr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            hl++;</span><br><span class="line">            l = l-&gt;left;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(r != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            hr++;</span><br><span class="line">            r = r-&gt;right;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>( hl == hr)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">pow</span>(<span class="number">2</span>, hl) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">1</span> + countNodes(root-&gt;left) + countNodes(root-&gt;right) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>图节点：（同多叉树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    Vertex[] neighbors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>临接表和临接矩阵：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>[]&gt;[] graph;</span><br><span class="line"><span class="keyword">int</span>[][] matrix;</span><br></pre></td></tr></table></figure><p>多叉树-图的遍历方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == null) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(TreeNode child : root.children)&#123;</span><br><span class="line">        traverse(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若图中含有环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[] visited;</span><br><span class="line"><span class="keyword">boolean</span>[] onPath;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    visted[s] = <span class="keyword">true</span>;</span><br><span class="line">    onPath[s] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> neighbor : graph.neighbors(s))&#123;</span><br><span class="line">        traverse(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    onPath[s] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有可能的路径"><a href="#所有可能的路径" class="headerlink" title="所有可能的路径"></a>所有可能的路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="keyword">int</span>[][] graph) &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        traverse(graph, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> s, LinkedList&lt;Integer&gt; path)</span></span>&#123;</span><br><span class="line">       path.add(s);</span><br><span class="line">       <span class="keyword">int</span> n = graph.length;</span><br><span class="line">       <span class="keyword">if</span>(s == n - <span class="number">1</span> )&#123;</span><br><span class="line">           res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(path));</span><br><span class="line">           path.removeLast();</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> v : graph[s])&#123;</span><br><span class="line">           traverse(graph, v, path);</span><br><span class="line">       &#125;</span><br><span class="line">        path.removeLast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>课程表问题建图函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;[] buildGraph(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)&#123;</span><br><span class="line">    <span class="comment">// nodes of the map, its number is numCourses</span></span><br><span class="line">    List&lt;Integer&gt;[] graph = <span class="keyword">new</span> LinkedList[numCourses];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">        graph[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : prerequsities)&#123;</span><br><span class="line">        <span class="keyword">int</span> from = edge[<span class="number">1</span>], to = edge[<span class="number">0</span>];</span><br><span class="line">        graph[from].add(to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>List&lt;Integer&gt;[] graph = new LinkdList[numCourses];</code> 的使用。</p><h3 id="判断图是否有环的-DFS-算法"><a href="#判断图是否有环的-DFS-算法" class="headerlink" title="判断图是否有环的 DFS 算法"></a>判断图是否有环的 DFS 算法</h3><p>对应 <a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">课程表</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[] onPath;</span><br><span class="line"><span class="keyword">boolean</span>[] visited;</span><br><span class="line"><span class="keyword">boolean</span> hasCycle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequsities)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph = buildGraph(numCourses, prerequsities);</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">    onPath = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">        traverse(graph, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !hasCycle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;Integer&gt;[] graph, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(onPath[s])&#123;</span><br><span class="line">        hasCycle = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hasCycle || visited[s])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[s] = <span class="keyword">true</span>;</span><br><span class="line">    onPath[s] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : graph[s])&#123;</span><br><span class="line">        traverse(graph, v);</span><br><span class="line">    &#125;</span><br><span class="line">    onPath[s] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对应课程表II-后续遍历进行反转就是拓扑排序的结果"><a href="#对应课程表II-后续遍历进行反转就是拓扑排序的结果" class="headerlink" title="对应课程表II 后续遍历进行反转就是拓扑排序的结果"></a>对应课程表II 后续遍历进行反转就是拓扑排序的结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[] onPath;</span><br><span class="line"><span class="keyword">boolean</span>[] visited;</span><br><span class="line">List&lt;Integer&gt; postorder = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">boolean</span> hasCycle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequsities)&#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph = buildGraph(numCourses, prerequsities);</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">    onPath = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">        traverse(graph, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hasCycle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(postorder);</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">        res[i] = postorder.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;Integer&gt;[] graph, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(onPath[s])&#123;</span><br><span class="line">        hasCycle = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hasCycle || visited[s])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[s] = <span class="keyword">true</span>;</span><br><span class="line">    onPath[s] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : graph[s])&#123;</span><br><span class="line">        traverse(graph, v);</span><br><span class="line">    &#125;</span><br><span class="line">    postorder.add(s);</span><br><span class="line">    onPath[s] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断二分图"><a href="#判断二分图" class="headerlink" title="判断二分图"></a>判断二分图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isB = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        color = <span class="keyword">new</span> <span class="keyword">boolean</span>[graph.length];</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                traverse(graph, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isB) <span class="keyword">return</span>;</span><br><span class="line">        visited[s] = <span class="keyword">true</span>;        <span class="comment">//重点在于先进行访问标记，然后再进行判断。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : graph[s])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">                color[v] = !color[s];</span><br><span class="line">                traverse(graph, v);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(color[v] == color[s])&#123;</span><br><span class="line">                    isB = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进行访问，可能已经访问过的，但不马上进行返回而是判断其后续节点有没有相同的颜色。</p><p><strong>可能的二分法 </strong>  <a href="https://leetcode-cn.com/problems/possible-bipartition/" target="_blank" rel="noopener">链接</a>给定一组 <code>n</code> 人（编号为 <code>1, 2, ..., n</code>）， 我们想把每个人分进<strong>任意</strong>大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> OK = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited;</span><br><span class="line">    <span class="keyword">boolean</span>[] color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">possibleBipartition</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] dislikes)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt;[] graph = <span class="keyword">new</span> LinkedList[n+<span class="number">1</span>];</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        color = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        graph = buildGraph(dislikes, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            traverse(graph, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建图函数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt;[] buildGraph(<span class="keyword">int</span>[][] dislikes, <span class="keyword">int</span> n)&#123;</span><br><span class="line">        List&lt;Integer&gt;[] graph = <span class="keyword">new</span> LinkedList[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">             graph[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : dislikes)&#123;</span><br><span class="line">            <span class="comment">//无向图相当于双向图</span></span><br><span class="line">            <span class="keyword">int</span> from = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            graph[from].add(to); </span><br><span class="line">            graph[to].add(from); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;Integer&gt;[] graph, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!OK) <span class="keyword">return</span>;</span><br><span class="line">        visited[s] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : graph[s])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">                color[v] = !color[s];</span><br><span class="line">                traverse(graph, v);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(color[v] == color[s])&#123;</span><br><span class="line">                    OK = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集算法-Union-Find"><a href="#并查集算法-Union-Find" class="headerlink" title="并查集算法 (Union-Find)"></a>并查集算法 (Union-Find)</h3><p>动态连通性：</p><p>1～9个节点，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>&#123;</span></span><br><span class="line">    <span class="comment">//将节点 p，q进行连接</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>;</span><br><span class="line">    <span class="comment">//判断节点 p q 是否连接 </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>;</span><br><span class="line">    <span class="comment">//返回图中的连通分量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果增加图中某个相互连通的节点，那么图中的连通分量就会少一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;</span><br><span class="line">    <span class="comment">//连通分量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">//存储每个节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            <span class="comment">//*********添加此是为了进行大小树的优化，以此判断某个节点下包含多少节点（即数量）</span></span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点 p，q 进行连通</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootP = find(p);</span><br><span class="line">        <span class="keyword">int</span> rootQ = find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">         <span class="comment">//进行连通的时候使用了size进行大小判断，可以保证 find 的时间复杂度为 O(N) </span></span><br><span class="line">        <span class="keyword">if</span>(size[rootP] &gt; size[rootQ])&#123;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootP] = rootQ;</span><br><span class="line">            size[rootQ] += size[rootP]</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断节点 p，q 是否连通</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootP = find(p);</span><br><span class="line">        <span class="keyword">int</span> rootQ = find(q);</span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回节点 x 的连通分量的根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用了 parent[x] = parent[parent[x]] 路经压缩技巧</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(parent[x] != x)&#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回图中连通个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">returnCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>力扣第 323 题「 <a href="https://leetcode-cn.com/problems/number-of-connected-components-in-an-undirected-graph/" target="_blank" rel="noopener">无向图中连通分量的数目</a>」就是最基本的连通分量题目：</p><p>给你输入一个包含 <code>n</code> 个节点的图，用一个整数 <code>n</code> 和一个数组 <code>edges</code> 表示，其中 <code>edges[i] = [ai, bi]</code>表示图中节点 <code>ai</code> 和 <code>bi</code> 之间有一条边。请你计算这幅图的连通分量个数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countComponents</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span></span>&#123;</span><br><span class="line">    UF uf = <span class="keyword">new</span> UF(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] e : edges)&#123;</span><br><span class="line">        uf.union(e[<span class="number">0</span>], e[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uf.count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>给你一个 M×N 的二维矩阵，其中包含字符 <code>X</code> 和 <code>O</code>，让你找到矩阵中<strong>四面</strong>被 <code>X</code> 围住的 <code>O</code>，并且把它们替换成 <code>X</code>  <a href="https://leetcode-cn.com/problems/surrounded-regions/" target="_blank" rel="noopener">130. 被围绕的区域</a></p></blockquote><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/xogrid.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS 解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board == <span class="keyword">null</span> || board.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> n = board.length;</span><br><span class="line">        <span class="keyword">int</span> m = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">boolean</span> isEdge = i == <span class="number">0</span> || i == n - <span class="number">1</span> || j == <span class="number">0</span> || j == m -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(isEdge &amp;&amp; board[i][j] == <span class="string">'O'</span> )&#123;</span><br><span class="line">                    dfs(board, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                    board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] == <span class="string">'X'</span> || board[i][j] == <span class="string">'#'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">        dfs(board, i - <span class="number">1</span>, j);</span><br><span class="line">        dfs(board, i + <span class="number">1</span>, j);</span><br><span class="line">        dfs(board, i, j - <span class="number">1</span>);</span><br><span class="line">        dfs(board, i, j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="990-等式方程的可满足性"><a href="#990-等式方程的可满足性" class="headerlink" title="990. 等式方程的可满足性"></a><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/" target="_blank" rel="noopener">990. 等式方程的可满足性</a></h4><p>用并查集的方法来解决，现将 == 条件的进行连通，然后再进行 != 的连通，如果此过程中，存在==，则有冲突的存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equationPossible</span><span class="params">(String[] equations)</span></span>&#123;</span><br><span class="line">    UF uf = <span class="keyword">new</span> UF(<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span>(String eq : equations)&#123;</span><br><span class="line">        <span class="keyword">if</span>(eq.charAt[<span class="number">1</span>] == <span class="string">'='</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> x = eq.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">char</span> y = eq.charAt(<span class="number">3</span>);</span><br><span class="line">            uf.union(x - <span class="string">'a'</span>, y - <span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查 != 关系</span></span><br><span class="line">   <span class="keyword">for</span>(String eq : equations)&#123;</span><br><span class="line">        <span class="keyword">if</span>(eq.charAt[<span class="number">1</span>] == <span class="string">'！'</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> x = eq.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">char</span> y = eq.charAt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span>(uf.connected(x - <span class="string">'a'</span>, y - <span class="string">'a'</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="kruskal最小生成树"><a href="#kruskal最小生成树" class="headerlink" title="kruskal最小生成树"></a>kruskal最小生成树</h3><p>prime算法：选择与已知相连中最小的边，不能构成环。</p><p>kruskal算法：选择边最小的，无需与已知相连，不能构成环。</p><h4 id="以图判树"><a href="#以图判树" class="headerlink" title="以图判树"></a>以图判树</h4><blockquote><p>给你输入编号从 <code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个结点，和一个无向边列表 <code>edges</code>（每条边用节点二元组表示），请你判断输入的这些边组成的结构是否是一棵树。</p></blockquote><p>产生树的条件是不能够产生环。</p><p>即在生成树的过程中如果两个节点在之前已经是连通的（处在同一个连通分量里）那么就会产生环。</p><p>利用 Union-Find 算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">validTree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span></span>&#123;</span><br><span class="line">    UF uf = <span class="keyword">new</span> UF(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> [] e : edges)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = e[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> y = e[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(uf.connected(x,y))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uf.union(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uf.count() == <span class="number">1</span>;        <span class="comment">//保证最后的树为一个树，只有一个连通分量。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最低成本的联通所有城市"><a href="#最低成本的联通所有城市" class="headerlink" title="最低成本的联通所有城市"></a>最低成本的联通所有城市</h4><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdHMiaIZgKPc3aZYW2WIfQUViaJR5ux8oibricEckxYKDCicLviaNwpbpXU27psp8mx358L1ibjCO0QCbo1Ng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image" style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] connections )</span></span>&#123;</span><br><span class="line">    UF uf = <span class="keyword">new</span> UF(n+<span class="number">1</span>);    <span class="comment">// 1~n</span></span><br><span class="line">    Array.sort(connections, (a,b)-&gt;(a[<span class="number">2</span>] - b[<span class="number">2</span>]) );</span><br><span class="line">    <span class="keyword">int</span> mst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> edge : connections)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = edge[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> y = edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> v = edge[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(uf.connected(x, y))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uf.connected(x, y);</span><br><span class="line">        mst += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uf.count() == <span class="number">2</span> ? mst : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/min-cost-to-connect-all-points/" target="_blank" rel="noopener">1584. 连接所有点的最小费用</a></p><p>kruskal 算法，适合边少点多的稀疏图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostConnectPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = points.length;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                edges.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">                    i, j, Math.abs( points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>])+Math.abs(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>])</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排序，使用 lambda </span></span><br><span class="line">        Collections.sort(edges, (a,b)-&gt;(a[<span class="number">2</span>] - b[<span class="number">2</span>]) );</span><br><span class="line">        <span class="comment">// Collections.sort(edges, (a,b)-&gt;&#123;</span></span><br><span class="line">        <span class="comment">//     return a[2] - b[2];</span></span><br><span class="line">        <span class="comment">// &#125; );</span></span><br><span class="line">        <span class="keyword">int</span> mst = <span class="number">0</span>;</span><br><span class="line">        UF uf = <span class="keyword">new</span> UF(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : edges)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> w = edge[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span>(uf.connected(x, y))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            uf.union(x, y);</span><br><span class="line">            mst += w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(parent[index] != index)&#123;</span><br><span class="line">            parent[index] = parent[parent[index]];</span><br><span class="line">            index = parent[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootX = find(x); </span><br><span class="line">        <span class="keyword">int</span> rootY = find(y); </span><br><span class="line">        <span class="keyword">return</span> rootX == rootY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootX = find(x);</span><br><span class="line">        <span class="keyword">int</span> rootY = find(y);</span><br><span class="line">        <span class="keyword">if</span>(rootX == rootY) <span class="keyword">return</span>;</span><br><span class="line">        parent[rootX] = rootY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim算法："><a href="#Prim算法：" class="headerlink" title="Prim算法："></a>Prim算法：</h3><p>该算法以顶点为单元，与图中的边数无关，比较适合稠密图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prim</span></span>&#123;</span><br><span class="line">    <span class="comment">//优先队列存储边</span></span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;<span class="keyword">int</span>[]&gt; pq;</span><br><span class="line">    <span class="comment">//记录哪些节点已经成为最小生成树的一部分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] inMST;</span><br><span class="line">    <span class="comment">//记录最小生成树的权重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weightSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//graph 为用临接表表示的一幅图。graph[s] 记录节点S的所有相邻边。</span></span><br><span class="line">    <span class="comment">//int[]&#123;from, to, weight&#125;表示为一条边</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">int</span>[]&gt;[] graph;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prime</span><span class="params">(List&lt;<span class="keyword">int</span>[]&gt;[] graph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.graph = graph;</span><br><span class="line">        <span class="keyword">this</span>.pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;( (a,b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">2</span>] - b[<span class="number">2</span>];</span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        <span class="keyword">this</span>.inMST = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从第一个点开始切分</span></span><br><span class="line">        minMST[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        cut(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] edge = pd.poll();</span><br><span class="line">            <span class="keyword">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(inMST[to])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            inMST[to] = <span class="keyword">true</span>;</span><br><span class="line">            weightSum += edge[<span class="number">2</span>];</span><br><span class="line">            cut(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将s的横向切向边加入优先队列</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : graph[s])&#123;</span><br><span class="line">            <span class="keyword">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(inMST[to])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pd.offer(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">returnWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weightSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断最小生成树是否包含图中的所有的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allConnected</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!inMST[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="名流问题"><a href="#名流问题" class="headerlink" title="名流问题"></a>名流问题</h3><p>名流条件：</p><ul><li>所有其他人都认识「名人」</li><li>名人不认识其他所有人</li></ul><p>图论关系：</p><ul><li>临接表：适合存储，节约存储空间</li><li>邻接矩阵：快速判断两个节点是否相邻</li></ul><p>通过暴力解法双层循环判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findCele</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cand = <span class="number">0</span>; cand &lt; n; cand++)&#123;</span><br><span class="line">        <span class="keyword">int</span> other;</span><br><span class="line">        <span class="keyword">for</span>(other = <span class="number">0</span>; other &lt; n; other++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cand == other) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(knows(cand, other) || !know(other, cand))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当满足所有人都认识名人，而名人不认识所有人</span></span><br><span class="line">        <span class="keyword">if</span>(other == n) <span class="keyword">return</span> cand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化解法：</p><p>只需要判断任意两个人之间的关系：</p><ul><li>cand 认识 other，other 不认识 cand  –&gt; 排除 cand</li><li>cand 不认识 other，other 认识 cand –&gt; 排除 other</li><li>cand other 互相认识，两人都不是名人 –&gt; 随便排除一人</li><li>cand other 互不认识，两人都不是名人 –&gt; 随便排除一人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findCelebrity</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将所有候选人装进队列</span></span><br><span class="line">    LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.addLast(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一直排除，直到只剩下一个候选人停止循环</span></span><br><span class="line">    <span class="keyword">while</span> (q.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次取出两个候选人，排除一个</span></span><br><span class="line">        <span class="keyword">int</span> cand = q.removeFirst();</span><br><span class="line">        <span class="keyword">int</span> other = q.removeFirst();</span><br><span class="line">        <span class="comment">// cand 一定不是名人的条件：cand 认识 other ，或 other 不认识 cand</span></span><br><span class="line">        <span class="comment">//cand 认识 other，other不认识 cand</span></span><br><span class="line">        <span class="keyword">if</span> (knows(cand, other) || !knows(other, cand)) &#123;</span><br><span class="line">            <span class="comment">// cand 不可能是名人，排除，让 other 归队</span></span><br><span class="line">            q.addFirst(other);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">//其余情况下 cand 可能是名人，other 一定不是名人</span></span><br><span class="line">            <span class="comment">// other 不可能是名人，排除，让 cand 归队</span></span><br><span class="line">            q.addFirst(cand);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 现在排除得只剩一个候选人，判断他是否真的是名人</span></span><br><span class="line">    <span class="keyword">int</span> cand = q.removeFirst();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> other = <span class="number">0</span>; other &lt; n; other++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (other == cand) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保证其他人都认识 cand，且 cand 不认识任何其他人</span></span><br><span class="line">        <span class="keyword">if</span> (!knows(other, cand) || knows(cand, other)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cand 是名人</span></span><br><span class="line">    <span class="keyword">return</span> cand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 cand 与 other 交替变换来消除队列的操作，降低空间复杂度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findCelebrity</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先假设 cand 是名人</span></span><br><span class="line">    <span class="keyword">int</span> cand = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> other = <span class="number">1</span>; other &lt; n; other++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!knows(other, cand) || knows(cand, other)) &#123;</span><br><span class="line">            <span class="comment">// cand 不可能是名人，排除</span></span><br><span class="line">            <span class="comment">// 假设 other 是名人</span></span><br><span class="line">            cand = other;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// other 不可能是名人，排除</span></span><br><span class="line">            <span class="comment">// 什么都不用做，继续假设 cand 是名人</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 现在的 cand 是排除的最后结果，但不能保证一定是名人</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> other = <span class="number">0</span>; other &lt; n; other++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cand == other) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 需要保证其他人都认识 cand，且 cand 不认识任何其他人</span></span><br><span class="line">        <span class="keyword">if</span> (!knows(other, cand) || knows(cand, other)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dijkstra-最小路径算法"><a href="#Dijkstra-最小路径算法" class="headerlink" title="Dijkstra 最小路径算法"></a>Dijkstra 最小路径算法</h3><p>Dijkstra 算法的前提，加权有向图，没有负权重边，求最短路径</p><p>首先从二叉树的层序遍历算法开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gradeTraverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    List&lt;TreeNode&gt; q = LinkedList&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">            TreeNode tempNode = q.poll();</span><br><span class="line">            printf(<span class="string">"节点：%s 在第%s层"</span>, tempNode, depth);</span><br><span class="line">            <span class="keyword">if</span>(tempNode.left)&#123;</span><br><span class="line">                q.offer(tempNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tempNode.right)&#123;</span><br><span class="line">                q.offer(tempNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 while 负责的是从上到下，for循环负责的是每一层中的遍历。</p><p>如果为多叉树，则只需要变更其子节点的判断的地方即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">            TreeNode tempNode = q.poll();</span><br><span class="line">            printf(<span class="string">"..."</span>);</span><br><span class="line">               <span class="keyword">for</span>( TreeNode child : tempNode.child)&#123;</span><br><span class="line">                q.offer(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>基于以上便可以拓展出 BFS（广度优先搜索）算法框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == nullptr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Queue&lt;Node&gt; q;</span><br><span class="line">    Set&lt;Node&gt; visited;    <span class="comment">//记录已经访问节点</span></span><br><span class="line">    q.emplace(start);</span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">            Node tempNode = q.pop();</span><br><span class="line">            print(<span class="string">"the minimum distance from start %s to current node %s is %s"</span>, start, tempNode, step);</span><br><span class="line">            <span class="keyword">for</span>(Node child : tempNode.child)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited(child) == <span class="number">0</span>)&#123;</span><br><span class="line">                    q.emplace(child);</span><br><span class="line">                    visited.add(child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树去掉for循环，使用类。"><a href="#二叉树去掉for循环，使用类。" class="headerlink" title="二叉树去掉for循环，使用类。"></a>二叉树去掉for循环，使用类。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    TreeNode curNode;</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    State(TreeNode curNode, <span class="keyword">int</span> depth)&#123;</span><br><span class="line">        <span class="keyword">this</span>.curNode = curNode;</span><br><span class="line">        <span class="keyword">this</span>.depth = depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Queue&lt;State&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.offer(<span class="keyword">new</span> State(root, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        State <span class="keyword">new</span> curState = q.poll();</span><br><span class="line">        TreeNode curNode = curState.node;</span><br><span class="line">        <span class="keyword">int</span> curDepth = curState.depth;</span><br><span class="line">        print(<span class="string">"...."</span>);</span><br><span class="line">        <span class="keyword">if</span>(curNode.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            q.offer(<span class="keyword">new</span> state(curNode.left, curDepth+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curNode.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            q.offer(<span class="keyword">new</span> state(curNode.right, curDepth+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dijkstra算法实现"><a href="#Dijkstra算法实现" class="headerlink" title="Dijkstra算法实现"></a>Dijkstra算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="comment">// id of map</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// distance between start to id</span></span><br><span class="line">    <span class="keyword">int</span> distFromStart;</span><br><span class="line">    State(<span class="keyword">int</span> id, <span class="keyword">int</span> distFromStart)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.distFromStart = distFromStart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate the distance between start to id</span></span><br><span class="line"><span class="keyword">int</span>[] dijkstra(<span class="keyword">int</span> start, List&lt;<span class="keyword">int</span>[]&gt;[] graph)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dist2Id = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">    Arrays.fill(dist2Id, Integer.MAX_VALUE);</span><br><span class="line">    dist2Id[start] = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;State&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;( (a,b)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> a.distFromStart - b.distFromStart;</span><br><span class="line">    &#125; );</span><br><span class="line">    pq.offer(<span class="keyword">new</span> State(start, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        State curState = pq.poll();</span><br><span class="line">        <span class="keyword">int</span> curNodeID = curState.id;</span><br><span class="line">        <span class="keyword">int</span> curDistFromStart = curState.distFromStart;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(dist2Id[curNodeID] &lt; curDistFromStart)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] neighbor : graph[curNodeID])&#123;</span><br><span class="line">            <span class="keyword">int</span> nextNodeId = neighbor[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> dist2NextNode = dist2Id[curNodeID] + neighbor[<span class="number">1</span>];</span><br><span class="line">            只需要更新比已知路径大的目标</span><br><span class="line">            <span class="keyword">if</span>(dist2Id[nextNodeId] &gt; dist2NextNode)&#123;</span><br><span class="line">                dist2Id[nextNodeId] = dist2NextNode;</span><br><span class="line">                pq.offer(<span class="keyword">new</span> State(nextNodeId, dist2NextNode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist2Id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="743-网络延迟时间"><a href="#743-网络延迟时间" class="headerlink" title="743. 网络延迟时间"></a><a href="https://leetcode-cn.com/problems/network-delay-time/" target="_blank" rel="noopener">743. 网络延迟时间</a></h4><blockquote><p>有 n 个网络节点，标记为 1 到 n。</p><p>给你一个列表 times，表示信号经过 有向 边的传递时间。 times[i] = (ui, vi, wi)，其中 ui 是源节点，vi 是目标节点， wi 是一个信号从源节点传递到目标节点的时间。</p><p>现在，从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1 。</p></blockquote><p><strong>需要注意特别注意是从1～k，涉及数组索引问题，特别重视。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt; graph(n+1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;child : times)&#123;</span><br><span class="line">            <span class="keyword">int</span> from = child[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> to = child[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> weight = child[<span class="number">2</span>];</span><br><span class="line">            graph[from].push_back(&#123;to, weight&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; distTO = dijkstra(k, graph);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; distTO.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(distTO[i] == INT_MAX)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, distTO[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> &amp;start, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; &amp;graph)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">distTO</span> <span class="params">(graph.<span class="built_in">size</span>(), INT_MAX)</span></span>;</span><br><span class="line">        distTO[start] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](State <span class="keyword">const</span> &amp;a, State <span class="keyword">const</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.distFromStart &gt; b.distFromStart;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;State, vector&lt;State&gt;, decltype(cmp)&gt; pq(cmp);</span><br><span class="line">        pq.push(State(start, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            State cur = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">if</span>(cur.distFromStart &gt; distTO[cur.id])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> neighbors : graph[cur.id])&#123;</span><br><span class="line">                <span class="keyword">int</span> nextID = neighbors.first;</span><br><span class="line">                <span class="keyword">int</span> nextIDFromDist = neighbors.second + cur.distFromStart;</span><br><span class="line">                <span class="keyword">if</span>(distTO[nextID] &gt; nextIDFromDist)&#123;</span><br><span class="line">                    distTO[nextID] = nextIDFromDist;</span><br><span class="line">                    pq.push(State(nextID, nextIDFromDist));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> distTO;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">State</span>&#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">int</span> distFromStart;</span><br><span class="line">            State(<span class="keyword">int</span> id, <span class="keyword">int</span> distFromStart)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">                <span class="keyword">this</span>-&gt;distFromStart = distFromStart;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt;[] graph = <span class="keyword">new</span> LinkedList[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        graph[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : times )&#123;</span><br><span class="line">        <span class="keyword">int</span> from = edge[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> weight = edge[<span class="number">2</span>];</span><br><span class="line">        graph[from].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;to, weight&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] dist2Id = dijkstra(k, graph);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dist2Id.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dist2Id[i] == Integer.MAX_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, dist2Id[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1631-最小体力消耗路径"><a href="#1631-最小体力消耗路径" class="headerlink" title="1631. 最小体力消耗路径"></a><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/" target="_blank" rel="noopener">1631. 最小体力消耗路径</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = heights.<span class="built_in">size</span>(), n = heights[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">effortTo</span> <span class="params">( m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, INT_MAX) )</span></span>;</span><br><span class="line">        effortTo[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](State <span class="keyword">const</span> &amp;a, State <span class="keyword">const</span> &amp;b)&#123;</span><br><span class="line">            <span class="comment">//此处与java的比较相区别，pop返回的是尾，poll返回的是头。堆每次都是从队尾弹出元素。</span></span><br><span class="line">            <span class="keyword">return</span> a.effortFromStart &gt; b.effortFromStart;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;State, deque&lt;State&gt;, decltype(cmp) &gt; pq(cmp);</span><br><span class="line">        <span class="comment">//from (0,0) to (m-1, n-1)</span></span><br><span class="line">        pq.push(State(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            State cur = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="comment">//reach the end point(m-1, n-1)</span></span><br><span class="line">            <span class="keyword">if</span>(cur.x == m<span class="number">-1</span> &amp;&amp; cur.y == n<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> cur.effortFromStart;</span><br><span class="line">            <span class="keyword">if</span>(cur.effortFromStart &gt; effortTo[cur.x][cur.y])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; neighbor : adj(heights, cur.x, cur.y)) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextX = neighbor[<span class="number">0</span>], nextY = neighbor[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> effortToNext = <span class="built_in">max</span>(</span><br><span class="line">                    effortTo[cur.x][cur.y] , <span class="built_in">abs</span>(heights[nextX][nextY] - heights[cur.x][cur.y])</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">if</span>(effortTo[nextX][nextY] &gt; effortToNext)&#123;</span><br><span class="line">                    effortTo[nextX][nextY] = effortToNext;</span><br><span class="line">                    pq.push(State(nextX, nextY, effortToNext));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dirs = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">adj</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;matrix, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y )</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; neighbors;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> dir : dirs)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(nx &gt;= m || nx &lt; <span class="number">0</span> || ny &gt;= n || ny &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            neighbors.push_back( &#123;nx, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighbors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">State</span>&#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">int</span> effortFromStart;</span><br><span class="line">        State(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> effortFromStart)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">            <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">            <span class="keyword">this</span>-&gt;effortFromStart = effortFromStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/path-with-maximum-probability/" target="_blank" rel="noopener">1514. 概率最大的路径</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">maxProbability</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp; succProb, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;int, double&gt;&gt;&gt; graph(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            graph[edges[i][<span class="number">0</span>]].push_back(&#123;edges[i][<span class="number">1</span>], (<span class="keyword">double</span>)succProb[i]&#125;);</span><br><span class="line">            graph[edges[i][<span class="number">1</span>]].push_back(&#123;edges[i][<span class="number">0</span>], (<span class="keyword">double</span>)succProb[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dijkstra(start,<span class="built_in">end</span>, graph);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">State</span>&#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">double</span> distFromStart;</span><br><span class="line">            State(<span class="keyword">int</span> id, <span class="keyword">double</span> distFromStart)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">                <span class="keyword">this</span>-&gt;distFromStart = distFromStart;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> &amp;start, <span class="keyword">int</span> &amp;<span class="built_in">end</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt;&gt;&gt; &amp;graph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> V = graph.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">distTO</span><span class="params">(V, INT_MIN)</span></span>;</span><br><span class="line">        distTO[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](State <span class="keyword">const</span> &amp;a, State <span class="keyword">const</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.distFromStart &lt; b.distFromStart;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;State, vector&lt;State&gt;, decltype(cmp) &gt; pq(cmp);</span><br><span class="line">        pq.push(State(start, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            State curState = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="comment">//if reach the end</span></span><br><span class="line">            <span class="keyword">if</span>(curState.id == <span class="built_in">end</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> curState.distFromStart;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curState.distFromStart &lt; distTO[curState.id])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;neighbor : graph[curState.id])&#123;</span><br><span class="line">                <span class="keyword">int</span> nextId = neighbor.first;</span><br><span class="line">                <span class="keyword">double</span> nextWeight = neighbor.second;</span><br><span class="line">                <span class="keyword">double</span> nextDist = curState.distFromStart * nextWeight;</span><br><span class="line">                <span class="keyword">if</span>(distTO[nextId] &lt; nextDist)&#123;</span><br><span class="line">                    distTO[nextId] = nextDist;</span><br><span class="line">                    pq.push(State(nextId, nextDist));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意使用 pair<int, double> </p><p>注意使用自定义的compare：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp = [](State <span class="keyword">const</span> &amp;a, State <span class="keyword">const</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.distFromStart &lt; b.distFromStart;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h2 id="设计数据结构系列"><a href="#设计数据结构系列" class="headerlink" title="设计数据结构系列"></a>设计数据结构系列</h2><h3 id="LRU-算法"><a href="#LRU-算法" class="headerlink" title="LRU 算法"></a>LRU 算法</h3><p><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU 缓存</a></p><ul><li>首先实现 DoubleList 双链表存储 Node (包含 key 和 value )</li><li>通过使用 HashMap 建立 key 与 Node 之间的关联。</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220403202829151.png" alt="image-20220403202829151" style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 实现，另 Java 还可以通过使用 LinkedHashMap 进行实现。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> DoubleList cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cap = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> DoubleList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        makeRecent(key);</span><br><span class="line">        <span class="keyword">return</span> map.get(key).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">            deleteKey(key);</span><br><span class="line">            addRecent(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cap == cache.size())&#123;</span><br><span class="line">            deleteLeastRecent();</span><br><span class="line">        &#125;</span><br><span class="line">        addRecent(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRecent</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        Node x = map.get(key);</span><br><span class="line">        cache.remove(x);</span><br><span class="line">        cache.addLast(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRecent</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        Node x = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        cache.addLast(x);</span><br><span class="line">        map.put(key, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteKey</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        Node x = map.get(key);</span><br><span class="line">        cache.remove(x);</span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLeastRecent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node deletedNode = cache.removeFirst();</span><br><span class="line">        <span class="keyword">int</span> deletekey = deletedNode.key;</span><br><span class="line">        map.remove(deletekey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key, value;</span><br><span class="line">        Node prev, next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = k;</span><br><span class="line">            <span class="keyword">this</span>.value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node head, tail;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cap;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleList</span><span class="params">( )</span></span>&#123;</span><br><span class="line">            head = <span class="keyword">new</span> Node(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            head.next = tail;</span><br><span class="line">            tail.prev = head;</span><br><span class="line">            <span class="keyword">this</span>.cap = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">            x.prev = tail.prev;</span><br><span class="line">            x.next = tail;</span><br><span class="line">            tail.prev.next = x;</span><br><span class="line">            tail.prev = x;</span><br><span class="line">            <span class="keyword">this</span>.cap++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">            x.prev.next = x.next;</span><br><span class="line">            x.next.prev = x.prev;</span><br><span class="line">            <span class="keyword">this</span>.cap--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.next == tail)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node first = head.next;</span><br><span class="line">            remove(first);</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.cap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>C++ 版本</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity):cap(capacity) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有这个值</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">find</span>(key) == <span class="built_in">map</span>.<span class="built_in">end</span>())&#123; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line">        <span class="comment">//有这个值</span></span><br><span class="line">        <span class="keyword">auto</span> key_value = *<span class="built_in">map</span>[key];</span><br><span class="line">        cache.erase(<span class="built_in">map</span>[key]);</span><br><span class="line">        cache.push_front(key_value);</span><br><span class="line">        <span class="built_in">map</span>[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">return</span> key_value.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">find</span>(key) == <span class="built_in">map</span>.<span class="built_in">end</span>() )&#123;</span><br><span class="line">            <span class="comment">//如果满</span></span><br><span class="line">            <span class="keyword">if</span>(cache.<span class="built_in">size</span>() == cap)&#123;</span><br><span class="line">                <span class="built_in">map</span>.erase(cache.back().first);</span><br><span class="line">                cache.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cache.erase(<span class="built_in">map</span>[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.push_front(&#123;key, value&#125;);</span><br><span class="line">        <span class="built_in">map</span>[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; cache;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; <span class="built_in">map</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="LFU-算法"><a href="#LFU-算法" class="headerlink" title="LFU 算法"></a>LFU 算法</h3><p>LFU 算法的淘汰策略是每次淘汰使用频次最少的数据，如果频次相同则淘汰最早插入的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span></span>&#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; key2Val;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; key2Freq;</span><br><span class="line">    HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freq2Key;</span><br><span class="line">    <span class="comment">//需要时间复杂度为O(1)，不能使用遍历查找最小 freq，所以使用 minFreq 记录最小 Freq</span></span><br><span class="line">    <span class="keyword">int</span> minFreq;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        key2Val = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        key2Freq = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        freq2Key = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.minFreq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!key2Val.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存在 key</span></span><br><span class="line">        increaseFreq(key);</span><br><span class="line">        <span class="keyword">return</span> key2Val.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.cap &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//key exists</span></span><br><span class="line">        <span class="keyword">if</span>(key2Val.containsKey(key))&#123;</span><br><span class="line">            key2Val.put(key, val);</span><br><span class="line">            increaseFreq(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key not exist</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.cap &lt;= key2Val.size())&#123;</span><br><span class="line">            removeMinFreq();</span><br><span class="line">        &#125;</span><br><span class="line">        key2Val.put(key, val);</span><br><span class="line">        key2Freq.put(key, <span class="number">1</span>);    <span class="comment">//increaseFreq(key);</span></span><br><span class="line">        freq2Key.putIfAbsent(<span class="number">1</span>, <span class="keyword">new</span> LinkedHashSet&lt;&gt;());</span><br><span class="line">        freq2Key.get(<span class="number">1</span>).add(key);</span><br><span class="line">        <span class="keyword">this</span>.minFreq = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeMinFreq</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedHashSet&lt;Integer&gt; kList = freq2Key.get(<span class="keyword">this</span>.minFreq);</span><br><span class="line">        <span class="keyword">int</span> deleteKey = kList.iterator().next();</span><br><span class="line">        kList.remove(deleteKey);</span><br><span class="line">        <span class="keyword">if</span>(kList.isEmpty())&#123;</span><br><span class="line">            freq2Key.remove(<span class="keyword">this</span>.minFreq);</span><br><span class="line">        &#125;</span><br><span class="line">        key2Val.remove(deleteKey);</span><br><span class="line">        key2Freq.remove(deleteKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加key的freq</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increaseFreq</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> freq = key2Freq.get(key);</span><br><span class="line">        <span class="comment">//更新 key2Freq</span></span><br><span class="line">        key2Freq.put(key,freq+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//更新 freq2Key</span></span><br><span class="line">        <span class="comment">//删除原有freq中的 key</span></span><br><span class="line">        freq2Key.get(freq).remove(key);</span><br><span class="line">        <span class="comment">//将key添加到freq+1中</span></span><br><span class="line">        freq2Key.putIfAbsent(freq+<span class="number">1</span>, <span class="keyword">new</span> LinkedHashSet&lt;&gt;());</span><br><span class="line">        freq2Key.get(freq+<span class="number">1</span>).add(key);</span><br><span class="line">        <span class="comment">//如果删除导致原有 freq2Key 中的 freq 对应列表为空，则删除此freq</span></span><br><span class="line">        <span class="keyword">if</span>(freq2Key.get(freq).isEmpty())&#123;</span><br><span class="line">            freq2Key.remove(freq);</span><br><span class="line">            <span class="keyword">if</span>(freq == <span class="keyword">this</span>.minFreq)&#123;</span><br><span class="line">                <span class="keyword">this</span>.minFreq++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="前缀树算法"><a href="#前缀树算法" class="headerlink" title="前缀树算法"></a>前缀树算法</h2><blockquote><p>常见的 <code>Map</code> 和 <code>Set</code> 的底层实现原理有哈希表和二叉搜索树两种，比如 Java 的 HashMap/HashSet 和 C++ 的 unorderd_map/unordered_set 底层就是用哈希表实现，而 Java 的 TreeMap/TreeSet 和 C++ 的 map/set 底层使用红黑树这种自平衡 BST 实现的。</p></blockquote><p>Trie 树本质为一棵二叉树衍生出来的多叉树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left, right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多叉树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode [] child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Trie 树用「树枝」存储字符串「键」，用「节点」存储字符串（键）对应的数据。</p><h4 id="实现前缀树"><a href="#实现前缀树" class="headerlink" title="实现前缀树"></a><strong>实现前缀树</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">    <span class="comment">//多种定义子成员的方法 vector, [], unordered_map</span></span><br><span class="line">    <span class="comment">// Trie* next[26];</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Trie*&gt; next;</span><br><span class="line">    <span class="comment">// unordered_map&lt;char, Trie*&gt; next;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Trie():isEnd(<span class="literal">false</span>), next(<span class="number">26</span>)&#123;</span><br><span class="line">        <span class="comment">// isEnd = false;</span></span><br><span class="line">        <span class="comment">// memset(next, 0, sizeof(next));    []需要初始化    //C++里NULL的定义就是0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="comment">//对于不同的定义子成员的方式</span></span><br><span class="line">            <span class="comment">//只需要改变判断方式：</span></span><br><span class="line">            <span class="comment">//[]: if(node-&gt;next[c-'a'] == NULL)</span></span><br><span class="line">            <span class="comment">//vector: if(node-next[c-'a']==nullptr)</span></span><br><span class="line">            <span class="comment">//unordered_map: if(!node-&gt;next.count(c-'a'))</span></span><br><span class="line">            <span class="keyword">if</span>(node-&gt;next[c-<span class="string">'a'</span>]==<span class="literal">nullptr</span>)&#123;        </span><br><span class="line">                node-&gt;next[c-<span class="string">'a'</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;next[c-<span class="string">'a'</span>]==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">startsWith</span><span class="params">(<span class="built_in">string</span> prefix)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : prefix)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;next[c-<span class="string">'a'</span>]==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie* obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>需要特别注意：NULL与nullptr的区别，以及0与NULL的关系。</p><h4 id="实现前缀树II"><a href="#实现前缀树II" class="headerlink" title="实现前缀树II"></a><strong>实现前缀树II</strong></h4><p>定义Trie类时，设置 count_prefix 和 count_word 属性，分别记录当前词作为前缀和作为独立词的数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count_prefix;</span><br><span class="line">    <span class="keyword">int</span> count_word;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Trie*&gt; child;</span><br><span class="line">    Trie():count_prefix(<span class="number">0</span>), count_word(<span class="number">0</span>), child(<span class="number">26</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;child[c-<span class="string">'a'</span>]==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                node-&gt;child[c-<span class="string">'a'</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;child[c-<span class="string">'a'</span>];</span><br><span class="line">            node-&gt;count_prefix += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;count_word += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countWordsEqualTo</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;child[c-<span class="string">'a'</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;child[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;count_word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countWordsStartingWith</span><span class="params">(<span class="built_in">string</span> prefix)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;child[c-<span class="string">'a'</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;child[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;count_prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;child[c-<span class="string">'a'</span>]==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;child[c-<span class="string">'a'</span>];</span><br><span class="line">            node-&gt;count_prefix -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;count_word -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++使用 stringstream 分割字符</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    <span class="built_in">string</span> data = <span class="string">"ni_hao_yi_ding"</span>;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span> <span class="params">(data)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">word</span>;</span><br><span class="line">    <span class="keyword">while</span>(getline(ss, <span class="keyword">word</span>, <span class="string">'_'</span>))&#123;</span><br><span class="line">        ans.emplace_back(<span class="keyword">word</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> val : ans)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a><strong>单词替换</strong></h4><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-07%20at%2021.30.40.png" alt="Screen Shot 2022-04-07 at 21.30.40" style="zoom:80%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++ Smart point version</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">bool</span> is_end;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">unique_ptr</span>&lt;Trie&gt;&gt; arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Trie():is_end(<span class="literal">false</span>), arr(<span class="number">26</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;arr[c-<span class="string">'a'</span>])&#123;</span><br><span class="line">                node-&gt;arr[c-<span class="string">'a'</span>] =  make_unique&lt;Trie&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;arr[c-<span class="string">'a'</span>].<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;is_end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">find_prefix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="keyword">word</span>)</span></span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : <span class="keyword">word</span>)&#123;</span><br><span class="line">            res+=c;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;arr[c-<span class="string">'a'</span>]) &#123;<span class="keyword">return</span> <span class="keyword">word</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;arr[c-<span class="string">'a'</span>]-&gt;is_end) &#123;<span class="keyword">return</span> res;&#125;</span><br><span class="line">            node = node-&gt;arr[c-<span class="string">'a'</span>].<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">replaceWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; dictionary, <span class="built_in">string</span> sentence)</span> </span>&#123;</span><br><span class="line">        Trie* root = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; d : dictionary)&#123;</span><br><span class="line">            root-&gt;insert(d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words = split(sentence, <span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keyword">word</span> : words)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp = root-&gt;find_prefix(<span class="keyword">word</span>);</span><br><span class="line">            ans.append(tmp);</span><br><span class="line">            <span class="comment">// ans.append(" ");</span></span><br><span class="line">            ans+=<span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.erase(ans.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; str.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; str.<span class="built_in">size</span>() &amp;&amp; str[r] == ch)&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            l = r;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; str.<span class="built_in">size</span>() &amp;&amp; str[r] != ch)&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &lt; str.<span class="built_in">size</span>())&#123;</span><br><span class="line">                res.emplace_back(str.substr( l, r - l ) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceWords</span><span class="params">(List&lt;String&gt; roots, String sentence)</span></span>&#123;</span><br><span class="line">        TrieNode trie = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span>(String root : roots)&#123;</span><br><span class="line">            TrieNode cur = trie;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c : root.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.children[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[c-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.word = root;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//C++ 方式分割字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//while(ss&gt;&gt;word)        //stringstream ss; string word</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//while(getline(ss, word, ' '))</span></span><br><span class="line">        <span class="keyword">for</span>(String word : sentence.split(<span class="string">"\\s+"</span>))&#123;</span><br><span class="line">            TrieNode cur = trie;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c : word.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.children[c-<span class="string">'a'</span>] == <span class="keyword">null</span>||cur.word != <span class="keyword">null</span>) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">                cur = cur.children[c-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.append( cur.word != <span class="keyword">null</span> ? cur.word : word );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">    String word;</span><br><span class="line">    TrieNode[] children;</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希集合方法"><a href="#哈希集合方法" class="headerlink" title="哈希集合方法"></a>哈希集合方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">replaceWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; dictionary, <span class="built_in">string</span> sentence)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;string_view&gt; words = splitString(sentence, <span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;string_view&gt; dictSet;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; root : dictionary)&#123;</span><br><span class="line">            dictSet.emplace(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span>&amp; <span class="keyword">word</span> : words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">word</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dictSet.count(<span class="keyword">word</span>.substr(<span class="number">0</span>, <span class="number">1</span>+i)))&#123;</span><br><span class="line">                    <span class="keyword">word</span> = <span class="keyword">word</span>.substr(<span class="number">0</span>, <span class="number">1</span>+i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keyword">word</span> : words)&#123;</span><br><span class="line">            ans.append(<span class="keyword">word</span>);</span><br><span class="line">            ans.append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.erase(ans.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;string_view&gt; <span class="title">splitString</span><span class="params">(<span class="built_in">string</span>&amp; sentence, <span class="keyword">char</span> blank)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;string_view&gt; res;</span><br><span class="line">        <span class="function">string_view <span class="title">s</span><span class="params">(sentence)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(r &lt; n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; n &amp;&amp; s[r] == blank )&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            l = r;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; n &amp;&amp; s[r] != blank)&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &lt; n)&#123;</span><br><span class="line">                res.emplace_back(s.substr(l, r-l));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="大小堆求中位数"><a href="#大小堆求中位数" class="headerlink" title="大小堆求中位数"></a>大小堆求中位数</h2><p><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/" target="_blank" rel="noopener">295. 数据流的中位数</a></p><p>图形学Games101 有关光线追踪之前的判断光线是否与物体相交之前的预处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MedianFinder() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重点在于添加数据的时候保证，下三角▼，和梯形 的接口处数据大小为：下三角面 &lt;= 梯形上面</span></span><br><span class="line">    <span class="comment">//所以无论如何，在插入哪方时，都先提前插入另一方，让其排序后，插入，再删除。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(large.<span class="built_in">size</span>() &lt;= small.<span class="built_in">size</span>())&#123;</span><br><span class="line">            small.push(num);</span><br><span class="line">            large.push(small.top());</span><br><span class="line">            small.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            large.push(num);</span><br><span class="line">            small.push(large.top());</span><br><span class="line">            large.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(small.<span class="built_in">size</span>() &gt; large.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> small.top();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(small.<span class="built_in">size</span>() &lt; large.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> large.top();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(small.top() + large.top())/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a &gt; b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; small;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; large;</span><br><span class="line">    <span class="comment">//priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; small;</span></span><br><span class="line">    <span class="comment">//priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; large;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder* obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj-&gt;findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="单调栈结构"><a href="#单调栈结构" class="headerlink" title="单调栈结构"></a>单调栈结构</h2><h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">739. 每日温度</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(temperatures.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="comment">//从后往前，依次判断的是每日的温度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = temperatures.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">//while循环判断个子矮的出栈</span></span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; temperatures[s.top()] &lt;= temperatures[i])&#123;</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = s.empty() ? <span class="number">0</span> : (s.top() - i);</span><br><span class="line">            <span class="comment">//特别注意，此处进栈的是索引值</span></span><br><span class="line">            s.push(i); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">496. 下一个更大元素 I</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums2.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; nums2[i] &gt;= s.top())&#123;</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">map</span>[nums2[i]] = s.empty() ? <span class="number">-1</span> : s.top();</span><br><span class="line">            s.push(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(nums1.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            res[i] = <span class="built_in">map</span>[nums1[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>通过单调栈来进行计算</li><li>通过 map 来进行 num1[i] 与 num2[i] 的数值对应。</li></ul><h3 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">503. 下一个更大元素 II</a></h3><p>首先接受循环数组的概念：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">n = arr.lenght</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(arr[n % index]</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>*n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; s.top() &lt;= nums[i % n] )&#123;</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i % n] = s.empty() ? <span class="number">-1</span> : s.top();</span><br><span class="line">            s.push(nums[i % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉堆实现优先级队列"><a href="#二叉堆实现优先级队列" class="headerlink" title="二叉堆实现优先级队列"></a>二叉堆实现优先级队列</h2><p>二叉堆，即逻辑上是一种特殊的二叉树（完全二叉树），二叉堆存储在数组里。一般的二叉树为链表的形式，操作的节点为指针，而在数组中，数组的索引作为指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉堆分为最大堆和最小堆。分别的性质为其每个节点都大于等于/小于等于它的两个子节点。</p><h4 id="交换数组两个元素"><a href="#交换数组两个元素" class="headerlink" title="交换数组两个元素"></a>交换数组两个元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = i;</span><br><span class="line">    pq[i] = j;</span><br><span class="line">    pq[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上浮第K个元素"><a href="#上浮第K个元素" class="headerlink" title="上浮第K个元素"></a>上浮第K个元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; less(parent(k) &lt; k))&#123;</span><br><span class="line">        exch(parent(k), k);</span><br><span class="line">        k = parent(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下沉第k个元素"><a href="#下沉第k个元素" class="headerlink" title="下沉第k个元素"></a>下沉第k个元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k )</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left(k) &lt;= N)&#123;</span><br><span class="line">        <span class="keyword">int</span> older = left(k);</span><br><span class="line">        <span class="keyword">if</span>(right(k) &lt;= N &amp;&amp; right(k) &gt; older)&#123;</span><br><span class="line">            older = right(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(older &gt;= k)&#123;</span><br><span class="line">            exch(oler, k);</span><br><span class="line">            k = older;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(older &lt; k)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入insert"><a href="#插入insert" class="headerlink" title="插入insert"></a>插入insert</h4><p>先插入到最后，然后让其上浮</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    N++;</span><br><span class="line">    pq[N] = k;</span><br><span class="line">    swin(N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delMax-删除最大节点"><a href="#delMax-删除最大节点" class="headerlink" title="delMax 删除最大节点"></a>delMax 删除最大节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Key <span class="title">delMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Key <span class="built_in">max</span> = pq[<span class="number">1</span>];</span><br><span class="line">    exch(<span class="number">1</span>, N);</span><br><span class="line">    pq[N] = <span class="literal">nullptr</span>;</span><br><span class="line">    N--;</span><br><span class="line">    swin(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：插入和删除 O(log(N))  </p><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>思想：两个栈来回调用。</p><p>时间复杂度：主要操作为 peek 操作，调用时触发 while 循环时间复杂度为 O(N)，但不会每次都触发，所以时间复杂度为 O(1)。 其余操作间接使用 peek 所以最终时间复杂度O(1)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1, s2;</span><br><span class="line">    MyQueue() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.emplace(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">peek</span>();</span><br><span class="line">        <span class="keyword">int</span> res = s2.top();</span><br><span class="line">        s2.pop();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.empty())&#123;</span><br><span class="line">                s2.emplace(s1.top());</span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2.top();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.empty() &amp;&amp; s2.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><p>队列实现栈的想法，使用一个队列的核心思想为，在删除的时候使用循环的思想。</p><p>时间复杂度主要在于 pop 时为 O(n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line">    <span class="keyword">int</span> topItem;</span><br><span class="line">    MyStack() &#123;</span><br><span class="line">        topItem = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q1.emplace(x);</span><br><span class="line">        topItem = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = q1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">size</span> &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            q1.emplace(q1.front());</span><br><span class="line">            q1.pop();</span><br><span class="line">            <span class="built_in">size</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        topItem = q1.front();</span><br><span class="line">        q1.emplace(q1.front());</span><br><span class="line">        q1.pop();</span><br><span class="line">        <span class="keyword">int</span> res = q1.front();</span><br><span class="line">        q1.pop();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> topItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="设计推特"><a href="#设计推特" class="headerlink" title="设计推特"></a>设计推特</h2><p><a href="https://leetcode-cn.com/problems/design-twitter/" target="_blank" rel="noopener">355. 设计推特</a></p><p><img src="https://winpic-1253102271.cos.ap-beijing.myqcloud.com/image-20220418172811432.png" alt="image-20220418172811432"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Twitter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">int</span> timeStamp = <span class="number">0</span>;</span><br><span class="line">    Twitter() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Tweet</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">int</span> time;</span><br><span class="line">        Tweet *next;</span><br><span class="line">        Tweet(<span class="keyword">int</span> _id, <span class="keyword">int</span> _time):id(_id), time(_time), next(<span class="literal">nullptr</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; followed;</span><br><span class="line">        Tweet *head;</span><br><span class="line">        User(<span class="keyword">int</span> userId): id(userId), head(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            follow(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">            followed.emplace(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">unfollow</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(userId != <span class="keyword">this</span>-&gt;id)&#123;</span><br><span class="line">                followed.erase(userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(<span class="keyword">int</span> tweetId)</span></span>&#123;</span><br><span class="line">            Tweet *twt = <span class="keyword">new</span> Tweet(tweetId, timeStamp);</span><br><span class="line">            timeStamp++;</span><br><span class="line">            <span class="comment">//将新建的推文插入到链表头</span></span><br><span class="line">            twt-&gt;next = head;</span><br><span class="line">            head = twt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, User*&gt; userMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postTweet</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> tweetId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userMap.count(userId) == <span class="number">0</span>)&#123;</span><br><span class="line">            User *u = <span class="keyword">new</span> User(userId);</span><br><span class="line">            userMap.emplace( userId, u );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// auto u = userMap.find(userId);</span></span><br><span class="line">        <span class="comment">// u-&gt;second-&gt;post(tweetId);</span></span><br><span class="line">        User *u = userMap.at(userId);</span><br><span class="line">        u-&gt;post(tweetId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getNewsFeed</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(userMap.<span class="built_in">find</span>(userId) == userMap.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; followUsers = userMap.<span class="built_in">find</span>(userId)-&gt;second-&gt;followed;</span><br><span class="line">        <span class="comment">//通过lambda表达式进行自定义比较大小的方式</span></span><br><span class="line">        <span class="keyword">auto</span> cmp=[](<span class="keyword">const</span> <span class="keyword">auto</span>&amp;a,<span class="keyword">const</span> <span class="keyword">auto</span>&amp;b)-&gt;<span class="keyword">bool</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;time &lt; b-&gt;time;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt; Tweet*, vector&lt;Tweet*&gt;, decltype(cmp)&gt; pq(cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; id : followUsers)&#123;</span><br><span class="line">            <span class="comment">//auto twt = userMap.find(id)-&gt;second-&gt;head;</span></span><br><span class="line">            Tweet *twt = userMap.at(id)-&gt;head;</span><br><span class="line">            <span class="keyword">if</span>(twt == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">            pq.emplace(twt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>() == <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">            Tweet *twt = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            res.emplace_back(twt-&gt;id);</span><br><span class="line">            <span class="keyword">if</span>(twt-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                pq.emplace(twt-&gt;next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userMap.count(followerId) == <span class="number">0</span>)&#123;</span><br><span class="line">            User *u = <span class="keyword">new</span> User(followerId);</span><br><span class="line">            userMap.emplace(followerId, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userMap.count(followeeId) == <span class="number">0</span>)&#123;</span><br><span class="line">            User *u = <span class="keyword">new</span> User(followeeId);</span><br><span class="line">            userMap.emplace(followeeId, u);</span><br><span class="line">        &#125;</span><br><span class="line">        userMap.at(followerId)-&gt;follow(followeeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unfollow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userMap.count(followerId) != <span class="number">0</span>)&#123;</span><br><span class="line">            userMap.at(followerId)-&gt;unfollow(followeeId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//重载类型的&lt;运算符</span></span><br><span class="line"><span class="comment">// bool operator&lt; (Twitter::Tweet &amp;a, Twitter::Tweet &amp;b)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return a.time &lt; b.time;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/*或者使用结构体类型</span></span><br><span class="line"><span class="comment">struct cmp&#123;</span></span><br><span class="line"><span class="comment">        bool operator()(Twitter::Tweet *a, Twitter::Tweet *b)&#123;</span></span><br><span class="line"><span class="comment">            return a-&gt;time &lt; b-&gt;time;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Twitter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Twitter* obj = new Twitter();</span></span><br><span class="line"><span class="comment"> * obj-&gt;postTweet(userId,tweetId);</span></span><br><span class="line"><span class="comment"> * vector&lt;int&gt; param_2 = obj-&gt;getNewsFeed(userId);</span></span><br><span class="line"><span class="comment"> * obj-&gt;follow(followerId,followeeId);</span></span><br><span class="line"><span class="comment"> * obj-&gt;unfollow(followerId,followeeId);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="最大栈"><a href="#最大栈" class="headerlink" title="最大栈"></a>最大栈</h2><p><a href="https://leetcode-cn.com/problems/maximum-frequency-stack/" target="_blank" rel="noopener">895. 最大频率栈</a></p><ul><li>值对应频率 hashmap</li><li>频率对应值 hashmap </li><li>最大的频率，最大频率所对应的栈的顶端即对应最新插入的最大频率值</li><li>当最大频率所对应栈/组，为空，则证明最大频率值已无数值对应，最大频率应为下一个（maxFreq- -)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreqStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; val2freq = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;Integer, Stack&lt;Integer&gt;&gt; freq2vals = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FreqStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//val2freq ++</span></span><br><span class="line">        <span class="keyword">int</span> freq = val2freq.getOrDefault(val, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        val2freq.put(val, freq);</span><br><span class="line">        <span class="comment">//freq2vals push</span></span><br><span class="line">        freq2vals.putIfAbsent(freq, <span class="keyword">new</span> Stack&lt;&gt;());</span><br><span class="line">        freq2vals.get(freq).push(val);</span><br><span class="line">        <span class="comment">//tempStack = freq2vals.putIfAbsent(freq, new Stack&lt;&gt;());</span></span><br><span class="line">        <span class="comment">//tempStack.push(val);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//max maxFreq</span></span><br><span class="line">        maxFreq = Math.max(maxFreq, freq);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; vals = freq2vals.get(maxFreq);</span><br><span class="line">        <span class="keyword">int</span> res = vals.pop();</span><br><span class="line">        <span class="comment">// update val2freq</span></span><br><span class="line">        <span class="keyword">int</span> freq = val2freq.get(res) - <span class="number">1</span>;</span><br><span class="line">        val2freq.put(res, freq);</span><br><span class="line">        <span class="comment">// update maxFreq</span></span><br><span class="line">        <span class="keyword">if</span>(vals.isEmpty())&#123;</span><br><span class="line">            maxFreq--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FreqStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FreqStack obj = new FreqStack();</span></span><br><span class="line"><span class="comment"> * obj.push(val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreqStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FreqStack() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// add to val2freq</span></span><br><span class="line">        val2Freq[val]++;</span><br><span class="line">        <span class="comment">// add to freq2val</span></span><br><span class="line">        freq2Val[val2Freq[val]].emplace_back(val);</span><br><span class="line">        <span class="comment">// max maxFreq</span></span><br><span class="line">        maxFreq = <span class="built_in">max</span>( maxFreq, val2Freq[val] );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// del maxFreq val2ferq</span></span><br><span class="line">        <span class="keyword">int</span> resPop = freq2Val[maxFreq].back();</span><br><span class="line">        freq2Val[maxFreq].pop_back();</span><br><span class="line">        <span class="comment">// del val2Freq</span></span><br><span class="line">        val2Freq[resPop]--;</span><br><span class="line">        <span class="comment">// if maxFreq group is None.</span></span><br><span class="line">        <span class="keyword">if</span>( freq2Val[maxFreq].<span class="built_in">size</span>() == <span class="number">0</span> )&#123;</span><br><span class="line">            maxFreq--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resPop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//val to frequency</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; val2Freq;</span><br><span class="line">    <span class="comment">//freq to val: group</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; freq2Val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FreqStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FreqStack* obj = new FreqStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p><img src="https://winpic-1253102271.cos.ap-beijing.myqcloud.com/DP.png" alt="DP"></p><h3 id="俄罗斯套娃问题"><a href="#俄罗斯套娃问题" class="headerlink" title="俄罗斯套娃问题"></a>俄罗斯套娃问题</h3><p><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">354. 俄罗斯套娃信封问题</a></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-27%20at%2015.48.54.png" alt="Screen Shot 2022-04-27 at 15.48.54" style="zoom:67%;" /></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-27%20at%2015.48.14.png" alt="Screen Shot 2022-04-27 at 15.48.14" style="zoom:67%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (envelopes.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = envelopes.<span class="built_in">size</span>();</span><br><span class="line">        sort(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e1, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">return</span> e1[<span class="number">0</span>] &lt; e2[<span class="number">0</span>] || (e1[<span class="number">0</span>] == e2[<span class="number">0</span>] &amp;&amp; e1[<span class="number">1</span>] &gt; e2[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (envelopes[j][<span class="number">1</span>] &lt; envelopes[i][<span class="number">1</span>]) &#123;</span><br><span class="line">                    f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(f[i], ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法二：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-27%20at%2015.49.20.png" alt="Screen Shot 2022-04-27 at 15.49.20" style="zoom:80%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (envelopes.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = envelopes.<span class="built_in">size</span>();</span><br><span class="line">        sort(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e1, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">return</span> e1[<span class="number">0</span>] &lt; e2[<span class="number">0</span>] || (e1[<span class="number">0</span>] == e2[<span class="number">0</span>] &amp;&amp; e1[<span class="number">1</span>] &gt; e2[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dq</span><span class="params">(<span class="number">1</span>, envelopes[<span class="number">0</span>][<span class="number">1</span>])</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; envelopes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>, right = dq.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(dq[mid] &gt;= envelopes[i][<span class="number">1</span>])&#123;</span><br><span class="line">                    index = mid;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">-1</span>)&#123;</span><br><span class="line">                dq.emplace_back(envelopes[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dq[index] = envelopes[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dq.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最大回文子串"><a href="#最大回文子串" class="headerlink" title="最大回文子串"></a>最大回文子串</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220429151440951.png" alt="image-20220429151440951"></p><h3 id="目标和"><a href="#目标和" class="headerlink" title="目标和"></a>目标和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], target = <span class="number">3</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：一共有 <span class="number">5</span> 种方法让最终目标和为 <span class="number">3</span> 。</span><br><span class="line"><span class="number">-1</span> + <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span> - <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span> + <span class="number">1</span> - <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> - <span class="number">1</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> + <span class="number">1</span> - <span class="number">1</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-30%20at%2022.08.27.png" alt="Screen Shot 2022-04-30 at 22.08.27"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-04-30%20at%2022.08.40.png" alt="Screen Shot 2022-04-30 at 22.08.40"></p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220501212041777.png" alt="image-20220501212041777"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220627233456943.png" alt="image-20220627233456943"></p><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-05-02%20at%2023.57.09.png" alt="Screen Shot 2022-05-02 at 23.57.09" style="zoom:80%;" /></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220503233617821.png" alt="image-20220503233617821"></p><h3 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220504233051828.png" alt="image-20220504233051828"></p><h3 id="增减字符串匹配"><a href="#增减字符串匹配" class="headerlink" title="增减字符串匹配"></a>增减字符串匹配</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220509195453140.png" alt="image-20220509195453140"></p><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220510203209056.png" alt="image-20220510203209056"></p><h2 id="贪心类型问题"><a href="#贪心类型问题" class="headerlink" title="贪心类型问题"></a>贪心类型问题</h2><p>贪心算法的性质：每一步都选择局部最优，最终结果就是全局最优（只能满足部分类型）。</p><h3 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/" target="_blank" rel="noopener">435. 无重叠区间</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220705214824153.png" alt="image-20220705214824153"></p><h3 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. 用最少数量的箭引爆气球</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220705220534306.png" alt="image-20220705220534306"></p><h2 id="课程表I-区间冲突问题"><a href="#课程表I-区间冲突问题" class="headerlink" title="课程表I (区间冲突问题)"></a>课程表I (区间冲突问题)</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220706230950381.png" alt="image-20220706230950381"></p><h2 id="岛屿问题"><a href="#岛屿问题" class="headerlink" title="岛屿问题"></a>岛屿问题</h2><h3 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220513200751095.png" alt="image-20220513200751095"></p><h3 id="封闭岛屿数量"><a href="#封闭岛屿数量" class="headerlink" title="封闭岛屿数量"></a>封闭岛屿数量</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220514213823238.png" alt="image-20220514213823238"></p><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><h3 id="198-打家劫舍，不可循环"><a href="#198-打家劫舍，不可循环" class="headerlink" title="198 打家劫舍，不可循环"></a>198 打家劫舍，不可循环</h3><p>两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220517194648381.png" alt="image-20220517194648381"></p><h3 id="213-可循环打家劫舍"><a href="#213-可循环打家劫舍" class="headerlink" title="213 可循环打家劫舍"></a>213 可循环打家劫舍</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220519230737029.png" alt="image-20220519230737029"></p><h3 id="337-二叉树类型打家劫舍"><a href="#337-二叉树类型打家劫舍" class="headerlink" title="337 二叉树类型打家劫舍"></a>337 二叉树类型打家劫舍</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220525220406826.png" alt="image-20220525220406826"></p><h2 id="动态规划最小路径和"><a href="#动态规划最小路径和" class="headerlink" title="动态规划最小路径和"></a>动态规划最小路径和</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220622223538205.png" alt="image-20220622223538205"></p><h2 id="动态规划之地下城游戏（动态规划最小路径和逆向思想）"><a href="#动态规划之地下城游戏（动态规划最小路径和逆向思想）" class="headerlink" title="动态规划之地下城游戏（动态规划最小路径和逆向思想）"></a>动态规划之地下城游戏（动态规划最小路径和逆向思想）</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220623234526006.png" alt="image-20220623234526006"></p><h2 id="动态规划通向“自由之路”"><a href="#动态规划通向“自由之路”" class="headerlink" title="动态规划通向“自由之路”"></a>动态规划通向“自由之路”</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220624231516052.png" alt="image-20220624231516052"></p><h2 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/" target="_blank" rel="noopener">10. 正则表达式匹配</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        memo.resize(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(p.<span class="built_in">size</span>(), <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> dp(s, <span class="number">0</span>, p, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dp</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="keyword">int</span> i, <span class="built_in">string</span>&amp; p, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.<span class="built_in">size</span>(), n = p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> i == m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == m)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (n-j) &amp; <span class="number">1</span> != <span class="number">0</span>  )&#123;</span><br><span class="line">            <span class="comment">// if( (n-j) % 2 == 1  )&#123;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;j+<span class="number">1</span> &lt; n; j += <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p[j+<span class="number">1</span>] != <span class="string">'*'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s[i] == p[j] || p[j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; n<span class="number">-1</span> &amp;&amp; p[j+<span class="number">1</span>] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                res = dp(s, i, p, j+<span class="number">2</span>) || dp(s, i+<span class="number">1</span>, p, j);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res = dp(s, i + <span class="number">1</span>, p, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( j &lt; n<span class="number">-1</span> &amp;&amp; p[j+<span class="number">1</span>] == <span class="string">'*'</span> )&#123;</span><br><span class="line">                res = dp(s, i, p, j+<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; memo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="953-验证外星语词典"><a href="#953-验证外星语词典" class="headerlink" title="953. 验证外星语词典"></a><a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/" target="_blank" rel="noopener">953. 验证外星语词典</a></h2><p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p><p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words &#x3D; [&quot;hello&quot;,&quot;leetcode&quot;], order &#x3D; &quot;hlabcdefgijkmnopqrstuvwxyz&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：在该语言的字母表中，&#39;h&#39; 位于 &#39;l&#39; 之前，所以单词序列是按字典序排列的。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mapOrd;</span><br><span class="line">    <span class="comment">//front &gt; latter 1</span></span><br><span class="line">    <span class="comment">//front &lt; latter -1</span></span><br><span class="line">    <span class="comment">//front == latter 0</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s1.<span class="built_in">size</span>() &amp;&amp; j &lt; s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> c1 = s1[i] - <span class="string">'a'</span>, c2 = s2[j] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(c1 != c2)&#123;</span><br><span class="line">                <span class="keyword">return</span> mapOrd[c1] - mapOrd[c2];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; s1.<span class="built_in">size</span>()) &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; s2.<span class="built_in">size</span>()) &#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAlienSorted</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="built_in">string</span> order)</span> </span>&#123;</span><br><span class="line">        mapOrd.resize(<span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//map </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; order.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos = order[i] - <span class="string">'a'</span>;</span><br><span class="line">            mapOrd[pos] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//check neighboring word</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; words.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( check(words[i<span class="number">-1</span>], words[i] ) &gt; <span class="number">0</span> ) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1021-删除最外层的括号"><a href="#1021-删除最外层的括号" class="headerlink" title="1021 删除最外层的括号"></a>1021 删除最外层的括号</h2><p>有效括号字符串为空 “”、”(“ + A + “)” 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。</p><p>例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。<br>如果有效字符串 s 非空，且不存在将其拆分为 s = A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。</p><p>给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s = P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。</p><p>对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。</p><p>示例 1：</p><p>输入：s = “(()())(())”<br>输出：”()()()”<br>解释：<br>输入字符串为 “(()())(())”，原语化分解得到 “(()())” + “(())”，<br>删除每个部分中的最外层括号后得到 “()()” + “()” = “()()()”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeOuterParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="comment">//当栈为空的时候，说明已经形成了『原语』</span></span><br><span class="line">        <span class="comment">//当遇到 "("时，将其入栈；</span></span><br><span class="line">        <span class="comment">//当遇到 ")"时，说明匹配了前面最近一个 "("，因此将栈顶弹出；</span></span><br><span class="line">        <span class="comment">//当"("入栈前，栈是空，说明 "(" 是『原语』的开头，因此不放入 res中。</span></span><br><span class="line">        <span class="comment">//当遇到 ")" 弹出栈顶以后，栈是空，说明 ")" 是『原语』的结束，因此不放入 res中。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">')'</span>)&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                ans += c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span>)&#123;</span><br><span class="line">                st.emplace(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></h2><p><a href="https://labuladong.github.io/article/?qno=20" target="_blank" rel="noopener">labuladong 题解</a><a href="https://leetcode.cn/problems/valid-parentheses/#" target="_blank" rel="noopener">思路</a></p><p>难度简单</p><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span> || c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span>)&#123;   <span class="comment">// left bracket, then push it</span></span><br><span class="line">                st.emplace(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;                                  <span class="comment">// situation: !/st.empty(); right bracket; </span></span><br><span class="line">                <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp_c = st.top();</span><br><span class="line">                        st.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp_c != <span class="string">'('</span> )&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp_c = st.top();</span><br><span class="line">                        st.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp_c != <span class="string">'&#123;'</span> )&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">']'</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp_c = st.top();</span><br><span class="line">                        st.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp_c != <span class="string">'['</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;             <span class="comment">// st.empty()</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if ()(,  st is not empty, but false;</span></span><br><span class="line">        <span class="keyword">return</span> st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1022-从根到叶的二进制数之和"><a href="#1022-从根到叶的二进制数之和" class="headerlink" title="1022. 从根到叶的二进制数之和"></a><a href="https://leetcode.cn/problems/sum-of-root-to-leaf-binary-numbers/" target="_blank" rel="noopener">1022. 从根到叶的二进制数之和</a></h3><p>给出一棵二叉树，其上每个结点的值都是 <code>0</code> 或 <code>1</code> 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。</p><ul><li>例如，如果路径为 <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>，那么它表示二进制数 <code>01101</code>，也就是 <code>13</code> 。</li></ul><p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p><p>返回这些数字之和。题目数据保证答案是一个 <strong>32 位</strong> 整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [1,0,1,0,1,0,1]</span><br><span class="line">输出：22</span><br><span class="line">解释：(100) + (101) + (110) + (111) &#x3D; 4 + 5 + 6 + 7 &#x3D; 22</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRootToLeaf</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="comment">//printf root-&gt;val</span></span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> nodeCur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// nodeCur = (nodeCur&lt;&lt;1) + root-&gt;val ,效率低</span></span><br><span class="line">        nodeCur = (nodeCur &lt;&lt; <span class="number">1</span>) | root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">           ans += nodeCur; </span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root-&gt;left, nodeCur);</span><br><span class="line">        dfs(root-&gt;right, nodeCur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有关使用与符号进行判断奇偶性：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &amp; <span class="number">1</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分冶算法——241-为运算表达式设计优先级"><a href="#分冶算法——241-为运算表达式设计优先级" class="headerlink" title="分冶算法——241. 为运算表达式设计优先级"></a><a href="https://leetcode.cn/problems/different-ways-to-add-parentheses/" target="_blank" rel="noopener">分冶算法——241. 为运算表达式设计优先级</a></h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-07-01%20at%2022.25.38.png" alt="Screen Shot 2022-07-01 at 22.25.38"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">diffWaysToCompute</span><span class="params">(<span class="built_in">string</span> expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">find</span>(expression) != memo.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> memo[expression];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expression.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = expression.at(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'-'</span> || c == <span class="string">'+'</span> || c == <span class="string">'*'</span> ) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left_diff_way = diffWaysToCompute(expression.substr(<span class="number">0</span>,i));</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right_diff_way = diffWaysToCompute(expression.substr(i+<span class="number">1</span>, expression.<span class="built_in">size</span>()- i ));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a : left_diff_way)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; b : right_diff_way)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;</span><br><span class="line">                            res.emplace_back(a-b);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'+'</span>)&#123;</span><br><span class="line">                            res.emplace_back(a+b);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'*'</span>)&#123;</span><br><span class="line">                            res.emplace_back(a*b);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.empty())&#123;</span><br><span class="line">            res.emplace_back(<span class="built_in">std</span>::stoi(expression));</span><br><span class="line">        &#125;</span><br><span class="line">        memo.emplace(expression, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; memo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode.cn/problems/next-permutation/" target="_blank" rel="noopener">31. 下一个排列</a></h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-07-03%20at%2023.21.32.png" alt="Screen Shot 2022-07-03 at 23.21.32"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-07-03%20at%2023.39.25.png" alt="Screen Shot 2022-07-03 at 23.39.25"></p><h2 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 03. 数组中重复的数字</a></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220717223240874.png" alt="image-20220717223240874"></p><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener">剑指 Offer 04. 二维数组中的查找</a></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202022-07-18%20at%2021.37.57.png" alt="Screen Shot 2022-07-18 at 21.37.57"></p><p><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" target="_blank" rel="noopener">剑指 Offer 29. 顺时针打印矩阵</a></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220719222456995.png" alt="image-20220719222456995"></p><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="包含mini函数的栈"><a href="#包含mini函数的栈" class="headerlink" title="包含mini函数的栈"></a>包含mini函数的栈</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220724224015274.png" alt="image-20220724224015274"></p><h3 id="栈的压入和弹出"><a href="#栈的压入和弹出" class="headerlink" title="栈的压入和弹出"></a>栈的压入和弹出</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220724224444146.png" alt="image-20220724224444146"></p><h3 id="面试题40-最小的k个数"><a href="#面试题40-最小的k个数" class="headerlink" title="面试题40. 最小的k个数"></a><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">面试题40. 最小的k个数</a></h3><p>难度简单461收藏分享切换为英文接收动态反馈</p><p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr &#x3D; [3,2,1], k &#x3D; 2</span><br><span class="line">输出：[1,2] 或者 [2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr &#x3D; [0,1,2,1], k &#x3D; 1</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getLeastNumbers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() &lt; k || k &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// auto cmp = []()&#123;&#125;;</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; max_heap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; num : arr )&#123;</span><br><span class="line">            max_heap.emplace(num);</span><br><span class="line">            <span class="keyword">if</span>(max_heap.<span class="built_in">size</span>() &gt; k )&#123;</span><br><span class="line">                max_heap.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(!max_heap.empty())&#123;</span><br><span class="line">            ans.emplace_back(max_heap.top());</span><br><span class="line">            max_heap.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>设置大顶堆来维护最小堆</li><li>大顶堆大小如果大于k，则删除顶端元素</li></ul><h3 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220728231339998.png" alt="image-20220728231339998"></p><h3 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a><strong>滑动窗口的最大值</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; nums.<span class="built_in">size</span>() || nums.<span class="built_in">size</span>() == <span class="number">0</span> || k &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            pq.emplace(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.emplace_back(pq.top().first);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            pq.emplace(nums[i], i);</span><br><span class="line">            <span class="keyword">int</span> left = i - k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(pq.top().second &lt; left)&#123;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.emplace_back(pq.top().first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>关键点在于 priority_queue&lt; pair<int, int>&gt; 使用，因为 priority_queue 没有直接删除某个 value 的方法，所以使用 pair<int, int> 对应 value, index，利用 pair 的 second 来标记 index，当 pq.top().second &lt; left 时，进行删除移出窗口。</li></ul><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="和为s的两个数字-amp-amp-和为s的连续正数序列"><a href="#和为s的两个数字-amp-amp-和为s的连续正数序列" class="headerlink" title="和为s的两个数字 &amp;&amp; 和为s的连续正数序列"></a>和为s的两个数字 &amp;&amp; 和为s的连续正数序列</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220801220249301.png" alt="image-20220801220249301"></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 06. 从尾到头打印链表</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220802230701753.png" alt="image-20220802230701753"></p><h3 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220803233954275.png" alt="image-20220803233954275"></p><h3 id="链表的倒数第K个节点"><a href="#链表的倒数第K个节点" class="headerlink" title="链表的倒数第K个节点"></a>链表的倒数第K个节点</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220804210303381.png" alt="image-20220804210303381"></p><h3 id="链表中环的入口节点"><a href="#链表中环的入口节点" class="headerlink" title="链表中环的入口节点"></a><a href="https://leetcode.cn/problems/c32eOV/" target="_blank" rel="noopener">链表中环的入口节点</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220804214852798.png" alt="image-20220804214852798"></p><h3 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/" target="_blank" rel="noopener">合并两个排序的链表</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220805214436978.png" alt="image-20220805214436978"></p><h3 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/" target="_blank" rel="noopener">复杂链表的复制</a></h3><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><p>示例 1：</p><p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]<br>输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p><p>思路：原地克隆</p><ul><li>原地克隆上一节点 ： A-&gt;A’-&gt;B-&gt;B’-&gt;C-&gt;C’</li><li>重建 random 节点，注意 clone-&gt;random = cur-&gt;random-&gt;next，其中的-&gt;next 是保证为新客隆的节点。</li><li>然后分离节点。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) &#123;<span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line">        Node* cur = head;</span><br><span class="line">        <span class="comment">//insert clone node; </span></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            Node* clone = <span class="keyword">new</span> Node(cur-&gt;val);</span><br><span class="line">            clone-&gt;next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = clone;</span><br><span class="line">            cur = clone-&gt;next;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//restruct clone node;</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            Node* s_clone = cur-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;<span class="built_in">random</span>)&#123;</span><br><span class="line">                <span class="comment">//note the cur-&gt;random-&gt;next meas the new clone node.</span></span><br><span class="line">                s_clone-&gt;<span class="built_in">random</span> = cur-&gt;<span class="built_in">random</span>-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = s_clone-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        Node* ans_node = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next)&#123;</span><br><span class="line">            Node* t_clone = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = t_clone-&gt;next;</span><br><span class="line">            cur = t_clone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans_node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220807211256783.png" alt="image-20220807211256783"></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="通过前序遍历和中序遍历重构二叉树"><a href="#通过前序遍历和中序遍历重构二叉树" class="headerlink" title="通过前序遍历和中序遍历重构二叉树"></a>通过前序遍历和中序遍历重构二叉树</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220808215217691.png" alt="image-20220808215217691"></p><h3 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a><strong>二叉树的下一个结点</strong></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220808223154246.png" alt="image-20220808223154246"></p><h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">树的子结构</a></h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220809223437158.png" alt="image-20220809223437158"></p><h3 id="剑指-Offer-32-I-从上到下打印二叉树"><a href="#剑指-Offer-32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树"></a>剑指 Offer 32 - I. 从上到下打印二叉树</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220812202213757.png" alt="image-20220812202213757"></p><h3 id="打印二叉树分层打印"><a href="#打印二叉树分层打印" class="headerlink" title="打印二叉树分层打印"></a>打印二叉树分层打印</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220814213317305.png" alt="image-20220814213317305"></p><h3 id="打印二叉树之字打印"><a href="#打印二叉树之字打印" class="headerlink" title="打印二叉树之字打印"></a>打印二叉树之字打印</h3><p>只需在👆题中加入 flag 判断，然后reverse即可。</p><h3 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20220815214852290.png" alt="image-20220815214852290"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode-OWNTIPS&quot;&gt;&lt;a href=&quot;#LeetCode-OWNTIPS&quot; class=&quot;headerlink&quot; title=&quot;LeetCode OWNTIPS&quot;&gt;&lt;/a&gt;LeetCode OWNTIPS&lt;/h1&gt;&lt;div class=&quot;table
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>golang specific notes</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/08/18/golang-specific-notes/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/08/18/golang-specific-notes/</id>
    <published>2021-08-18T08:49:29.000Z</published>
    <updated>2021-10-10T15:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装基础及概念"><a href="#安装基础及概念" class="headerlink" title="安装基础及概念"></a>安装基础及概念</h2><p><strong>安装：</strong></p><p>GO 安装官网：<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p><p>GO 的三个环境变量重要概念：</p><ul><li>GOROOT：GO语言安装目录</li><li>GOPATH：若干自定义的工作空间，也就是传统的工作区 （Workspace）</li><li>GOBIN：GO 程序生成的可执行文件路径</li></ul><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><ul><li><p><code>go run helloworld.go</code> 命令</p></li><li><p>编译模式：</p><p>在源码目录下进行 <code>go install</code></p><p>会自动生成 <code>bin</code> 文件夹，里面会有编译的 hello 可执行程序</p><ul><li>go 编译程序时，会自动在 <code>GOROOT/src 文件夹下</code> 或者在 <code>GOPATH/src</code>文件夹下程序包里自动寻找 main 包的 main 函数入口函数进行编译。</li></ul></li></ul><p>环境变量的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#go</span></span><br><span class="line"><span class="comment">#install go via 'brew install go'</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">"/usr/local/Cellar/go/1.16.6/libexec"</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"/Users/xxx/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure><p>以上为 GOPATH 时代时的使用，但自从 go 1.11版本以后添加了 Modules 模块，Modules 为源代码交换和版本控制单元，go命令支持直接使用 modules，包括记录和解析对其他模块的依赖性。</p><p>go Modules 时代的设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOBIN=/Users/guoxinli/go/bin</span><br><span class="line">go env -w GO111MODULE=on//on, off, auto: 当项目在 GOPATH/src 目录之外，并且项目根目录有 go.mod 文件时，开启 go moudle 模式。</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct <span class="comment">#使用七牛云服务</span></span><br></pre></td></tr></table></figure><p>然后在任意目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> xxx</span><br><span class="line"><span class="variable">$go</span> mod init xxx</span><br><span class="line"><span class="variable">$vim</span> hello.go</span><br><span class="line"><span class="variable">$go</span> build</span><br><span class="line"><span class="variable">$go</span> install</span><br></pre></td></tr></table></figure><p><strong>go mod  命令作用：</strong></p><ul><li><code>go mod download</code> 下载依赖包到本地（默认为 GOPATH/pkg/mod ）</li><li><code>go mod edit</code> 编辑 <code>go.mod</code> 文件</li><li><code>go mod graph</code> 打印模块依赖图</li><li><code>go mod init</code> 初始化当前文件夹，创建 <code>go.mod</code> 文件</li><li><code>go mod tidy</code> 增加缺少的包，删除无用的包</li><li><code>go mod vendor</code> 将依赖复制到 vendor 目录下</li><li><code>go mod verify</code> 校验依赖</li><li><code>go mod why</code> 解释为什么需要依赖</li></ul><h3 id="Go-的执行原理"><a href="#Go-的执行原理" class="headerlink" title="Go 的执行原理"></a>Go 的执行原理</h3><h4 id="go-run-执行过程"><a href="#go-run-执行过程" class="headerlink" title="go run 执行过程"></a>go run 执行过程</h4><p>go run 主要用来执行一个命令源码文件以及若干个库源码文件，<strong>不能接收测试源码文件</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-08-24%20at%2023.49.27.png" alt="Screen Shot 2021-08-24 at 23.49.27"></p><p>生成的临时文件可以用 go run - work 来看到。</p><p>go run 生成了两个文件，一个是归档文件，一个时可执行文件，go run 第二次运行时，若导入的代码包没有发生改变，go run 不会再次编译这个导入的代码包，直接静态链接。</p><h4 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h4><p>go build 主要用于测试编译：</p><ul><li><p>普通包：go build 不会产生任何文件。</p></li><li><p>main包：会产生可执行文件，需要执行 go install 或者使用 go install -o 路径/可执行文件</p></li><li><p>多个文件夹下多个文件，只执行某个文件需要: go build xxx.go</p></li><li>可指定编译输出名字 go build -o xxx</li><li>go build 会忽略目录下以 “_” 或者 “.” 开头的 go 文件。</li></ul><p>go build 用于编译我们指定的源码文件或代码包以及它们的依赖包。但是<strong>注意如果用来编译非命令源码文件，即库源码文件，go build 执行完是不会产生任何结果的。这种情况下，go build 命令只是检查库源码文件的有效性，只会做检查性的编译，而不会输出任何结果文件。</strong></p><h4 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h4><p>编译并安装代码包或者源码文件。</p><p>go install 命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>。</p><ul><li><p>可执行文件： 一般是 go install 带main函数的go文件产生的，有函数入口，所有可以直接运行。</p></li><li><p>.a应用包： 一般是 go install 不包含main函数的go文件产生的，没有函数入口，只能被调用。</p></li></ul><p>go install 比 go build 多干的事情：安装编译后的结果文件到指定目录。</p><h3 id="包变量和函数"><a href="#包变量和函数" class="headerlink" title="包变量和函数"></a>包变量和函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"math/rand"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">"Random number is :"</span> rand.Intn(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. var name type</span></span><br><span class="line"><span class="keyword">var</span> numA <span class="keyword">int</span></span><br><span class="line"><span class="comment">//2. var name = value</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="number">10</span></span><br><span class="line"><span class="comment">//3. </span></span><br><span class="line">name :=<span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"variable test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numA <span class="keyword">int</span></span><br><span class="line">numA = <span class="number">10</span></span><br><span class="line">fmt.Println(numA)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numB <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">fmt.Println(numB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"cyber"</span></span><br><span class="line">fmt.Println(name)</span><br><span class="line"></span><br><span class="line">cyber := <span class="string">"good boy"</span></span><br><span class="line">fmt.Println(cyber)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">float64</span> <span class="comment">//m: 0.0</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> <span class="comment">//""</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line">fmt.Println(s1 == <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//constant variable</span></span><br><span class="line"><span class="keyword">const</span> PATH <span class="keyword">string</span> = <span class="string">"http://www.google.com"</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415925535</span></span><br><span class="line">fmt.Println(PATH)</span><br><span class="line">fmt.Println(PI)</span><br><span class="line"><span class="comment">// define a group of constant variable</span></span><br><span class="line"><span class="keyword">const</span> c1, c2, c3 = <span class="number">100</span>, <span class="number">300</span>, <span class="string">"test"</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MALE   = <span class="number">0</span></span><br><span class="line">FEMALE = <span class="number">1</span></span><br><span class="line">UNKNOW = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">b</span><br><span class="line">c <span class="keyword">string</span> = <span class="string">"const string"</span></span><br><span class="line">d</span><br><span class="line">)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %d\n"</span>, a, a)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %d\n"</span>, b, b)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %s\n"</span>, c, c)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %s\n"</span>, d, d)</span><br><span class="line"></span><br><span class="line"><span class="comment">//enumeration </span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">SPRING = <span class="number">0</span></span><br><span class="line">SUMMER = <span class="number">1</span></span><br><span class="line">AUTUMN = <span class="number">2</span></span><br><span class="line">WINTER = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="built_in">test</span></span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">cyber</span><br><span class="line">good boy</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">http://www.google.com</span><br><span class="line">3.1415925535</span><br><span class="line">int, 100</span><br><span class="line">int, 100</span><br><span class="line">string, const string</span><br><span class="line">string, const string</span><br></pre></td></tr></table></figure><h3 id="打印和输出"><a href="#打印和输出" class="headerlink" title="打印和输出"></a>打印和输出</h3><ul><li>fmt.Print()</li><li>fmt.Printf()</li><li>fmt.Println</li></ul><p>%v：源数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">a := <span class="number">1</span>;</span><br><span class="line">b := <span class="number">3.1415</span></span><br><span class="line">c := <span class="literal">true</span></span><br><span class="line">d := <span class="string">"hello"</span></span><br><span class="line">e := <span class="string">'e'</span></span><br><span class="line">f := <span class="string">"F"</span></span><br><span class="line">fmt.Printf(<span class="string">"%T, %d\n"</span>, a, a)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %f\n"</span>, b, b)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %t\n"</span>, c , c)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %s\n"</span>, d, d)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %c\n"</span>, e, e)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %p\n"</span>, f, &amp;f)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, d)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, e)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, f)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------- */</span></span><br><span class="line"><span class="keyword">var</span> numA <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> numB <span class="keyword">float32</span></span><br><span class="line">fmt.Scanln(&amp;numA, &amp;numB)</span><br><span class="line">fmt.Printf(<span class="string">"numA: %d,numB: %f\n"</span>, numA, numB)</span><br><span class="line">fmt.Scanf(<span class="string">"%d,%f"</span>, &amp;numA, &amp;numB)</span><br><span class="line">fmt.Printf(<span class="string">"numA: %d, numB: %f\n"</span>, numA, numB )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------- */</span></span><br><span class="line">fmt.Println(<span class="string">"Please input:"</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">s1, _ := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">fmt.Println(<span class="string">"Value of input: "</span>+s1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"bigger than 10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"value equal to 10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"smaller than 10"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">using fallthrough to execute the following cases.</span></span><br><span class="line"><span class="comment">but it can be stopped by break.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> x := <span class="number">3</span>; x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">"x == 1"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">"x == 2"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">"x == 3"</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">fmt.Println(<span class="string">"x == 4"</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">equal to while in c/cpp</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// index := 1</span></span><br><span class="line"><span class="comment">// for index == 1 &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println("looping")</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">strings := []<span class="keyword">string</span>&#123;<span class="string">"google"</span>, <span class="string">"runoob"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">fmt.Println(i, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">numbers := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, x := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">fmt.Printf(<span class="string">"第 %d 位 x 的值 = %d\n"</span>, i, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">15</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">numbers := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 循环 */</span></span><br><span class="line"><span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">10</span>; a++ &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"a 的值为: %d\n"</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a &lt; b &#123;</span><br><span class="line">  a++</span><br><span class="line">  fmt.Printf(<span class="string">"a 的值为: %d\n"</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,x:= <span class="keyword">range</span> numbers &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"第 %d 位 x 的值 = %d\n"</span>, i,x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装基础及概念&quot;&gt;&lt;a href=&quot;#安装基础及概念&quot; class=&quot;headerlink&quot; title=&quot;安装基础及概念&quot;&gt;&lt;/a&gt;安装基础及概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GO 安装官网：&lt;a href=&quot;https
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://github.com/liysky/liysky.github.io.git/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>ListNode-Data Structure</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/08/07/ListNode-Data-Structure/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/08/07/ListNode-Data-Structure/</id>
    <published>2021-08-07T12:58:55.000Z</published>
    <updated>2021-08-28T14:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ListNode"><a href="#ListNode" class="headerlink" title="ListNode"></a>ListNode</h1><h3 id="递归反转"><a href="#递归反转" class="headerlink" title="递归反转"></a>递归反转</h3><p>反转一个链表（用递归的方式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">  ListNode last = reverse(head.next);</span><br><span class="line">  head.next.next = head;</span><br><span class="line">  head.next = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键的重点在于：<code>ListNode last = reverse(head.next)</code>，此句在于将 head 之后的链表进行反转，反转之后，head 仍然指向 head 之后的第一个节点，而 last 指向的是 head 之后所有链表的最后一个节点。</p><p>设原链表：1，2，3，4</p><p>即：head-&gt;next—&gt;(  2， 3， 4 —&gt; null )；</p><p>此时 head—&gt;next—&gt;next == 2</p><p>所以 head —&gt; next—&gt;next = head 即为 2 —&gt; head ；</p><p>然后，head —&gt;next = null 即将 head 变为最后一个节点，head 不应该再指向任何节点。</p><p><strong>以上递归函数需要有 base case：</strong></p><p><code>if(head.next == null) return head;</code></p><p><strong>反转链表前 N 个节点</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ListNode successor = null;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode <span class="title">reverseNode</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">    successor = head-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  ListNode last = reverseNode( head-&gt;next, n<span class="number">-1</span>);</span><br><span class="line">  head-&gt;next-&gt;next = head;</span><br><span class="line">  head-&gt;next = successor;</span><br><span class="line">  <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反转链表的一部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> reverseN(head, n);</span><br><span class="line">  &#125;</span><br><span class="line">  head.next = reverseBetween(head.next, m-<span class="number">1</span>, n-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ListNode&quot;&gt;&lt;a href=&quot;#ListNode&quot; class=&quot;headerlink&quot; title=&quot;ListNode&quot;&gt;&lt;/a&gt;ListNode&lt;/h1&gt;&lt;h3 id=&quot;递归反转&quot;&gt;&lt;a href=&quot;#递归反转&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="DataStructure" scheme="https://github.com/liysky/liysky.github.io.git/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>SLAM Learning</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/07/13/Slam-Learning/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/07/13/Slam-Learning/</id>
    <published>2021-07-13T12:45:34.000Z</published>
    <updated>2021-12-01T13:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容参考自 <strong>「高翔-SLAM14讲」</strong></p><p>Slam: Simultaneous localization and mapping 同时定位🌧️地图构建，概念为希望机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的地图特征（如墙角，柱子）定位自身的位置和姿态，再根据自身位置增量式的构建地图，从而同时定位和地图构建的目的。</p><h3 id="SLAM发展"><a href="#SLAM发展" class="headerlink" title="SLAM发展"></a>SLAM发展</h3><p>上世纪80年代SLAM概念的提出，从早期的声呐，到后来的2D/3D激光雷达，再到单目、双目、RGBD、ToF等各种相机，以及与惯性测量单元IMU等传感器的融合；SLAM的算法也从<strong>开始的基于滤波器的方法（EKF、PF等）向基于优化的方法转变</strong>，技术框架也从开始的单一线程向多线程演进。</p><ul><li>激光雷达 SLAM 发展</li></ul><p>基于激光雷达的 SLAM （LIDAR SLAM）采用2D或3D激光雷达（单线或多线激光雷达），室内一般使用 2D 激光雷达，在无人驾驶领域，一般使用 3D 激光雷达。</p><p>激光雷达有点测量精准，提供精准角度和距离信息，可达 &lt;1角度的角度精度以及 cm 级别的测距精度，能够覆盖平面内 270度 以上的范围，基于扫描振镜式的固态激光雷达（sick、hokuyo）可以达到较高的数据刷新率（20Hz以上）缺点价格昂贵。</p><ul><li><p>视觉 SLAM 发展</p><ul><li><p>视觉 SLAM 传感器更加便宜、轻便，而且随处可得（如手机上的摄像头）</p></li><li><p>且图像能够提供更加丰富的信息，特征区分度更高，缺点是图像的实时处理需要很高的计算能力</p></li><li><p>小型 PC 和 嵌入式设备，移动设备上实现视觉 SLAM 已经成为可能</p></li><li><p>目前视觉 SLAM 的传感器有单目、双目、RGBD 三种相机，RGBD深度信息通过结构光原理计算，也有通过投射红外 pattern 并利用双目红外相机来计算，也有通过 TOF 相机实现。</p></li><li><p><strong>目前流行的视觉 SLAM 系统可以分为前后端</strong></p><ul><li>前端完成数据关联，研究帧之间的变换关系，完成实时位姿跟踪，对输入图像进行计算，同时检测并处理闭环。</li><li>后端对前端的输出结果进行优化，利用滤波理论（EKF、PF）或者优化理论进行树或图的优化，得到最优的位姿估计和地图。</li></ul></li></ul></li></ul><pre><code>* 采用滤波的 SLAM （下图a）  估计 n 时刻的相机位姿 Tn 需要使用地图中所有路标的信息，且每帧都需要更新这些路标的状态，随着新的路标的不断加入，状态矩阵的规模增长迅速，导致计算和求解时耗严重，因此不适宜长时间大场景的操作；*   采用优化算法的 SLAM （下图b）    通常结合关键帧使用，估计 n 时刻的相机位姿 Tn 可以使用整个地图的一个子集，不需要在每幅图像都更新地图数据，因此现代成功的实时 SLAM 系统大部分都采用优化的方法。</code></pre><p><img src="https://d3i71xaburhd42.cloudfront.net/262307914e99e5a397cce1cdbe346d11bcb2b3dd/2-Figure1-1.png" style="zoom:67%;" /></p><ul><li><p>SLAM 发展历程</p><ul><li><p>MonoSLAM[5]是2007年由Davison 等开发的第一个成功基于单目摄像头的纯视觉SLAM 系统：</p><ul><li>使用了扩展卡尔曼滤波</li></ul></li><li><p>同年，Davison在Oxford的师父Murray和Klein发表了实时SLAM系统PTAM（Parallel Tracking and Mapping）：<br>首个基于关键帧BA的单目视觉SLAM 系统，随后移植至手机端，PTAM在架构上做出了创新，将姿态跟踪（Tracking）和建图（Mapping）两个线程分开并行运行，<strong>这种架构设计为后来的实时SLAM（如ORB-SLAM）所效仿，成为了现代SLAM系统的标配</strong>。</p></li><li><p>2011年，Newcombe 等人提出了单目DTAM 系统, 其最显著的特点是能实时恢复场景三维模型</p><p>基于三维模型，DTAM 既能允许AR应用中的虚拟物体与场景发生物理碰撞，又能保证在特征缺失、图像模糊等情况下稳定地直接跟踪。</p></li><li><p>2013年，TUM机器视觉组的Engel 等人提出了一套同样也是基于直接法的视觉里程计(visual odometry, VO)系统，该系统2014年扩展为视觉SLAM 系统LSD-SLAM。</p><ul><li>2015年，Engel等人对LSD-SLAM进行了功能拓展，使其能够支持双目相机和全景相机</li></ul></li><li><p>2014年，苏黎世大学机器人感知组的Forster等人提出开源的SVO系统</p><ul><li>该系统对稀疏的特征块使用直接法配准（Sparse Model-based Image Alignment），获取相机位姿</li><li>根据光度不变假设构造优化方程对预测的特征位置进行优化（Feature Alignment）</li><li>对位姿和结构进行优化（Motion-only BA和Structure-only BA）</li></ul></li><li><p>2016年，Forster对SVO进行改进，形成SVO2.0</p><ul><li>增加了边缘的跟踪</li><li>考虑了IMU的运动先验信息</li><li>支持大视场角相机（如鱼眼相机和反射式全景相机）和多相机系统</li></ul></li><li><p>2015年，Mur-Artal 等提出了开源的单目ORB-SLAM，并于2016年拓展为支持双目和RGBD传感器的ORB-SLAM2，它是目前支持传感器最全且性能最好的视觉SLAM系统之一。</p></li><li><p>2016年，LSD-SLAM的作者，TUM机器视觉组的Engel等人又提出了DSO系统</p><ul><li>基于直接法和稀疏法的视觉里程计</li><li>不进行关键点检测和特征描述子计算，而是在整个图像内采样具有强度梯度的像素点</li><li>提出了完整的光度标定方法，考虑了曝光时间，透镜晕影和非线性响应函数的影响</li></ul></li><li><p>2017年，香港科技大学的沈绍劼老师课题组提出了融合IMU和视觉信息的VINS系统</p><ul><li>首个直接开源手机平台代码的视觉IMU融合SLAM系统</li><li>可以运行在iOS设备上，为手机端的增强现实应用提供精确的定位功能，同时该系统也在应用在了无人机控制上，并取得了较好的效果</li><li>VINS-Mobile使用滑动窗口优化方法，采用四元数姿态的方式完成视觉和IMU融合，并带有基于BoW的闭环检测模块，累计误差通过全局位姿图得到实时校正</li></ul></li></ul></li></ul><h3 id="SLAM-感知入门"><a href="#SLAM-感知入门" class="headerlink" title="SLAM 感知入门"></a>SLAM 感知入门</h3><p>一个机器人需要至少做的两件事情：</p><ul><li>定位：知道自己在什么位置</li><li>建图：知道周围环境是什么样子的</li></ul><p><strong>传感器：</strong></p><ul><li>一类是携带在机器本体上的</li><li>另一类是安装在环境里的</li></ul><p>通过在机器本体上的传感器可以来感知未知的世界。</p><h4 id="传感器相机"><a href="#传感器相机" class="headerlink" title="传感器相机"></a>传感器相机</h4><ul><li>单目，在单张图像里，无法确定一个物体的真实大小。</li><li>双目（Stereo），双目摄像机之间的距离称为 <strong>基线</strong>。基线距离越大，能够测量到的物体就越远，所以无人车上搭载的双目相机通常会是一个大家伙。</li><li>深度（RGB-D）：除了能够采集到彩色图片，还能够读出每个像素与相机之间的距离。深度相机通常会携带多个摄像头。</li></ul><p>（除此之外，SLAM 中还有全景相机，Event相机等）</p><h3 id="经典视觉-SLAM-框架"><a href="#经典视觉-SLAM-框架" class="headerlink" title="经典视觉 SLAM 框架"></a>经典视觉 SLAM 框架</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-07-20%20at%2023.15.43.png" alt="Screen Shot 2021-07-20 at 23.15.43" style="zoom:67%;" /></p><ul><li><p>传感器信息读取</p><p>相机图像的读取和预处理，传感器信息读取同步等。</p></li><li><p>前端视觉里程设计 Visual Odometry</p><p>估计相邻图像间相机的运动</p></li><li><p>后端（非线性）优化 optimization</p><p>后端接受前端测量的相机位姿，以及回环检测的信息，对其进行优化，得到轨迹和地图。</p></li><li><p>回环检测</p><p>回环检测是判断机器人是否到达过先前的位置。</p></li><li><p>建图</p><p>根据估计的轨迹，建立与任务要求对应的地图。</p></li></ul><p><strong>视觉里程计</strong></p><ul><li><p>通过图像确定相机的运动，通过相邻帧之间的图像估计运动相机，恢复场景的空间结构。</p></li><li><p>值计算相邻时刻的运动，与过去的信息没有关联。</p></li><li><p>累计漂移</p><p>仅通过视觉里程计来估计轨迹，会出现累计漂移问题。—&gt; 误差传递的问题</p><p>需要 <strong>回环检测</strong>，<strong>全局校正</strong>。</p><p>回环检测：需要机器人回到原始位置的事情进行检测，后端优化根据该回环检测信息，纠正整个轨迹。</p></li></ul><p><strong>后端优化</strong></p><ul><li>SLAM 视觉中，前端和计算机视觉研究领域更相关，如图像特征提取和匹配，后端则主要是滤波和非线形优化算法。</li><li>状态估计，后端优化要解决的——空间状态的不确定性估计</li><li>SLAM 问题的本质，对运动主体自身和周围环境空间不确定性的估计</li></ul><p><strong>回环检测</strong></p><ul><li><p>闭环检测，主要解决位置估计 <strong>随时间漂移</strong> 的问题</p></li><li><p>让机器人具有识别到过的场景的能力。</p></li><li>利用图像间的相似性来完成回环检测。</li></ul><p><strong>建图</strong></p><p>即，构建地图。</p><ul><li><p>对于家用扫地机器人，矮平面运动的机器人，只需要一个二维的地图。</p></li><li><p>度量地图</p><p>强调精确的表示地图中的物体的位置关系，通常用稀疏 （Sparse）与稠密（Dense）进行分类。</p><p>稀疏：路标进行标记，其它的空白地方无用可以忽略。</p><p>稠密：按照某种分辨率，由许多个小格子进行组成，通过导航算法结合小格子状态进行导航，会有存储量大的问题和地图一致性的问题。</p></li><li><p>拓扑地图</p><p>强调地图元素之间的关系，考虑连通性。</p></li></ul><h3 id="SLAM-问题数学表述"><a href="#SLAM-问题数学表述" class="headerlink" title="SLAM 问题数学表述"></a>SLAM 问题数学表述</h3><p>机器人各个时刻的位置 $X_1, X_2…X_k$</p><p>路标N个，$y_1,…y_N$</p><p><strong>运动方程</strong>：$X<em>{k} = f(X</em>{k-1}, u<em>{k},w</em>{k})$</p><p>运动方程为机器人读入 <strong>运动传感器读数或者输入</strong>，<strong>噪声</strong>等，使得这个那个函数可以指代人意的运动传感器/输入，成为一个通用的方程。</p><p><strong>观测方程</strong>：$Z<em>{k} = h(y</em>{i}, x<em>k,v</em>{k,j})$</p><p>观测方程为，机器人在某个 $X<em>{k}$ 位置看到某个 路标 $y_j$ 时产生的一个观测数据 $Z</em>{k,j}$ </p><p>SLAM 过程可以总结为 <strong>运动方程</strong> 与 <strong>观测方程</strong>，其描述的基本 SLAM 问题为：当知道运功测量的读数 u，以及传感器的读数 z，如何求解定位问题（估计x）和建图问题（估计y），此时 SLAM 问题为一个状态估计问题。</p><p>状态估计的问题的求解，与两个方程的具体形式，以及噪声服从哪种分布（线性/非线形/高斯/非高斯）有关系。</p><p>线性高斯为最简单，它的无偏可以用卡尔曼滤波器（Kalman Filter）给出。</p><p>非线形高斯系统（Non-Linear No-Gaussian) 会使用拓展卡尔曼滤波器（Extended Kalman Filter）和非线形优化两类方法去求解。</p><h3 id="SLAM-编程基础"><a href="#SLAM-编程基础" class="headerlink" title="SLAM 编程基础"></a>SLAM 编程基础</h3><h4 id="安装-Linux-操作系统"><a href="#安装-Linux-操作系统" class="headerlink" title="安装 Linux 操作系统"></a>安装 Linux 操作系统</h4><p>推荐使用 ubuntu 操作系统。</p><h4 id="使用编译器g"><a href="#使用编译器g" class="headerlink" title="使用编译器g++"></a>使用编译器g++</h4><p>安装g++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudu apt-<span class="built_in">get</span> install g++</span><br></pre></td></tr></table></figure><h4 id="使用-cmake"><a href="#使用-cmake" class="headerlink" title="使用 cmake"></a>使用 cmake</h4><p>cmake 用来对 C++ 项目进行编译管理，在 cmake 工程中：</p><ul><li>使用 cmake 命令生成一个 makefile 文件</li><li>然后用 make 命令根据这个 makefile 文件的内容编译整个工程。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># declare lowest version of cmake</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># declare a project of cmake</span></span><br><span class="line"><span class="keyword">project</span>( HELLOSLAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add an exe program</span></span><br><span class="line"><span class="comment"># grammar: add_executable ( programName sourceFile )</span></span><br><span class="line"><span class="keyword">add_executable</span> ( helloSLAM helloSLAM.cpp )</span><br></pre></td></tr></table></figure><p>cmake.txt 用于告诉 cmake 对此目录文件做什么事情。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cmake . 会用 cmake 对该工程进行 cmake 编译</span></span><br><span class="line"><span class="comment">#cmake 会输出编译信息，在当前文件目录下生成一些中间文件，最重要的是 MakeFile，MakeFile 是自动生成的。</span></span><br><span class="line">cmake . </span><br><span class="line"><span class="comment"># cmake . 之后就是使用 make 进行对工程的编译。</span></span><br></pre></td></tr></table></figure><h3 id="三维空间刚体运动"><a href="#三维空间刚体运动" class="headerlink" title="三维空间刚体运动"></a>三维空间刚体运动</h3><h4 id="内外积与反对称矩阵"><a href="#内外积与反对称矩阵" class="headerlink" title="内外积与反对称矩阵"></a>内外积与反对称矩阵</h4><p>左右手坐标系：OpenGL、3D Max —&gt; 右手坐标系， Unity、Direct3D —&gt; 左手坐标系</p><p>叉积又称为外积：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210816231511145.png" alt="image-20210816231511145" style="zoom: 70%;" /></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210816233544284.png" alt="image-20210816233544284" style="zoom:70%;" /></p><h4 id="坐标系间的欧式变换"><a href="#坐标系间的欧式变换" class="headerlink" title="坐标系间的欧式变换"></a>坐标系间的欧式变换</h4><p>惯性坐标系（世界坐标系），其为固定不动的，相机或者机器人是一个移动的坐标系。</p><p>对于一个相机视野中的 P ，其在相机坐标系中的坐标为 Pc，而在世界坐标系中的坐标为 Pw，这两个坐标之间的转换需要通过矩阵变换来实现。两个坐标系之间差了一个 <strong>欧式变换（旋转+平移）</strong>。</p><p>两个坐标系之间的运动由一个<strong>旋转</strong>加上一个平移组成，这种运动成为刚体运动。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210910000308957.png" alt="image-20210910000308957" style="zoom:67%;" /></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20211024233821589.png" alt="image-20211024233821589"></p><p>矩阵 R 为旋转矩阵，其为两个坐标系基的内积。其基向量长度为1，实际则为各基向量夹角的余弦值，所以旋转矩阵也称为方向余弦矩阵。</p><p>有关旋转矩阵：</p><ul><li>其为行列式为1的正交矩阵</li><li>行列式为1的正交矩阵也是一个旋转矩阵</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20211024234416227.png" alt="image-20211024234416227"></p><h4 id="Eigen实践"><a href="#Eigen实践" class="headerlink" title="Eigen实践"></a>Eigen实践</h4><p><strong>第三方库安装</strong>：</p><p>首先使用 <code>git submodule init</code> <code>git submodule update</code> 来同步相关的第三方库。</p><ul><li>Pangolin库的安装：</li></ul><p>安装依赖：<code>sudo apt-get install libglew-dev</code></p><p>然后进入到 3rdparty 进行 cmake 与 make 编译</p><p>Eigen为一个模板类。</p><p>在 vscode 中运行 slambook2 中的程序需要设置 📁 <code>.vscode</code>  中添加 task.json 与 launch.json 文件</p><hr><p>launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"C/C++"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"compile"</span>,</span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>task.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [&#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"compile"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"g++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: &#123;</span><br><span class="line">                <span class="attr">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">                <span class="attr">"fileLocation"</span>: [</span><br><span class="line">                    <span class="string">"relative"</span>,</span><br><span class="line">                    <span class="string">"$&#123;workspaceRoot&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"pattern"</span>: &#123;</span><br><span class="line">                    <span class="attr">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</span><br><span class="line">                    <span class="attr">"file"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"line"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">"column"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">"message"</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旋转向量和欧拉角"><a href="#旋转向量和欧拉角" class="headerlink" title="旋转向量和欧拉角"></a>旋转向量和欧拉角</h4><p>旋转向量：</p><p>即利用一个三维向量表达出旋转矩阵SO(3) 所能表达的事情：任意旋转都可以用一个旋转轴和一个旋转角来刻画。</p><p>一个三维向量来描述一个旋转：</p><ul><li>其方向与旋转轴一致</li><li>其长度大小与旋转角相等</li></ul><p>旋转矩阵和旋转向量可以进行相互转化。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-25%20at%2023.22.10.png" alt="Screen Shot 2021-10-25 at 23.22.10"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-25%20at%2023.22.29.png" alt="Screen Shot 2021-10-25 at 23.22.29"></p><p>旋转轴n，旋转轴上的向量在旋转后不发生改变：<strong>Rn = n</strong>.</p><h4 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h4><p>航空、航模中会有：</p><p>“俯仰角”，pitch ——绕 Y 轴，</p><p>“偏航角”，yam ——绕 Z 轴，</p><p>“滚转角”，roll —— 绕 X 轴。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20211026225238811.png" alt="image-20211026225238811" style="zoom:67%;" /></p><p>欧拉角会产生 <strong>万向节死锁的问题</strong>： 在俯仰角为 $\pm 90^\circ$时，第一次旋转和第三次旋转将使用同一个轴，这样就会使得系统丢掉一个自由度，这种称为奇异性问题。</p><h4 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h4><p>为了解决 <strong>万向节死锁的问题</strong>，因为找不到不带奇异的三维向量描述方式，用一种类似复数的代数：四元数，来解决旋转的问题。</p><p>一个四元数q有一个实部三个虚部：</p><script type="math/tex; mode=display">q = q_0 + q_1i+q_2j+q_3k</script><p>其中，i，j，k 为四元数的三个虚部：</p><script type="math/tex; mode=display">F^{HLLC}=\left\{\begin{array}{rcl}i^2=j^2=k^2=-1       &      & \\ij=k, ji= -k    &      & \\jk=i, kj=-i     &      & \\ki=j, ik=-j       &      & \\\end{array} \right.</script><h4 id="四元数的运算"><a href="#四元数的运算" class="headerlink" title="四元数的运算"></a>四元数的运算</h4><p>加减法为常规运算。</p><p><strong>乘法：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-27%20at%2023.12.08.png" alt="Screen Shot 2021-10-27 at 23.12.08" style="zoom:67%;" /></p><p><strong>膜长：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-27%20at%2023.12.55.png" alt="Screen Shot 2021-10-27 at 23.12.55" style="zoom:67%;" /></p><p><strong>共轭：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-27%20at%2023.14.38.png" alt="Screen Shot 2021-10-27 at 23.14.38" style="zoom:67%;" /></p><p><strong>逆：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-10-27%20at%2023.15.35.png" alt="Screen Shot 2021-10-27 at 23.15.35" style="zoom:67%;" /></p><h4 id="用四元数表示旋转"><a href="#用四元数表示旋转" class="headerlink" title="用四元数表示旋转"></a>用四元数表示旋转</h4><p>空间三维点：$p = [x,y,z]\in R^3$ ；</p><p>单位四元数 q 指定的旋转；</p><p>三维点 p 到 p’ ：用矩阵的表示方式为： p’ = Rp.</p><p>四元数的表示方式：</p><ul><li><p>虚四元数表示一个三维空间点</p><p>$p=[0,x,y,z]^T=[0,v]^T$</p></li><li><p>相当于四元数的 3 个虚部与空间中的3个轴相对应：</p></li></ul><script type="math/tex; mode=display">p^{'}=qpq^{'}</script><p>最后取出 p’ 的虚部部分，即得到旋转后的坐标。</p><h3 id="李群和李代数"><a href="#李群和李代数" class="headerlink" title="李群和李代数"></a>李群和李代数</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20211031203435595.png" alt="image-20211031203435595" style="zoom:67%;" /></p><p>群是一种 <strong>集合</strong> 加上一种 <strong>运算</strong> 的代数结构。群满足如下几个条件：</p><ul><li>封闭性: $\forall a_1,a_2 \in A, a_1•a_2 \in A$</li><li>结合律: $\forall a_1,a_2,a_3 \in A, (a_1•a_2)a_3=a_1•(a_2•a_3)$</li><li>幺元：$\exists a_0 \in A, s.t.\forall a \in A ,a_0•a=a•a_0=a$</li><li>逆: $\forall a \in A, \exists a^{-1} \in A, s.t. a•a^{-1}=a_0$ </li></ul><p><strong>李群是指具有连续（光滑）性质的群</strong></p><p>李代数：每个李群都有与之对应的李代数，李代数描述了李群的局部性质。</p><p>对于旋转矩阵的每一次求导，只需要左乘一个 $\phi^{(t)}$ 即可。$\phi^{(t)}$ 为一个三维向量。</p><p>旋转矩阵R与反对称矩阵 $\phi^{\bigwedge} t$ 之间的关系： $R(t) = exp(\phi^{\bigwedge} t)$ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容参考自 &lt;strong&gt;「高翔-SLAM14讲」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Slam: Simultaneous localization and mapping 同时定位🌧️地图构建，概念为希望机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的地
      
    
    </summary>
    
    
    
      <category term="learning-note" scheme="https://github.com/liysky/liysky.github.io.git/tags/learning-note/"/>
    
  </entry>
  
  <entry>
    <title>A Little bit of Summary Of Deep Learning</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/06/13/A-Little-bit-of-Summary-Of-Deep-Learning/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/06/13/A-Little-bit-of-Summary-Of-Deep-Learning/</id>
    <published>2021-06-13T13:30:05.000Z</published>
    <updated>2022-03-05T15:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深度学习技术与理论"><a href="#深度学习技术与理论" class="headerlink" title="深度学习技术与理论"></a>深度学习技术与理论</h3><p>一、简答题(50 分)。<br> 1、Sigmoid, Tanh, Relu 这三个激活函数有什么缺点和不足?有哪些最新改进的激活函数?(10 分)</p><div class="table-container"><table><thead><tr><th>激活函数</th><th>公式</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td>sigmoid</td><td>$\sigma(x) = 1/(1+e^{-x})$</td><td>1. 由于其软饱和性，会有梯度消失弥散问题，导致训练出现问题<br />2. 不是关于原点对称<br />3. 计算 exp 较为耗时</td><td>1. 函数输出映射在（0，1）之间，单调连续，输出范围有限，优化稳定，可以用作输出层<br />2. 求导容易</td></tr><tr><td>Tanh</td><td>$tanh(x) = 2\sigma(2x)-1$</td><td>梯度弥散没有解决</td><td>1. 解决了原点对称的问题<br />2.比 sigmoid 更快</td></tr><tr><td>Relu</td><td>$f(x) = max(0,x)$</td><td>梯度弥散没有完全解决，在(-) 部分相当于神经元死亡且不会复活，因此权重无法更新的问题。</td><td>1. 解决了部分梯度弥散的问题<br />2. 收敛速度更快了<br />3.在没有无监督预训练的时候也能有较好的表现</td></tr><tr><td>Leaky Relu</td><td>$f(x) = 1(x<0),(\alpha x)+1(x>=0)(x)$</td><td></td><td>解决了神经死亡问题</td></tr><tr><td>Maxout</td><td>$max(w^T_1x+b_1, w^T_2x + b_2)$</td><td>参数比较多，本质上是在输出结果上又增加了一层</td><td>克服了 Relu的缺点，比较提倡使用</td></tr></tbody></table></div><p><strong>LReLU:</strong></p><p> $f(y_i) = y_i(if (y_i &gt; 0)), a_iy_i (if(y_i&lt;=0))$</p><p>当参数 $a_i$ 比较小而且固定的时候，称之为 LRe LU，其最初目的是为了避免梯度消失。很多时候当我们想要应用 LReLU时，必须非常奥心谨慎地重复训练，选出合适的 $a_i$时，LReLu 的表现出的结果才比 ReLU 好。</p><p>PReLU 是 LReLU 的改进，可以自适应地从数据中学习参数，PReLU 具有收敛速度快、错误率低的特点，PReLU 可以用于反向传播的训练，可以与其它层同时优化。</p><p><strong>ELUs:</strong></p><p>$f(x) = x (if(x &gt; 0)), \alpha(exp(x)-1)(if x &lt;=0)$</p><p>$f’(x)=1(if(x&gt;0)), f(x)+\alpha (if(x&lt;=0)) $</p><p>ELUs 是对 ReLU 激活函数的一种演变，将激活函数能够保持在一个 noise-robust 的状态，提出具有负值的激活函数，可以使得平均激活接近于零。</p><p>它在x&lt;0处激活值为负值，而且导数不为0这是一点很好的性质，不会产生像 Relu 所带来的在 （-）会有神经元死亡的问题，并且让这一部分呈现一种软饱和，这种软饱和有助于提升噪声鲁棒性。</p><p>2、什么样的情况适合使用传统的机器学习方法，不适合使用深度学习?(10 分)</p><ul><li><p>数据集依赖性，传统的机器学习与机器学习最主要的区别在于随着数据规模的增加，其性能是否也会不断增加。当数据很少时，深度学习算法的性能并不好，因为深度学习的算法需要大量的数据来去让神经元完美的感知它。另一方面，传统的机器学习在数据规模小的情况下使用制定好的规则，性能会比较好。</p><p>所以当数据集较小时不适用于深度学习。</p></li><li><p>硬件依赖性，深度学习算法需要进行大量的矩阵运算，GPU 主要用来高效优化矩阵运算，与传统的机器学习算法相比，其硬件性能尤其是对 GPU 的依赖性更强。</p><p>所以当硬件性能不足时不太适用于深度学习（这里更强调训练时的性能，当训练好的模型来进行检验使用时往往不需要特别高的性能）</p></li><li><p>特征处理预训练的时间，将领域知识放入特征提取器里来减少数据复杂度并生成使学习算法工作的更好的模型，这种提前的预训练会比较耗时。</p><p>所以当需要的预训练时间有所限制时，不适用于深度学习。</p></li><li><p>特征提取，传统的机器学习的特征提取主要依赖于人工，对与特定的简单的任务这种人工提取往往会更简单和有效，缺点在于通用性较差。</p><p>较为简答任务，不适合于深度学习。</p></li></ul><p>3、卷积神经网络包括哪些基本结构?基本作用分别是什么?(10 分)</p><ul><li><p>输入层</p><p>输入层可以处理多维数据，常见的有一维二维输入，通常卷积神经网络的输入特征需要进行标准化处理，即对输入的数据进行归一化，如输入数据若为像素，可将分布于[0,255]的原始像素值归一化至[0,1]区间。</p></li><li><p>隐含层</p><ul><li>卷积层，拥有卷积核，组成卷积核的每个元素都对应一个权重系数和一个偏差量，类似于一个神经元。卷积核的大小通常称作“感受野”，其含义可类比视觉层细胞的感受野。一组平行的特征图，通过在输入图像上滑动不同的卷积核并执行一定的运算而组成。卷积核与输入图像之间会执行一个元素对应乘积并求和的运算以将感受野内的信息投影到特征图中的一个元素。</li><li>卷积层参数，即卷积核大小、步长和填充，大小即感受野，步长即为定义卷积核相邻两次扫过特征图时位置的距离。填充是特征图通过卷积核之前人为增大其尺寸以抵消计算中尺寸收缩影响的方法。</li><li>激活函数，激活函数通常用以来加入非线性因素，因为线性模型的表达力有所限制，加入了非线性激活函数后可以用来感知和模拟更复杂的任务模型。</li><li>池化层，进行特征的选择和信息的过滤，池化层主要功能是将特征图中单个点的结果替换为其相邻区域的特征图统计量。</li><li>Inception 是对于多个卷积层和池化层进行堆叠所得的结构，增加了网络的深度。</li><li>attention 注意力机制，加强局部特征与全局特征之间的联系，上下文的联系。将有限的注意力集中在重点信息上，从而节省资源，快速获得最有效的信息。</li><li>全连接层，将提取的特征进行非线性组合以得到输出。</li></ul></li><li><p>输出层</p><p>卷积神经网络的输出层上游通常是全连接层，输出层使用逻辑函数或者归一化指数函数（softmax）输出分类标签。</p></li></ul><p>4、神经网络中的 Dropout 的作用，具体是如何实现的?(10 分)</p><p>提出的主要原因是机器学习中很容易出现过拟合的问题，而且还伴随着训练时间较长的问题。</p><ul><li>训练一个神经网络，输入 x，输出 y，把 x 通过网络向前传播，然后把误差反向传播以决定如何更新参数让网络进行学习。</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/format,png.png" style="zoom:50%;" /></p><ul><li>使用 dropout 之后以上过程变为，（临时）删除掉一半的隐藏神经元，输入输出神经元保持不变。然后把输入 x 通过修改后的网络前向传播，然后把得到的损失结果通过修改的网络反向传播，一批训练样本执行完这个过程后，在没有被删除的神经元上按照随机梯度下降更新对应的参数（w，b）</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/dropout.png" alt="img" style="zoom:67%;" /></p><ul><li>然后重复以上过程：<ul><li>恢复被删除掉的神经元（此时上次被删除的神经元保持原样，而没有被删除的神经元已经有所更新）</li><li>从隐藏层神经元中继续随机选择一个一半大小的子集临时删除掉（备份被删除的神经元的参数）</li><li>对一小批训练样本，先前向传播后反向传播并根据随机梯度下降法跟新参数（w，b），对于没有被删除的那一部分参数得以更新，删除的神经元参数继续保持前一状态（当下被删除前的结果）</li></ul></li><li>伴随训练次数不断重复这一过程</li></ul><p>5、残差网络为什么能够搭建很深的神经网络?(10 分)</p><ul><li><p>相比于学习原始信号，残差网络学习的是信号的差值，简化了学习过程，增强了梯度传播。</p></li><li><p>一定程度上，网络越深表达能力越强，性能越好，但是会有梯度消失和梯度爆炸的问题发生，传统的通过 Batch Normalization， Relu激活函数等不能从根本上解决问题。即在依靠误差的链式反向传播法则，损失 loss 对 f 的求导过程中，多次连乘后梯度可能越来越小也可能越来越大，导致参数无法进行更新，而残差网络中由于包含了恒等项，所以依然能够有效的进行反向传播。</p></li><li><p>打破了网络的不对称性，如果网络中每个层只有少量的隐藏单元对不同的输入改变它们的激活值，而大部分隐藏单元对不同的输入都是相同的反应，此时整个权重矩阵的秩不高，并且随着网络层数的增加，连乘后使得整个秩变得更低，这就是网络的退化。</p><p>而权重是一个很高纬的矩阵，但是大部分纬度没有信息，使得网络的表达能力不强，这样的情况很大程度上来自于网络的对称性，而残差连接打破了网络的对称性。</p></li><li><p>增强了网络的泛化能力，残差网络可以看做是不同深度的浅层神经网络组合。</p></li></ul><p>二、应用题(15 分) 注意力机制在图像理解中的作用是什么?结合自己的科研工作描述如何在自己的日常工作中使用注意力机制提升神经网络的性能。</p><p>注意力机制在图像理解中主要在于能够忽略无关信息而关注重点信息，增强局部的特征信息与全局特征信息之间的相关性依赖性。</p><p>在通过阅读论文和查阅资料学习中，在日常工作中使用注意力机制提升神经网络的性能主要有以下几个方面做工作：</p><ul><li><p>空间域</p><p>如 Spatial Transformer Networks（STN）模型[4] ，简单的池化层过于暴力，因此添加了 Spatial attention 模块，又如Dual Attention Network for Scene Segmentation 中的 Spatial Attention，都有在图像的空间域中进行 attention 操作，可以在先通过ResNet对图片进行对图像的预处理，将Spatial Attention 机制加入到原有的网络结构中，将原图片中的关键信息提取出来，然后再通过输出层进行输出。</p></li><li><p>通道域</p><p>卷积神经网络中，每张图片初始时会由（R，G，B）三通道表示，之后通过不同的卷积核之后，每个通道会产生新的信号，如图片特征的每个通道使用64核卷积，就会产生64个新通道的矩阵 (H, W, 64) 。每个通道上的特征即该图片在不同卷积上的分量，在每个通道上增加权重来表示该通道与关键信息的相关度，权重越大则相关度越高，即我们最终需要关注的通道。如论文 Squeeze-and-excitation networks 中提出的 SENet 模型结构，SENet中注意力机制被分成三个部分：挤压(Sequeeze)，激励(excitation)，以及注意(attention)。</p></li><li><p>混合域</p><p>空间域注意力忽略了通道域中的信息，每个通道中的图片特征同等处理，而通道域是对一个通道内的信息直接全局平均化，而忽略通道内的局部信息，所以结合两种思路，可以设计出有混合注意力机制的模型。Residual attentionnetwork for image classification 中，注意力机制是软注意力基本的加掩码(mask)机制，这种注意力机制借鉴了 residual 残差网络的想法，不只根据当前网络层的信息加上 mask，还把上一层的信息传递下来，其中所提出的 mask 不只是对空间域或者通道域的单独注意，而是对每个特征元素的权重通过对每个特征元素都找到其对应的注意力权重，同时形成空间域和通道域的注意力机制。</p><p>应用这种混合的残差注意力学习，不仅只把 mask 之后的特征张量作为下一层的输入，同时也将 mask 之前的特征张量作为下一层的输入，得到的特征更加丰富，从而更好地注意关键特征。</p></li><li><p>时间注意力机制的应用</p><p>还可以通过使用时间注意力进行增强学习。</p></li></ul><p>三、应用题(15 分)<br> 在训练神经网络时，发现模型的 loss 不下降，可能存在哪些问题?如何解决?</p><p>可能存在的问题：</p><ul><li><p>模型结构和特征工程存在问题</p><p>如模型结构不理想和规模太小，特征工程存在问题其对于数据拟合能力不足</p></li><li><p>权重初始化方案有问题</p><p>在神经网络训练之前，需要赋予一个初值，初值选择有问题则会出现 loss 的值不下降的问题。</p></li><li><p>正则化过度</p><p>dropout 等是为了防止过拟合，过拟合后应该根据训练情况进行调整，但如果调整有问题就需要考虑重新调试或者确定当前模型结构的正确性。</p></li><li><p>选择合适的激活函数、损失函数</p><p>一般 ReLu作为激活函数可以有效避免梯度消失，对于损失函数，对于分类任务通常使用交叉熵损失函数，回归任务使用均方差。</p></li><li><p>选择合适的优化器和学习率</p><p>神经网络优化器如 Adam，SGD等，学习率决定了网络的训练速度，这些都是当loss出问题时需要考虑的方向。</p></li><li><p>训练时间的不足</p></li><li><p>Batch Size 的大小问题</p><p>batch size 不合适会导致模型迟迟难以收敛</p></li><li><p>数据集未打乱</p><p>不打乱数据集会产生一定的偏差问题</p></li><li><p>数据集有问题</p><p>当数据集噪声过多，或者数据标注有大量错误时，也会出现模型训练出问题的情况</p></li><li><p>未进行归一化</p></li></ul><p><strong>验证集loss不下降</strong></p><ul><li><p>训练集loss也不下降，主要通过以上角度进行纠正</p></li><li><p>训练集loss可以下降</p><p>由于验证集数据也是从训练集上采取，此时数据集没问题，应多考虑过拟合问题</p><ul><li>适当正则化和降纬</li><li>降低模型的规模</li><li>获取更多的数据集</li><li>对数据集进行扰动和扩增</li></ul></li><li><p>测试机loss不下降</p><ul><li>应用场景不一致</li><li>噪声问题</li></ul></li></ul><p>四、应用题(20 分) 你在日常科研工作中训练深度神经网络时遇到过哪些问题?是怎么解决的?</p><ul><li>刚开始在 Google Clab 上进行训练数据时，上传数据集遇到易丢失的问题，后来通过先上传到 Google drive，再使用命令 from google.colab import drive ；drive.mount(‘/content/drive’) 进行挂载解决。</li><li>Google Clab 一段时间不进行操作后就会自动给断开的问题，通过在浏览器控制台使用一小段 js 命令进行定时 trigger 以防止它无操作之后就断开。但是后来发现colab挂载时间应该是10小时左右，所以训练的时候要加上 checkpoint，防止训练模型时间过长白白浪费时间。</li><li>模型在训练过程中，有时候会出现中断需要重新连接的情况，后来发现了脚本「按键精灵」，如果离开电脑就F10启动脚本左键点击功能，可以防止长时间不连接导致需要重新训练。</li><li>在语义分割的训练时，一开始 batch 设置得太大了，发现设置更小的 batch 在较少的训练轮数 epoch 就能达到大的 batch_size 更多轮 epoch 相同的准确度。</li><li>最早在「猫狗大战」的训练任务中接触到「学习率」，选择较大的学习率会导致在损失函数上产生不好的后果，loss会震荡不稳定，但选择较小的学习率神经网络训练的耗时会增加，可以能使得神经网络困在一个局部最小值里。后来发现了可以使用一个小技巧 learning rate annealing 学习速率退火，先从一个比较高的学习速率开始，然后慢慢地在训练 epoch 中降低学习速率。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;深度学习技术与理论&quot;&gt;&lt;a href=&quot;#深度学习技术与理论&quot; class=&quot;headerlink&quot; title=&quot;深度学习技术与理论&quot;&gt;&lt;/a&gt;深度学习技术与理论&lt;/h3&gt;&lt;p&gt;一、简答题(50 分)。&lt;br&gt; 1、Sigmoid, Tanh, Relu 这三个
      
    
    </summary>
    
    
    
      <category term="Deep Learning" scheme="https://github.com/liysky/liysky.github.io.git/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>git frequently used actions</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/05/27/git-frequently-used-actions/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/05/27/git-frequently-used-actions/</id>
    <published>2021-05-27T04:37:33.000Z</published>
    <updated>2021-09-07T15:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-记要"><a href="#git-记要" class="headerlink" title="git 记要"></a>git 记要</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210527110137668.png" alt="image-20210527110137668" style="zoom:50%;" /></p><h3 id="git-add-git-checkout"><a href="#git-add-git-checkout" class="headerlink" title="git add , git checkout"></a>git add , git checkout</h3><p>git add 后修改文件，可以再使用 git checkout 使得 work dir 返回到 stage 区的刚刚 git add 的状态</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210527110510521.png" alt="image-20210527110510521"></p><h3 id="保存-git-commit-m-’xxx’-git-commit-—amend"><a href="#保存-git-commit-m-’xxx’-git-commit-—amend" class="headerlink" title="保存 git commit -m ’xxx’ , git commit —amend"></a>保存 git commit -m ’xxx’ , git commit —amend</h3><p>将 stage 区文件提交到 history 区，进入history 后的修改将永远不会丢失。</p><h3 id="反悔之小悔-git-reset"><a href="#反悔之小悔-git-reset" class="headerlink" title="反悔之小悔 git reset"></a>反悔之小悔 git reset</h3><p>git reset a.txt 可以将已经使用 git add 命令将其添加到 stage 区的 a.txt 还原到 work dir。</p><h3 id="从-work-dir-区提交到-history区"><a href="#从-work-dir-区提交到-history区" class="headerlink" title="从 work dir 区提交到 history区"></a>从 work dir 区提交到 history区</h3><p>git add . 然后使用 git commit -m ‘xxxx’</p><p>简略写法：git commit -a</p><h3 id="反悔之大悔-git-checkout-HEAD"><a href="#反悔之大悔-git-checkout-HEAD" class="headerlink" title="反悔之大悔 git checkout HEAD ."></a>反悔之大悔 git checkout HEAD .</h3><p>使用 git checkout HEAD . 可以恢复文件到最初的未修改的状态。</p><p>如果想要恢复到任何一个状态，可以使用 git checkout hashvalue。</p><p>风险：<code>高风险</code>，这个操作会将 work dir 的数据恢复指定成为 commit 的样子，且会删除 stage 中的数据，无法恢复。</p><h3 id="合并多个-commit，git-reset-hashxxx"><a href="#合并多个-commit，git-reset-hashxxx" class="headerlink" title="合并多个 commit，git reset hashxxx"></a>合并多个 commit，git reset hashxxx</h3><p>如果有多个 commit，可以通过 git reset 来将它们合并为一个 commit 。</p><p>使用 git reset hashvaluexxx ，相当于 HEAD 移动到了某一个 commit，且不会修改 work dir 中的数据，所以只要再次 git add. 和 git commit 之后就相当于把之前的多个 commit 合并到了一个。</p><p>这样之后之前所有的 commit 都无法看到了，可以通过使用 <code>git reflog</code> 来查看之前所有的历史记录。</p><h3 id="将本地原有仓库添加到远程已有仓库时出现的问题"><a href="#将本地原有仓库添加到远程已有仓库时出现的问题" class="headerlink" title="将本地原有仓库添加到远程已有仓库时出现的问题"></a>将本地原有仓库添加到远程已有仓库时出现的问题</h3><p>如果本地和远程仓库有不相关的历史记录，无法合并，如：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210907002051867.png" alt="image-20210907002051867" style="zoom:67%;" /></p><p>可以使用：</p><p><code>git pull origin main --allow-unrelated-histories</code> 即，添加<code>--allow-unrelated-histories</code> 参数</p><ul><li><p>然后会自动进入 vim ，编辑完冲突部分，选择该留下哪些，再 <code>:wq</code> 保存</p></li><li><p>然后使用 <code>git add xxx</code> 添加修改文件，使用 <code>git commit xxx</code> 添加commit</p></li><li>再次使用 <code>git push -u origin main</code> 将本地仓库与远程仓库进行合并即可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-记要&quot;&gt;&lt;a href=&quot;#git-记要&quot; class=&quot;headerlink&quot; title=&quot;git 记要&quot;&gt;&lt;/a&gt;git 记要&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://jaximage-1253102271.cos.ap-beijing.m
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://github.com/liysky/liysky.github.io.git/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>OS-Learning: Linux Homebrew</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/05/12/OS-Learning-Linux-Homebrew/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/05/12/OS-Learning-Linux-Homebrew/</id>
    <published>2021-05-12T14:38:14.000Z</published>
    <updated>2021-06-13T13:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OS-Learning-Linux-Homebrew"><a href="#OS-Learning-Linux-Homebrew" class="headerlink" title="OS-Learning: Linux Homebrew"></a>OS-Learning: Linux Homebrew</h3><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>程序编译过程</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/f2b10135ed52436888a793327e4d5a4a.jpg" alt="img" style="zoom:50%;" /></p><p><code>gcc helloworld.c -E -o helloworld.i</code> 预处理：加入头文件，替换宏。</p><p><code>gcc helloworld.c -s -c helloworld.s</code> 编译：包含预处理，将 C 程序转换成汇编程序</p><p><code>gcc helloworld.c -c helloworld.o</code> 汇编：将汇编程序转换成可链接的二进制程序</p><p><code>gcc helloworld.c -o helloworld</code> 链接：包含了以上的所有操作，直接将可链接的二进制程序和其他别的库链接在一起，形成可执行的程序文件。</p><h3 id="PC-OS-引导流程"><a href="#PC-OS-引导流程" class="headerlink" title="PC OS 引导流程"></a>PC OS 引导流程</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/f2d31ab7144bf309761711efa9d6d4bd.jpg" alt="img"></p><ul><li><p>PC 机的 BIOS 固件是固化在 PC 机主板上的 ROM芯片中的，掉电也能保存</p></li><li><p>PC 机上电后的第一条指令就是 BIOS 固件中的，它负责 <strong>检测和初始化 CPU、内存以及主板平台</strong>，然后是夹在引导设备（大概率是硬盘）中的第一个扇区数据，到 0x7c00地址开始的内存空间，接着再跳转到 0x7c00处执行指令，这里为 GRUB 引导程序。</p></li><li>UEFI 模式与上有差异：www.uefi.org</li></ul><p><strong>初始汇编代码</strong></p><ul><li>定义 GRUB 多协议头，即一定格式的数据，兼容 GRUB1和GRUB2</li><li>关闭中断，设定 CPU 的工作模式</li><li>初始化 CPU 的寄存器和 C 语言的运行环境</li><li>GDT_START开始处，为 CPU 工作模式所需要的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">;彭东 @ 2021.01.09</span><br><span class="line">MBT_HDR_FLAGS EQU 0x00010003</span><br><span class="line">MBT_HDR_MAGIC EQU 0x1BADB002 ;多引导协议头魔数</span><br><span class="line">MBT_HDR2_MAGIC EQU 0xe85250d6 ;第二版多引导协议头魔数</span><br><span class="line">global _start ;导出_start符号</span><br><span class="line">extern main ;导入外部的main函数符号</span><br><span class="line">[section .start.text] ;定义.start.text代码节</span><br><span class="line">[bits 32] ;汇编成32位代码</span><br><span class="line">_start:</span><br><span class="line">jmp _entry</span><br><span class="line">ALIGN 8</span><br><span class="line">mbt_hdr:</span><br><span class="line">dd MBT_HDR_MAGIC</span><br><span class="line">dd MBT_HDR_FLAGS</span><br><span class="line">dd -(MBT_HDR_MAGIC+MBT_HDR_FLAGS)</span><br><span class="line">dd mbt_hdr</span><br><span class="line">dd _start</span><br><span class="line">dd 0</span><br><span class="line">dd 0</span><br><span class="line">dd _entry</span><br><span class="line">;以上是GRUB所需要的头</span><br><span class="line">ALIGN 8</span><br><span class="line">mbt2_hdr:</span><br><span class="line">DD MBT_HDR2_MAGIC</span><br><span class="line">DD 0</span><br><span class="line">DD mbt2_hdr_end - mbt2_hdr</span><br><span class="line">DD -(MBT_HDR2_MAGIC + 0 + (mbt2_hdr_end - mbt2_hdr))</span><br><span class="line">DW 2, 0</span><br><span class="line">DD 24</span><br><span class="line">DD mbt2_hdr</span><br><span class="line">DD _start</span><br><span class="line">DD 0</span><br><span class="line">DD 0</span><br><span class="line">DW 3, 0</span><br><span class="line">DD 12</span><br><span class="line">DD _entry</span><br><span class="line">DD 0</span><br><span class="line">DW 0, 0</span><br><span class="line">DD 8</span><br><span class="line">mbt2_hdr_end:</span><br><span class="line">;以上是GRUB2所需要的头</span><br><span class="line">;包含两个头是为了同时兼容GRUB、GRUB2</span><br><span class="line">ALIGN 8</span><br><span class="line">_entry:</span><br><span class="line">;关中断</span><br><span class="line">cli</span><br><span class="line">;关不可屏蔽中断</span><br><span class="line">in al, 0x70</span><br><span class="line">or al, 0x80</span><br><span class="line">out 0x70,al</span><br><span class="line">;重新加载GDT</span><br><span class="line">lgdt [GDT_PTR]</span><br><span class="line">jmp dword 0x8 :_32bits_mode</span><br><span class="line">_32bits_mode:</span><br><span class="line">;下面初始化C语言可能会用到的寄存器</span><br><span class="line">mov ax, 0x10</span><br><span class="line">mov ds, ax</span><br><span class="line">mov ss, ax</span><br><span class="line">mov es, ax</span><br><span class="line">mov fs, ax</span><br><span class="line">mov gs, ax</span><br><span class="line">xor eax,eax</span><br><span class="line">xor ebx,ebx</span><br><span class="line">xor ecx,ecx</span><br><span class="line">xor edx,edx</span><br><span class="line">xor edi,edi</span><br><span class="line">xor esi,esi</span><br><span class="line">xor ebp,ebp</span><br><span class="line">xor esp,esp</span><br><span class="line">;初始化栈，C语言需要栈才能工作</span><br><span class="line">mov esp,0x9000</span><br><span class="line">;调用C语言函数main</span><br><span class="line">;这里是调用了外部的 C 语言的 main 函数</span><br><span class="line">call main</span><br><span class="line">;让CPU停止执行指令</span><br><span class="line">halt_step:</span><br><span class="line">halt</span><br><span class="line">jmp halt_step</span><br><span class="line">GDT_START:</span><br><span class="line">knull_dsc: dq 0</span><br><span class="line">kcode_dsc: dq 0x00cf9e000000ffff</span><br><span class="line">kdata_dsc: dq 0x00cf92000000ffff</span><br><span class="line">k16cd_dsc: dq 0x00009e000000ffff</span><br><span class="line">k16da_dsc: dq 0x000092000000ffff</span><br><span class="line">GDT_END:</span><br><span class="line">GDT_PTR:</span><br><span class="line">GDTLEN dw GDT_END-GDT_START-1</span><br><span class="line">GDTBASE dd GDT_START</span><br></pre></td></tr></table></figure><p>main 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello OS!"</span>); <span class="comment">//这里的 printf 也是需要自己实现的</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制计算机的屏幕"><a href="#控制计算机的屏幕" class="headerlink" title="控制计算机的屏幕"></a>控制计算机的屏幕</h3><p>调用函数将我们想要现实的字符串里的每个字符依次写入到 0xb8000 地址开始的显存中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//彭东 @ 2021.01.09</span></span><br><span class="line"><span class="keyword">void</span> _strwrite(<span class="keyword">char</span>* <span class="built_in">string</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span>* p_strdst = (<span class="keyword">char</span>*)(<span class="number">0xb8000</span>);<span class="comment">//指向显存的开始地址</span></span><br><span class="line">  <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    *p_strdst = *<span class="built_in">string</span>++;</span><br><span class="line">    p_strdst += <span class="number">2</span>; <span class="comment">//+2 是为了跳过字符的颜色信息的空间</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span>* fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _strwrite(fmt);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>make 工具</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CC = gcc #定义一个宏CC 等于gcc</span><br><span class="line">CFLAGS = -c #定义一个宏 CFLAGS 等于-c</span><br><span class="line">OBJS_FILE = file.c file1.c file2.c file3.c file4.c #定义一个宏</span><br><span class="line">.PHONY : all everything #定义两个伪目标all、everything</span><br><span class="line">all:everything #伪目标all依赖于伪目标everything</span><br><span class="line">everything :$( OBJS_FILE) #伪目标everything依赖于OBJS_FILE，而OBJS_FILE是宏会被</span><br><span class="line">#替换成file.c file1.c file2.c file3.c file4.c</span><br><span class="line">%.o : %.c</span><br><span class="line">$(CC) $(CFLAGS) -o $@ $&lt;</span><br></pre></td></tr></table></figure><ul><li><p>.PHONY 在 makefile 中表示定义伪目标。所谓伪目标，就是它不代表一个真正的文件名，在执行 make 时可以指定这个目标来执行其所在规则定义的命令。但是伪目标可以依赖于另一个伪目标或者文件，例如：all 依赖于 everything，everything 最终依赖于 file.c file1.c file2.c file3.c file4.c。</p></li><li><p>针对这些依赖关系，分别会执行：$(CC) $(CFLAGS) -o $@ $&lt; 命令，当然最终会转换为：gcc –c –o xxxx.o xxxx.c，这里的“xxxx”表示一个具体的文件名。</p></li></ul><h3 id="Hello-OS-整个编译过程"><a href="#Hello-OS-整个编译过程" class="headerlink" title="Hello OS  整个编译过程"></a>Hello OS  整个编译过程</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/cbd634cd5256e372bcbebd4b95f21b34.jpg" alt="img" style="zoom:50%;" /></p><p>安装 Hello OS</p><ul><li><p>经过上述流程将会得到 Hello OS.bin 文件</p></li><li><p>设置 GRUB 找到 bin 文件</p></li><li><p>GRUB 启动时会加载 grub.cfg 文件，设置启动项：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">menuentry 'HelloOS' &#123;</span><br><span class="line">     insmod part_msdos #GRUB加载分区模块识别分区</span><br><span class="line">     insmod ext2 #GRUB加载ext文件系统模块识别ext文件系统</span><br><span class="line">     set root='hd0,msdos4' #注意boot目录挂载的分区，这是我机器上的情况</span><br><span class="line">     multiboot2 /boot/HelloOS.bin #GRUB以multiboot2协议加载，如果挂载点是 /boot 的话，需要省略掉/boot 然后挂载 HelloOS.bin</span><br><span class="line">     boot #GRUB启动HelloOS.bin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Linux 系统下可以通过 df 来看 /boot目录挂载的分区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件系统          <span class="number">1</span>K-块    已用     可用      已用% 挂载点</span><br><span class="line">/dev/sda4      <span class="number">48752308</span> <span class="number">8087584</span> <span class="number">38158536</span>   <span class="number">18</span>%    /</span><br></pre></td></tr></table></figure><p>“sda4”就是硬盘的第四个分区，但是 GRUB 的 menuentry 中不能写 sda4，而是要写“hd0,msdos4”，这是 GRUB 的命名方式，hd0 表示第一块硬盘，结合起来就是第一块硬盘的第四个分区</p></li></ul><h2 id="设计蓝图"><a href="#设计蓝图" class="headerlink" title="设计蓝图"></a>设计蓝图</h2><h3 id="内核逻辑"><a href="#内核逻辑" class="headerlink" title="内核逻辑"></a>内核逻辑</h3><ul><li><strong>管理 CPU</strong>，由于 CPU 是执行程序的，内核把运行时的程序抽象成进程，所以又称之为进程管理。</li><li><strong>管理内存</strong>，内核进行对于内存的分配和释放</li><li><strong>管理硬盘</strong>， 内核把用户数据抽象成文件，即文件管理，方便用户进行查找和读写，所以形成了文件系统。</li><li><strong>管理显卡</strong>， 对于 GUI的支持，对显卡的管理成为内核中的图形系统。</li><li><p><strong>管理 I/O 设备</strong>，对于数据输出设备的 I/O 管理器。</p></li><li><p><strong>管理硬件的驱动程序</strong>，内核想要管理和控制不同的硬件，需要对应的代码，即驱动程序。</p></li></ul><h3 id="宏内核结构"><a href="#宏内核结构" class="headerlink" title="宏内核结构"></a>宏内核结构</h3><p>宏内核就是把以上诸如管理进程的代码、管理内存的代码、管理各种 I/O 设备的代码、文件系统的代码、图形系统代码以及其它功能模块的代码，把这些所有的代码经过编译，最后链接在一起，形成一个大的可执行程序。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/eb8e9487475f960dccda0fd939999b6b.jpg" alt="img" style="zoom:50%;" /></p><h3 id="微内核结构"><a href="#微内核结构" class="headerlink" title="微内核结构"></a>微内核结构</h3><p>内核功能尽可能少：仅仅只有进程调度、处理中断、内存空间映射、进程间通信等功能。</p><p>这样的内核是不能完成什么实际功能的，开发者们把实际的进程管理、内存管理、设备管理、文件管理等服务功能，做成一个个服务进程。和用户应用进程一样，只是它们很特殊，宏内核提供的功能，在微内核架构里由这些服务进程专门负责完成。</p><p>微内核定义了一种良好的进程间通信的机制——消息。应用程序要请求相关服务，就向微内核发送一条与此服务对应的消息，微内核再把这条消息转发给相关的服务进程，接着服务进程会完成相关的服务。服务进程的编程模型就是循环处理来自其它进程的消息，完成相关的服务功能。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/4b190d617206379ee6cd77fcea231c64.jpg" alt="img" style="zoom:50%;" /></p><h3 id="内核的三个大层"><a href="#内核的三个大层" class="headerlink" title="内核的三个大层"></a>内核的三个大层</h3><ul><li><p>内核接口层</p><p>定义一套 UNIX 接口的子集。</p><p>检查接口的参数是否合法，出错返回错误信息。</p></li><li><p>内核功能层</p><p>完成各种实际功能，如进程管理，内存管理，中断管理，设备管理。</p></li><li><p>内核硬件层</p><p>硬件初始化，加载内存中最先需要运行的代码，如CPU、内存、中断等的控制。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/6cf68bebe4f114f00f848d1d5679d33c.jpg" alt="img" style="zoom:50%;" /></p></li></ul><h2 id="Linux-内核"><a href="#Linux-内核" class="headerlink" title="Linux 内核"></a>Linux 内核</h2><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/92ec3d008c77bb66a148772d3c5ea9cb.png" alt="img"></p><p>Linux 是宏内核架构。</p><h2 id="Darwin-XNU-内核"><a href="#Darwin-XNU-内核" class="headerlink" title="Darwin-XNU 内核"></a>Darwin-XNU 内核</h2><p>Darwin 是由苹果公司在 2000 年开发的一个开源代码的操作系统。</p><p>Darwin mac OS 和 iOS 操作系统的核心。</p><p>Darwin 使用了一种微内核（Mach）和响应的固件来支持不同的处理器平台，并提供操作系统原始的基础服务，上册功能性系统服务和工具则是整合了 BSD 系统所提供的。苹果公司为其开发了大量的库、框架和服务，但它们都工作在用户态且闭源。</p><p><strong>Darwin 架构：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/5e9bd6dd86fba5482fab14b6b292aa8d.jpg" alt="img" style="zoom:50%;" /></p><p>内核层为用户转换层以下的部分，它有两个内核层——Mach 层与 BSD 层。</p><p>Mach 内核（微内核）是卡耐基梅隆大学开发的经典微内核，意在提供最基本的操作系统服务。</p><p>Mach 提供简单的进程、线程、IPC通信、虚拟内存设备驱动相关的功能服务。</p><p>BSD 则是伯克利大学开发的类 UNIX 操作系统，提供一整套操作系统服务，它们工作在用户态且闭源。</p><p>BSD 提供强大的安全特性，完善的网络服务，各种文件系统的支持，同时对 Mach 的进程、线程、IPC 、虚拟内核组建进行细化、拓展延伸。</p><p><strong>应用 Darwin 系统的服务</strong></p><p>在调用 Darwin 系统 API 时，会传入一个API 号码，此号码用以索引 Mach 陷入中断服务表中的函数，若 API 号码小于0，则表明请求 Mach 内核服务，API 若大于0，表明请求 BSD 内核服务。</p><p>Mach 中还有一个重要组建 Libkern，一个库文件，提供了底层的操作函数，同时支持 C++ 运行环境。</p><h3 id="Windows-NT-内核"><a href="#Windows-NT-内核" class="headerlink" title="Windows NT 内核"></a>Windows NT 内核</h3><p>微软基于 MS- DOS 内核实现了 windows 3.1、windows 95/98/ME ，不稳定，容易死机。</p><p>WIndows NT 为1993年微软推出的面形工作站、网络服务器和大型计算机的网络操作系统，也可作为 PC 操作系统。 NT 为 New Technology。</p><p>普通用户第一次接触基于 NT 内核的是 Windows 2000，存在对于用户的硬件和应用程序的兼容性的问题。</p><p>随着硬件厂商和应用厂商对于程序的升级，这个兼容性的问题被缓解了，此后的 Windows XP 取得了巨大的成功。</p><p><strong>Windows NT 内核：</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/c547b6252736375fcdb1456e6dfaa3c9.jpg" alt="img"></p><p>微软自己在 HAL 层上是定义了一个小内核，小内核之下是硬件抽象层 HAL，这个 HAL 存在的好处是：不同的硬件平台只要提供对应的 HAL 就可以移植系统了。小内核之上是各种内核组件，微软称之为内核执行体，它们完成进程、内存、配置、I/O 文件缓存、电源与即插即用、安全等相关的服务。</p><p>每个执行体互相独立，只对外提供相应的接口，其它执行体要通过内核模式可调用接口和其它执行体通信或者请求其完成相应的功能服务。</p><p>设备驱动和文件系统由 I/O 管理器统一管理，驱动程序可以堆叠形成 I/O驱动栈，功能请求被封装成 I/O包，在栈中一层层流动处理。</p><p>Windows 引以为傲的图形子系统也在内核中。</p><p>NT 内核中各层次分明，各个执行体相互独立，“高内聚，低耦合”。</p><p>Linux 性能良好，结构异常复杂，不利于问题的排查和功能的拓展，而 Darwin- XNU 和 Windows 结构良好，层面分明，利于功能拓展，不容易产生问题且性能稳定。</p><p>Windows NT 为混合内核。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="CPU-工作模式"><a href="#CPU-工作模式" class="headerlink" title="CPU 工作模式"></a>CPU 工作模式</h3><p>CPU 的工作模式有<strong>实模式、保护模式、长模式</strong>。</p><p><strong>实模式</strong></p><p>又称地址模式，<strong>一方面是运行真正的指令，对指令的动作不作区分，直接执行指令的真实功能，另一方面是发往内存的地址是真实的，对任何地址不加限制地发往内存。</strong></p><p><strong>实模式寄存器</strong></p><p>x86 CPU 在实模式下的寄存器。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/f837811192730cc9c152afbcccf4eff8.jpeg" alt="img" style="zoom:50%;" /></p><p><strong>实模式下访问内存</strong></p><p>通常情况下，需要把数据装载进寄存器中才能操作，还要获取指令的动作，这些操作都需要访问内存，而访问内存靠的是地址值。而地址值的计算方法：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/14633ea933972e19f3439eb6aeab3d13.jpg" alt="img" style="zoom:50%;" /></p><p>所有的内存地址都是由段寄存器左移 4 位，再加上一个通用寄存器中的值或者常数形成地址，然后由这个地址去访问内存。这就是大名鼎鼎的分段内存管理模型。</p><p><strong>实模式中断</strong></p><p>中断即终止执行当前程序，转而跳转到另一个特定的地址上，去运行特定的代码。在实模式下它的实现过程是先保存 CS 和 IP寄存器，然后装载新的 CS 和 IP 寄存器。</p><p>中断的产生：</p><ul><li><p>硬件中断：中断控制器 CPU 发送一个电子信号，CPU 会对这个信号作出应答，随后中断控制器会将中断号发送给 CPU 。</p></li><li><p>软件中断，INT 指令中断：CPU 执行一个 INT 指令，这个指令后面会跟随一个常数，这个常数即为软中断号。</p></li></ul><p>实现中断，需要内存中的一个中断向量表，表地址和长度由 CPU 特定寄存器 IDTR 指向，实模式下，表中的一个条目由代码地址和段内偏移组成：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/e8876e8561b949b8af5d5237e48f8757.jpg" alt="img" style="zoom:50%;" /></p><p>有了中断号以后， CPU 就能根据 IDTR 寄存器中的信息，计算出中断向量中的条目，进而装载 CS（装入代码段基地址）、IP（装入代码段内偏移）寄存器，最终响应中断。</p><p><strong>保护模式</strong></p><p>由于 CPU 的特性，CPU 对任何指令不加区分地执行；CPU 对访问内存的地址不加限制。</p><p>随多道程序的出现，内存需求量的不断增加，CPU 实现了保护模式以支持需求的增加。</p><p>保护模式包含特权级，对指令及其访问的资源进行控制，对内存段与段之间的访问进行严格检查，没有权限的绝不放行，对中断的响应也要进行严格的权限检查，扩展了 CPU 寄存器位宽，使之能够寻址 32 位的内存地址空间和处理 32 位的数据，从而 CPU 的性能大大提高。</p><p><strong>长模式</strong></p><p>长模式又名 AMD64，因为这个标准是 AMD 公司最早定义的，它使 CPU 在现有的基础上有了 64 位的处理能力，既能完成 64 位的数据运算，也能寻址 64 位的地址空间。这在大型计算机上犹为重要，因为它们的物理内存通常有几百 GB。</p><p>长模式 <strong>弱化段模式管理</strong>，只保留了权限级别的检查，忽略了段基址和段长度，而地址的检查则交给了 MMU。</p><h3 id="程序中的地址如何转换"><a href="#程序中的地址如何转换" class="headerlink" title="程序中的地址如何转换"></a>程序中的地址如何转换</h3><p>内存相关的这几个核心问题：</p><ol><li>谁来保证程序 A 跟程序 B 没有内存地址的冲突？换句话说，就是程序 A、B 各自放在什么内存地址，这个问题是由 A、B 程序协商，还是由操作系统决定。2. 怎样保证程序 A 跟程序 B 不会互相读写各自的内存空间？这个问题相对简单，用保护模式就能解决。3. 如何解决内存容量问题？程序 A 和程序 B，在不断开发迭代中程序代码占用的空间会越来越大，导致内存装不下。4. 还要考虑一个扩展后的复杂情况，如果不只程序 A、B，还可能有程序 C、D、E、F、G……它们分别由不同的公司开发，而每台计算机的内存容量不同。这时候，又对我们的内存方案有怎样的影响呢？要想完美地解决以上最核心的 4 个问题，一个较好的方案是：让所有的程序都各自享有一个从 0 开始到最大地址的空间，这个地址空间是独立的，是该程序私有的，其它程序既看不到，也不能访问该地址空间，这个地址空间和其它程序无关，和具体的计算机也无关。</li></ol><p><strong>虚拟地址</strong></p><p>虚拟地址是逻辑上存在的一个数据值。Hello World 的例子：使用 objdump 工具反汇编为二进制文件会得到如下代码片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">00000000000004e8 &lt;_init&gt;:</span><br><span class="line"> 4e8:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line"> 4ec:  48 8b 05 f5 0a 20 00   mov    0x200af5(%rip),%rax        # 200fe8 &lt;__gmon_start__&gt;</span><br><span class="line"> 4f3:  48 85 c0               test   %rax,%rax</span><br><span class="line"> 4f6:  74 02                  je     4fa &lt;_init+0x12&gt;</span><br><span class="line"> 4f8:  ff d0                  callq  *%rax</span><br><span class="line"> 4fa:  48 83 c4 08            add    $0x8,%rsp</span><br><span class="line"> 4fe:  c3                     retq</span><br></pre></td></tr></table></figure><p>第三列中的 mov 0x200af5… 指令中的数据就是虚拟地址。</p><p>所有应用程序的开始部分都是如上这样的，因为每个应用程序的虚拟地址空间都是相同且独立的。</p><p>这个地址的产生是由链接器产生的，软件开发经过编译步骤后，就需要链接成可执行文件才可以运行，而链接器的主要工作就是把多个代码模块组装到一起，解决模块之间的应用，即处理程序代码间的地址引用，形成程序运行的静态内存空间视图。</p><p>上述的地址是虚拟而统一的，根据操作系统的不同，这个虚拟地址空间的定义可能不同，应用软件开发人员无需关心，由开发工具链给自动处理。</p><p><strong>物理地址</strong></p><p>虚拟地址只是逻辑上存在的地址，无法用于硬件电路，程序装进内存中想要执行就需要和内存打交道，从内存中取得指令和数据，而内存只认一种地址，即物理地址。</p><p>物理地址在即地址总线上的信号，无力地址在逻辑上也是一个数据，只是这个数据会被地址译码器等电子器件变成电子信号，放在地址总线上，地址总线电子信号的各种组合就可以选择到内存的存储单元。</p><p><strong>虚拟地址到物理地址的转换</strong></p><p>虚拟地址必须转换成物理地址，这样程序才能正常执行。即，输入虚拟地址，输出物理地址。</p><p>软件的方式太低效，单纯的硬件实现没有灵活性，最终通过软硬件结合的方式进行实现，它就是 MMU（内存管理单元）。MMU 可以接受软件给出的地址对应关系数据，进行地址转换。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/d582ff647549b8yy986d90e697d33499.jpg" alt="img" style="zoom:50%;" /></p><p>MMU 通过地址关系转换表，将 0x80000~0x84000 的虚拟地址空间转换成 0x10000~0x14000 的物理地址空间，而地址关系转换表本身则是放物理内存中的。问题来了，32 位地址空间下，4GB 虚拟地址的地址关系转换表就会把整个 32 位物理地址空间用完，这显然不行。</p><p>保护模式下分段方式，地址关系转换表中存放：一个虚拟段基址对应一个物理段基址，这样看似可以，但是因为段长度各不相同，所以依然不可取。</p><p>系统设计者最后采用一个折中的方案，即把虚拟地址空间和物理地址空间都分成同等大小的块，也称为页，按照虚拟页和物理页进行转换。根据软件配置不同，这个页的大小可以设置为 4KB、2MB、4MB、1GB，这样就进入了现代内存管理模式——分页模型。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/9b19677448ee973c4f3yya6b3af7b4d0.jpg" alt="img" style="zoom: 50%;" /></p><p>一个虚拟页可以对应到一个物理页，由于页大小一经配置就是固定的，所以在地址关系转换表中，<strong>只要存放虚拟页地址对应的物理页地址</strong>就行了。</p><p><strong>MMU</strong></p><p>MMU 即内存管理单元，使用硬件电路逻辑实现的一个地址转换器件。它负责接收虚拟地址和地址关系转换表，以及输出物理地址。</p><p>根据实现方式的不同，MMU 可以是独立的芯片，也可以是集成在其它芯片内部的，比如集成在 CPU 内部，x86、ARM 系列的 CPU 就是将 MMU 集成在 CPU 核心中的。</p><p>SUN 公司的 CPU 将独立的 MMU芯片卡在总线上。x86 CPU 要想开启 MMU，就必须先开启保护模式或者长模式，实模式下是不能开启 MMU 的。</p><p>由于保护模式的内存模型是分段模型，它不适合于MMU的分页模型，要使用保护模式的平坦模式，这样就绕过了分段模型。平潭模型和长模式下忽略段基址和段长度是异曲同工的。</p><p>CPU 地址转换图：<br><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/b41a2bb00e19e662b34a1b7b7c0ae288.jpg" alt="img"></p><p>程序代码中的虚拟地址经过 CPU 的分段机制产生了线性地址，平坦模式和长模式下线性地址和虚拟地址是相等的。</p><p>如果不开启 MMU，在保护模式下可以关闭 MMU，这个线性地址就是物理地址。因为长模式下的分段 <strong>弱化了地址空间的隔离</strong>，所以开启 MMU 是必须要做的，开启 MMU 才能访问内存地址空间。</p><p><strong>MMU页表</strong></p><p>地址关系转换表有一个更加专业的名字——页表，它描述了虚拟地址到物理地址的转换关系，可以说是虚拟页到物理页的映射关系。</p><p>为了增加灵活性和节约物理内存空间（因为页表是放在物理内存中的），所以页表中并不存放虚拟地址和物理地址的对应关系，只存放物理页面的地址，MMU 以虚拟地址为索引去查表返回物理页面地址，而且页表是分级的，总体分为三个部分：一个顶级页目录，多个中级页目录，最后才是页表，逻辑结构图如下.</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/2df904c8ba75065e1491138d63820yyf.jpg" alt="img"></p><p>虚拟地址被分成从左到右四个位段：</p><p>第一位索引顶级目录中的一项  ——&gt; 中级页目录，第二位段去索引中页级目录中的一项 ——&gt; 一个页目录，第三个位段去索引页目录中的项 ——&gt; 物理页地址，最后用第四位段作该物理页内的偏移去访问物理内存。</p><p><strong>保护模式下的分页</strong></p><p>分页模式的灵活性、通用性、安全性是现代操作系统内存管理的基石，更是事实上的标准内存管理模型，现代商用操作系统必须都以此为基础实现虚拟内存功能模块。</p><p><strong>保护模式下的分页</strong></p><p>保护模式下只有32位地址空间，最多4GB - 1 大小的空间。</p><p>保护模式下的分页大小通常有两种，一种是 4KB 大小的页，一种是 4MB 大小的页。分页大小的不同会导致虚拟地址位段的分隔和页目录的层级不同，但虚拟页和物理页的大小始终是相同的。</p><p><strong>保护模式下的分页 —— 4KB 页</strong></p><p>该分页方式下，32 位虚拟地址被分为三个位段：<strong>页目录索引、页表索引、页内偏移</strong>，只有一级页目录，其中包含 1024 个条目 ，每个条目指向一个页表，每个页表中有 1024 个条目。其中一个条目就指向一个物理页，每个物理页 4KB。这正好是 4GB 地址空间。如下图所示。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/00b7f1ef4a1c4f6fc9e6b69109ae0bf8.jpg" alt="img"></p><p>CR3 为 CPU 的一个32位寄存器，MMU 就是根据这个寄存器找到页目录。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/361c48e1876a412f9ff9f29bf2dbecc9.jpg" alt="img"></p><p>页目录项、页表项都是4字节32位，1024项正好是4KB（一个页），因此它们的地址始终都是4KB对齐的，所以低12位才可以另作他用，形成页面的相关属性，如是否存在、是否可读可写、是用户页还是内核页、是否已写入、是否已访问等。</p><p><strong>保护模式下的分页——4MB页</strong></p><p>该分页方式下，32 位虚拟地址被分为两个位段：页表索引、页内偏移，只有一级页目录，其中包含 1024 个条目。其中一个条目指向一个物理页，每个物理页 4MB，正好为 4GB 地址空间，如下图所示。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/76932c52a7b6109854f2de72d71bba52.jpg" alt="img"></p><p>CR3 32位寄存器，不再只想顶级页目录，而是指向一个4KB大小的页表，这个页表依然要4KB地址对齐，其中包含1024个页表项：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/9a4afdc60b790c3e2b7e94b0c7fd4208.jpg" alt="img"></p><p>4MB 大小的页面下，页表项还是 4 字节 32 位，但只需要用高 10 位来保存物理页面的基地址就可以。因为每个物理页面都是 4MB，所以低 22 位始终为 0，为了兼容 4MB 页表项低 8 位和 4KB 页表项一样，只不过第 7 位变成了 PS 位，且必须为 1，而 PAT 位移到了 12 位。</p><p><strong>长模式下的分页</strong></p><p>如果开启长模式，则必须开启分页模式，因为长模式弱化了分页模式，而分段模型也有很多不足，不适应现在操作系统和应用软件的发展。<br>同时，长模式也拓展了 CPU 的位宽，使得 CPU 能使用64位的超大内存地址空间。所以长模式下的虚拟地址必须等于线性地址且为64位。<br>长模式下的分页通常也有两种，4KB大小的页和2MB大小的页。</p><p><strong>长模式下的分页——4KB</strong></p><p>该分页方式下，64位虚拟地址被分为6个位段，分别是：保留位段，顶级页目录索引、页目录指针索引、页目录索引、页表索引、页内便宜、顶级页目录、页目录指针、页目录、页表各占有4KB大小，其中各有512个条目，每个条目8字节，64位大小。<br><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/ecdea93c2544cf9c1d84461b602b03c9.jpg" alt="img"></p><p>CR3 变为64 位的64位的CPU寄存器，它指向一个顶级页目录，里面的顶级页目录项指向目录指针，依次类推。<br>需要注意的是，虚拟地址 48 到 63 这 16 位是根据第 47 位来决定的，47 位为 1，它们就为 1，反之为 0，这是因为 x86 CPU 并没有实现全 64 位的地址总线，而是只实现了 48 位，但是 CPU 的寄存器却是 64 位的。<br>这种最高有效位填充的方式，即使后面拓展CPU的地址总线也不会有任何影响。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/e342246f5cfa21c5b5173b9e494bdc55.jpg" alt="img"></p><p>长模式下的4KB分页下，由一个顶层目录、二级中间层目录和一层页表组成了 64 位地址翻译过程。</p><p><strong>长模式下的分页——2MB</strong><br>在这种分页方式下，64 位虚拟地址被分为 5 个位段 ：保留位段、顶级页目录索引、页目录指针索引、页目录索引，页内偏移，顶级页目录、页目录指针、页目录各占有 4KB 大小，其中各有 512 个条目，每个条目 8 字节 64 位大小。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/68bf70d8bcae7802e5291140ac1ec6ea.jpg" alt="img"></p><p>长模式下 2MB 和 4KB 分页的区别是，2MB 分页下是页目录项直接指向了 2MB 大小的物理页面，放弃了页表项，然后把虚拟地址的低 21 位作为页内偏移，21 位正好索引 2MB 大小的地址空间。<br>2MB 分页模式下的 CR3、顶级页目录项、页目录指针项、页目录项的格式，格式如下图：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/457f6965d0f25bf64bfb9ec698ab7e0b.jpg" alt="img"></p><p>上图中没有了页表项，取而代之的是，页目录项中直接存放了 2MB 物理页基地址。由于物理页始终 2MB 对齐，所以其地址的低 21 位为 0，用于存放页面属性位。</p><p><strong>开启MMU</strong><br>要使用分页模式就必须先开启MMU，但开启MMU的前提是CPU进入保护模式或者长模式，开启CPU这两种模式的方法：</p><ul><li><p>使 CPU 进入保护模式或者长模式</p></li><li><p>准备好页表数据，这包含顶级页目录，中间层页目录，页表，物理内存中会生成这些数据</p></li><li><p>顶级页目录的物理内存地址赋值给 CR3 寄存器</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax, PAGE_TLB_BADR ;页表物理地址</span><br><span class="line">mov cr3, eax</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置 CPU 的 CR0 的 PE 为 1 即可开启 MMU</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">;开启 保护模式和分页模式</span><br><span class="line">mov eax, cr0</span><br><span class="line">bts eax, <span class="number">0</span>    ;CR0.PE =<span class="number">1</span></span><br><span class="line">bts eax, <span class="number">31</span>   ;CR0.P = <span class="number">1</span></span><br><span class="line">mov cr0, eax</span><br></pre></td></tr></table></figure></li></ul><p><strong>MMU地址转换失败</strong></p><p>MMU 主要功能即根据页表数据把虚拟地址转换为物理地址，失败的情况：页表项中的数据为空，用户程序访问了超级管理者的页面，向只读页面中写入了数据，这些都会导致 MMU 地址转换失败。</p><p>MMU 地址转换失败的操作：</p><ul><li>MMU 停止转换地址</li><li>MMU 把转换失败的虚拟地址写入 CPU 的 CR2 寄存器</li><li>MMU 触发 CPU 的14号中断，使 CPU 停止执行当前指令</li><li>CPU 开始执行14号中断的处理代码，代码会检查原因，处理好页表数据返回</li><li>CPU 中断返回继续执行 MMU 地址转换失败时的指令</li></ul><p><strong>总结</strong></p><p>多道程序同时运行有很多问题，内存需要隔离和保护，从而提出了虚拟地址与物理地址分离，让应用程序从实际物理内存中解耦出来。</p><p>MMU（内存管理单元），增加了转换的灵活性，实现方式是硬件执行转换过程，但又依赖于软件提供的地址转换表。</p><p><strong>操作系统是如何对应用程序的地址空间进行隔离的？</strong></p><p>多个进程隔离应该是操作系统进行任务切换时会改写CPU的页表基地址寄存器为当前被运行进程的页表基地址。对于每个进程而言，它会误认为（被操作系统欺骗）自己独有占用的地址空间，因此它访问地址是不会考虑任何问题的，但这个地址是虚拟地址，待被 MMU 翻译后会得到对应的页表，而这个页表由操作系统管理，不同的进程拥有不同的页表，因此产生了进程地址空间隔离，但是多个进程也是可以共享某个页表，这也是进程通信（IPC）的根本手段。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;OS-Learning-Linux-Homebrew&quot;&gt;&lt;a href=&quot;#OS-Learning-Linux-Homebrew&quot; class=&quot;headerlink&quot; title=&quot;OS-Learning: Linux Homebrew&quot;&gt;&lt;/a&gt;OS-Lear
      
    
    </summary>
    
    
    
      <category term="OS-Linux" scheme="https://github.com/liysky/liysky.github.io.git/tags/OS-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Programming Analysis</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/05/11/Dynamic-Programming-Analysis/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/05/11/Dynamic-Programming-Analysis/</id>
    <published>2021-05-11T15:17:32.000Z</published>
    <updated>2021-05-11T15:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dynamic-Programming-Analysis"><a href="#Dynamic-Programming-Analysis" class="headerlink" title="Dynamic Programming Analysis"></a>Dynamic Programming Analysis</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/DP.png" alt="DP"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dynamic-Programming-Analysis&quot;&gt;&lt;a href=&quot;#Dynamic-Programming-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Programming Analysis&quot;&gt;&lt;/a&gt;Dy
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CUDA coding</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/04/24/CUDA-coding/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/04/24/CUDA-coding/</id>
    <published>2021-04-24T11:27:56.000Z</published>
    <updated>2021-04-30T15:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUDA-编程"><a href="#CUDA-编程" class="headerlink" title="CUDA 编程"></a>CUDA 编程</h1><h2 id="现代-CPU-架构和性能优化"><a href="#现代-CPU-架构和性能优化" class="headerlink" title="现代 CPU 架构和性能优化"></a>现代 CPU 架构和性能优化</h2><h3 id="CPU的概念："><a href="#CPU的概念：" class="headerlink" title="CPU的概念："></a>CPU的概念：</h3><ul><li><p>执行指令，处理数据的器件——完成基本的逻辑和算术指令</p></li><li><p>增加了复杂的接口</p><ul><li>内存接口</li><li>外部设备接口</li></ul></li><li>包含大量静晶体管</li></ul><h3 id="桌面应用"><a href="#桌面应用" class="headerlink" title="桌面应用"></a>桌面应用</h3><ul><li>轻量级进程，少量线程</li><li>分之和交互操作</li><li>大量存储器访问</li><li>用于数值运算的指令很少</li></ul><h3 id="CPU结构图"><a href="#CPU结构图" class="headerlink" title="CPU结构图"></a>CPU结构图</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/01g5HiwPZLWQ.jpeg" alt="enter image description here"></p><p>取指 译码 执行 访问 写回</p><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><ul><li>利用指令级的并行<ul><li>极大的减小时钟周期</li><li>但是增加了延迟和芯片面积</li></ul></li></ul><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>猜测下一条指令</p><p>基于过去的分支记录</p><p>如：基于全局记录的两层预测</p><p>现代预测器准确度大于 90%</p><ul><li>提升性能以及能量效率</li></ul><p>但是会导致面积增加和延迟</p><hr><p>提升 IPC （instructions cycle）即 CPU 一个时钟周期能够处理的指令数</p><p>为了处理更多的数据—&gt; 提出了超标量 — 增加流水线宽度</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-04-25%20at%2006.19.27.png" alt="Screen Shot 2021-04-25 at 06.19.27"></p><hr><h3 id="超标量"><a href="#超标量" class="headerlink" title="超标量"></a>超标量</h3><p>峰值 IPC 为N（N路超标量）</p><p>Peak IPC now at N( for N-way superscalar)</p><ul><li><p>分支调度会产生开销</p></li><li><p>需要一些技巧来逼近峰值</p></li></ul><p>增加了面积</p><p>Area increase</p><ul><li>N 倍资源使用</li><li>旁路网络</li><li>需要更多的寄存器的存储器宽度</li></ul><h3 id="乱序执行-Out-of-Order-—-OoO"><a href="#乱序执行-Out-of-Order-—-OoO" class="headerlink" title="乱序执行 Out-of-Order — OoO"></a>乱序执行 Out-of-Order — OoO</h3><p>重排指令，获得最大的吞吐量</p><p>重排缓冲区</p><p>发射队列/调度器</p><p>使得 IPC 接近理想状态</p><ul><li>但使得面积增加、功耗增加</li></ul><h3 id="存储器架构-层次"><a href="#存储器架构-层次" class="headerlink" title="存储器架构/层次"></a>存储器架构/层次</h3><p>存储器越大越慢</p><p>缓存：</p><ul><li>将数据放在尽可能接近的位置</li><li>利用<ul><li>时间临近性：刚刚使用过的数据很可能会被再次使用</li><li>空间临近性：倾向于使用周围临近的数据</li></ul></li><li>对于L1, L2, L3级别的缓存，其级别越小容量越小，速度越快</li></ul><p>分区：</p><ul><li>避免多端口</li></ul><p>一致性</p><p>控制器：</p><ul><li>多个通道，增加带宽</li></ul><p>CPU内部的并行性</p><ul><li>指令级并行<ul><li>超标量</li><li>乱序之行</li></ul></li><li>数据级并行<ul><li>矢量计算</li></ul></li><li>线程级并行<ul><li>同步多线程</li><li>多核</li></ul></li></ul><h3 id="矢量操作"><a href="#矢量操作" class="headerlink" title="矢量操作"></a>矢量操作</h3><p>同时处理多个指令</p><h3 id="多核处理"><a href="#多核处理" class="headerlink" title="多核处理"></a>多核处理</h3><p>将流水线完整复制</p><p>Sandy Bridge-E：6 cores</p><ul><li>完整的核，除了最后一级缓存外，不共享其他资源</li><li>继续保持摩尔定律</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CPU 为串行程序优化</p><ul><li>pipelines， branch prediction， superscalar， OoO</li><li>Reduce execution time with high clock speeds and high utilization</li></ul><p>缓慢的内存带宽将会是大问题</p><p>并行处理是一个方向</p><h3 id="串行计算模式"><a href="#串行计算模式" class="headerlink" title="串行计算模式"></a>串行计算模式</h3><p>常规软件是串行的</p><ul><li><p>设计运行于一个中央处理器上的 CPU</p></li><li><p>通过离散的指令序列完成一个问题的解决</p></li><li>一条一条指令的执行</li><li>同时只有一个指令在执行</li></ul><h3 id="并行计算模式"><a href="#并行计算模式" class="headerlink" title="并行计算模式"></a>并行计算模式</h3><ul><li>同时应用多个计算资源来解决一个计算问题</li><li>设计多个计算资源或处理器</li><li>每个问题被分解为多个离散的部分，可以同时处理（并行）</li><li>每个部分可以由一系列指令完成</li><li>每个部分的指令在不同的处理器上执行</li></ul><h3 id="Flynn-矩阵"><a href="#Flynn-矩阵" class="headerlink" title="Flynn 矩阵"></a>Flynn 矩阵</h3><p>4 possible classifications according to Flynn</p><ul><li>SISD</li><li>SIMD</li><li>MISD</li><li>MIMD</li></ul><p>— single instruction  single Data</p><p>…</p><p>…</p><p>…</p><hr><h3 id="存储器的架构"><a href="#存储器的架构" class="headerlink" title="存储器的架构"></a>存储器的架构</h3><ul><li>shared memory</li><li>distributed memory</li><li>hybrid distributed shared memory</li></ul><h3 id="并行编程模型"><a href="#并行编程模型" class="headerlink" title="并行编程模型"></a>并行编程模型</h3><ul><li>共享存储模型</li><li>线程模型</li><li>消息传递模型</li><li>数据并行模型</li></ul><h3 id="设计并行处理程序和系统"><a href="#设计并行处理程序和系统" class="headerlink" title="设计并行处理程序和系统"></a>设计并行处理程序和系统</h3><ul><li>自动和手动并行</li><li>理解问题和程序</li><li>分块分割</li><li>通信</li><li>同步</li><li><p>数据依赖</p></li><li><p>负载均衡</p></li><li>粒度</li><li>I/O</li><li>成本</li><li>性能分析和优化</li></ul><h2 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h2><p>Linux</p><ul><li><p>安装 NVIDIA Driver 显卡驱动</p></li><li><p>安装 CUDA Toolkit</p></li><li>使用c/c++ 编译器或者 python 拓展进行 GPU加速的 CUDA 编程</li><li>从官网下载安装 wet 到 包 然后 sudo sh 或者 ./ 运行</li><li>设置环境变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CUDA-编程&quot;&gt;&lt;a href=&quot;#CUDA-编程&quot; class=&quot;headerlink&quot; title=&quot;CUDA 编程&quot;&gt;&lt;/a&gt;CUDA 编程&lt;/h1&gt;&lt;h2 id=&quot;现代-CPU-架构和性能优化&quot;&gt;&lt;a href=&quot;#现代-CPU-架构和性能优化&quot; cla
      
    
    </summary>
    
    
    
      <category term="CUDA" scheme="https://github.com/liysky/liysky.github.io.git/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>Sliding Window </title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/04/23/Sliding-Window/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/04/23/Sliding-Window/</id>
    <published>2021-04-23T08:20:14.000Z</published>
    <updated>2021-09-07T15:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><strong>需要注意的主要步骤</strong></p><ul><li>移动 right 时<strong>扩大窗口</strong>，需要更新哪些数据</li><li>什么条件下，窗口应该<strong>暂停扩大</strong>，开始缩小窗口</li><li>移动 left 时<strong>缩小窗口</strong>，需要更新哪些数据</li><li>需要的<strong>结果</strong>是在哪个地方进行更新，是在扩大窗口时，还是缩小窗口时进行更新。</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/76_fig1.gif" style="zoom:67%;" /></p><ul><li>窗口右端不断向前，直到包含所有的所需元素</li></ul><p>（注意，刚刚直到包含所有元素就是窗口开始缩小的条件）。</p><ul><li><p>然后窗口左端开始向前（即进行了窗口的缩小），直到开始不包含所有元素（比如ABC，就少了 A，窗口中只包含了BC）</p></li><li><p>然后窗口右边再次向右前进，重复上述过程。</p></li><li>最后返回最小的窗口即可（在这里，可以得出，在缩小窗口之前通常需要进行预备份上一次的最合适的窗口）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// t  为所需要的匹配元素</span></span><br><span class="line"><span class="keyword">while</span>(right &lt; t.<span class="built_in">size</span>())&#123;</span><br><span class="line">  windows.add[s[right]];</span><br><span class="line">  right++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//满足缩减条件时，开始缩减</span></span><br><span class="line">  <span class="keyword">while</span>(windows need shrink)&#123;</span><br><span class="line">    windows.<span class="built_in">remove</span>[s[left]];</span><br><span class="line">    left++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. Minimum Window Substring</a></h2><p>Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string “”.</p><p>Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.</p><p>Example 1:</p><p>Input: s = “ADOBECODEBANC”, t = “ABC”<br>Output: “BANC”<br>Example 2:</p><p>Input: s = “a”, t = “a”<br>Output: “a”</p><p>Constraints:</p><p>1 &lt;= s.length, t.length &lt;= 105<br>s and t consist of English letters.</p><p>Follow up: Could you find an algorithm that runs in O(n) time?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; needs, windows;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">char</span> c:t ) needs[c]++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> left, right = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> len = INT_MAX;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//右边界向前滑动的条件</span></span><br><span class="line">  <span class="keyword">while</span>(right &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="keyword">char</span> c = s[right];</span><br><span class="line">    right++;</span><br><span class="line">    <span class="keyword">if</span>(needs.count(c))&#123;</span><br><span class="line">      windows[c]++;</span><br><span class="line">      <span class="keyword">if</span>(windows[c] == needs[c])&#123;</span><br><span class="line">        valid++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左边界向前滑动的条件</span></span><br><span class="line">    <span class="keyword">while</span>(valid == needs.<span class="built_in">size</span>())&#123;</span><br><span class="line">      <span class="keyword">if</span>(right - left  &lt; len)&#123;</span><br><span class="line">        start = left;</span><br><span class="line">        len = right - left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">char</span> d = s[left];</span><br><span class="line">      left++;</span><br><span class="line">      <span class="keyword">if</span>(needs.count(d))&#123;</span><br><span class="line">        <span class="keyword">if</span>(windows[d] == needs[d])&#123;</span><br><span class="line">          valid--;</span><br><span class="line">        &#125;</span><br><span class="line">        windows[d]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len == INT_MAX ? <span class="string">""</span> : s.substr(start, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>max(O(n)) = O(s+t)</p><h2 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. Permutation in String</a></h2><p>Given two strings <code>s1</code> and <code>s2</code>, return true if <code>s2</code> contains the permutation of <code>s1</code>.</p><p>In other words, one of <code>s1</code>‘s permutations is the substring of <code>s2</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;ab&quot;, s2 &#x3D; &quot;eidbaooo&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;ab&quot;, s2 &#x3D; &quot;eidboaoo&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s1.length, s2.length &lt;= 104</code></li><li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s1 ) need[c]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s2[right];</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span>(need.count(c))&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(need[c] == window[c])&#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当 窗口 大于 s1 目标字符串的大小时，需要左移动</span></span><br><span class="line">            <span class="keyword">while</span>(right - left &gt;= s1.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(valid == need.<span class="built_in">size</span>() ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">char</span> d = s2[left];</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span>(need.count(d))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(need[d]==window[d])&#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[d]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438. Find All Anagrams in a String"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438. Find All Anagrams in a String</a></h2><p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of</em> <code>p</code><em>‘s anagrams in</em> <code>s</code>. You may return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;cbaebabacd&quot;, p &#x3D; &quot;abc&quot;</span><br><span class="line">Output: [0,6]</span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index &#x3D; 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</span><br><span class="line">The substring with start index &#x3D; 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;abab&quot;, p &#x3D; &quot;ab&quot;</span><br><span class="line">Output: [0,1,2]</span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index &#x3D; 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index &#x3D; 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index &#x3D; 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length, p.length &lt;= 3 * 104</code></li><li><code>s</code> and <code>p</code> consist of lowercase English letters.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : p) need[c]++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"first, need.size() = "</span>&lt;&lt;need.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[right];</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span>(need.count(c))&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(window[c] == need[c])&#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(right - left &gt;= p.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"need.size() = "</span> &lt;&lt; need.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"p.size() = "</span> &lt;&lt; p.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span>(valid == need.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    res.push_back(left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> d = s[left];</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span>(need.count(d))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(need[d] == window[d])&#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[d]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution slt;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"baa"</span>, s2 = <span class="string">"aa"</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    test = slt.findAnagrams(s1, s2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; test.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; test[i]&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>make clear <code>valid == need.size()</code> not <code>valid == p.size()</code>. </p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210816225511497.png" alt="image-20210816225511497"></p><h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a></h2><p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3.</span><br><span class="line">Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> consists of English letters, digits, symbols and spaces.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; window;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; s.<span class="built_in">size</span>() )&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[right];</span><br><span class="line">            right++;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span>(window[c] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> d = s[left];</span><br><span class="line">                left++;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//当缩小窗口时，也就是没有重复子串的时候，此时进行记录最大子串长度。</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">"abcabcbb"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.lengthOfLongestSubstring(str)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;滑动窗口&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;需要注意的主要步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动 right 时&lt;strong&gt;扩大窗口
      
    
    </summary>
    
    
    
      <category term="slidingwindow" scheme="https://github.com/liysky/liysky.github.io.git/tags/slidingwindow/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/04/20/Binary-Search/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/04/20/Binary-Search/</id>
    <published>2021-04-19T16:54:28.000Z</published>
    <updated>2021-04-21T03:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarysear</span><span class="params">(std::vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.size();</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left+(right - left) / <span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> rest = binarysear(arr, <span class="number">2</span>);</span><br><span class="line">    std::cout&lt;&lt;rest&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此算法的缺陷：</p><p>比如说给你有序数组 <code>nums = [1,2,2,2,3]</code>，<code>target</code> 为 2，此算法返回的索引是 2，没错。但是如果我想得到 <code>target</code> 的左侧边界，即索引 1，或者我想得到 <code>target</code> 的右侧边界，即索引 3，这样的话此算法是无法处理的。</p><h3 id="寻找左侧边界的二分搜索"><a href="#寻找左侧边界的二分搜索" class="headerlink" title="寻找左侧边界的二分搜索"></a>寻找左侧边界的二分搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leftbinarysear</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left+(right - left) / <span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] ==  target)</span><br><span class="line">            right = mid <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= nums.<span class="built_in">size</span>() || nums[left] != target)&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找右侧边界的二分搜索"><a href="#寻找右侧边界的二分搜索" class="headerlink" title="寻找右侧边界的二分搜索"></a>寻找右侧边界的二分搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rightbinarysear</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left+(right - left) / <span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] ==  target)</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target)&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210420210039036.png" alt="image-20210420210039036"></p><p><strong>note：</strong></p><p>常规做法很简单就是：<code>nums[mid] == target</code> 时，左侧 <code>left = mid +1</code> 右侧 <code>right = mid + 1</code>。</p><p>将「搜索区间」全都统一成两端都闭，好记，只要稍改 <code>nums[mid] == target</code> 条件处的代码和返回的逻辑即可。</p><p>即在左侧做二分搜索时，只需在 <code>nums[mid] == target</code>  时进行 <code>right = mid -1</code>持续向左侧收紧。</p><p>在右侧做二分搜索时，只需在 <code>nums[mid] = target</code> 时进行 <code>left = mid +1</code> 持续向右侧收紧。</p><h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><h4 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. Find First and Last Position of Element in Sorted Array</a></h4><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Follow up:</strong> Could you write an algorithm with <code>O(log n)</code> runtime complexity?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [], target &#x3D; 0</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> is a non-decreasing array.</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        res.push_back(leftBinSearch(nums, target));</span><br><span class="line">        res.push_back(rightBinSearch(nums, target));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leftBinSearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &gt; nums[mid])&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid])&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= nums.<span class="built_in">size</span>() || nums[left] != target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rightBinSearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &gt; nums[mid])&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid])&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记一次苹果天才吧维修记录</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/04/17/logofapplegeniusbar/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/04/17/logofapplegeniusbar/</id>
    <published>2021-04-17T13:49:39.000Z</published>
    <updated>2021-04-19T03:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次苹果天才吧维修记录"><a href="#记一次苹果天才吧维修记录" class="headerlink" title="记一次苹果天才吧维修记录"></a>记一次苹果天才吧维修记录</h1><p>因为我用了3年的 MBP 笔记本电脑的键盘有两个键松动了并且有粘连响应（就是按一个字母的时候会输入两个），这种情况发生了大概有半年多的时间了，并且我也知道是我买的这个系列的笔记本有这种设计缺陷，苹果也提出了对应的维修计划：<a href="https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks" target="_blank" rel="noopener">https://support.apple.com/zh-cn/keyboard-service-program-for-mac-notebooks</a> 但我一直懒的去修，直到最近频繁的影响到我的使用，我预约了天才吧的服务。（强烈建议如果有类似的问题，维修之类的，最好去苹果官方的零售店，而不是第三方合作的。）</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-04-17%20at%2020.28.28.png" alt="Screen Shot 2021-04-17 at 20.28.28" style="zoom: 33%;" /></p><h3 id="预约流程"><a href="#预约流程" class="headerlink" title="预约流程"></a>预约流程</h3><p>预约到天才吧大概有两种方式：</p><ul><li><p>打电话跟客服联络并预约（省事，通常客服会给你尽可能的帮助）。</p></li><li><p>通过手机下载 Apple Support APP，然后登陆 ID，通过找的自己所需要维修的设备，进行选择服务，选择预约时间等等（我选择了这种服务，麻烦就在于自己操作）。当然 Apple 支持 APP里也可以与客服进行沟通，询问一些事项。</p></li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210417203827591.png" alt="image-20210417203827591" style="zoom: 33%;" /></p><h3 id="到店服务"><a href="#到店服务" class="headerlink" title="到店服务"></a>到店服务</h3><p>预约的时候会给出你一个非常具体的时间，到预约时间去然后出示一下证件就可以了。</p><p>我注意到的是，天才吧的服务专家的服务细节，他给你完全的信任感，意思是请你相信他，他尽可能的在服务范围之内帮你。</p><p>我到的时候离预约时间还有十分钟，我就在店里玩「狂野飙车」这个游戏打发时间，结果服务专家他迟到了，当然他表示道歉了，然后就是非常愉快的沟通。</p><p>把事情沟通清楚之后，他会给出建议（包括维修的程度，需要换什么东西，需要备份什么数据，维修的价格）然后询问我的意见。</p><p>因为我对这项换键盘的服务已经提前有过了解了（是的，这个系列的产品设计缺陷已经闻名于耳，苹果也因为这件事被许多消费者起诉了）我表示随便你修就好了，数据我已经备份了（数据备份还是很重要的，如果有敏感数据的话，建议还是在维修之前进行清盘操作，毕竟谁也不想发生类似「大家好，我是陈冠希，我现在在LA，我遇到了一些很坏很坏的人，一些gangster，现在需要你的帮助，微信转账300块，帮我回到香港，你懂我意思吗？我对你致敬，salute）的事情。</p><p>然后天才吧服务专家会让你签字（通常直接签就好了），告诉你大概的维修服务时间（大约最长不会超过2天）。</p><p>由于我一直以来的人品比较好，其实我也没想到咯，我离开后正好中午，心想就在附近跟同学一块吃个饭吧，结果吃完饭的时间，天才吧打过电话来告诉我我的电脑修好了，在此再次 salute，我深深地表达了我的感谢，然后就去取电脑了。</p><p>本来我只是想修键盘的，结果给我换了键盘，换了电池，还换了电池上盖板，我又深深地对他们的服务表示了感谢，salute，awesome。</p><h3 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h3><p>Apple 之所以为 Apple ，苹果之所以为苹果，是因为它天生就是跟梨的味道不一样，我在店里的时候其实还注意到了很多其他的人来这里维修，有的人会因为一些使用障碍来到这里寻求帮助，比如说我见到了一位老头，这样说不太好，老爷爷吧，他脾气不太好，进来就是你们给我弄，我这个怎么怎么….坏了。还有就是一些沟通环节，坦白说来，苹果零售店里会有好多的店员，店员的工作当然就是要包含销售和服务的，有宣传营销责任，但是苹果从来不称呼他们为销售或者什么其他的，他们从一开始给你联络的时候就告诉你，跟你沟通的是一位「专家」，而且他们的「店员」（请允许我暂时这样称呼）会尽可能的听从你的讲述，从用户个人的角度给出建议。很显然他们是受到过严格的培训的，否则不会给出从容不迫和详尽翔实的建议。</p><p>从我所有的受到的他们的服务来说，苹果当然会出很多问题，我使用他们的产品的过程中问题不计其数，但是每当你跟他们沟通的时候，很明显苹果通常会给出一个很好的售后服务，有关售后服务我是觉得苹果做得真不错，表面上来看他们是卖产品的，实际上他们是卖服务的，我非常喜欢和佩服他们这一种文化。</p><p>我并不是什么「果粉」，我觉得如果有人称我为「果粉」的话，我一定会反驳他说「你才是『果粉』你们全家都是『果粉』」，我会更理性地理解和看待苹果背后的某种文化使得我喜欢他们的产品，喜欢这种做事的方式。</p><p>「用户不会说出他们想要什么产品，直到你把产品放到他们的面前」这是乔布斯在阐述有关对于产品和用户的关系的时候说的一句话，没错，这也印证了「经济学」中的「生产决定消费」的概念，在苹果的销售观念中，服务占据了很大的比重，虽然苹果嘴上不说，但是他会让你感受得到「请放心，我们会给你最好的服务」，这种文化会影响消费者在购买产品的时候所做出的选择——这也从一方面回答了为什么人们都喜欢苹果呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记一次苹果天才吧维修记录&quot;&gt;&lt;a href=&quot;#记一次苹果天才吧维修记录&quot; class=&quot;headerlink&quot; title=&quot;记一次苹果天才吧维修记录&quot;&gt;&lt;/a&gt;记一次苹果天才吧维修记录&lt;/h1&gt;&lt;p&gt;因为我用了3年的 MBP 笔记本电脑的键盘有两个键松动了并且
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Learnopengl-note</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/04/01/Learnopengl-note/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/04/01/Learnopengl-note/</id>
    <published>2021-04-01T15:16:18.000Z</published>
    <updated>2021-04-12T15:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h2><p>顶点着色器</p><p>vertex shader</p><p>如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点和一个片段着色器。</p><pre><code>#version 330 corelayout (location = 0) in vec3 aPos;void main(){    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);}</code></pre><p>#version 330 core 声明版本和核心模式</p><p>in , out关键字，每个着色器都有输入和输出进行数据交换。</p><p>layout (location = 0) 设定了输入变量的位置值。</p><p>着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。</p><p>每个输入变量也叫做 顶点属性 vertex attribute，OpenGL 取保至少 16 个包含 4 分量的顶点属性可用。</p><p>GLSL中包含C等其它语言大部分的默认基础数据类型：int、float、double、uint和bool。</p><p>GLSL两种容器类型：vector 和 matrix</p><p><strong>如果打算从一个着色器向另一个着色器发送数据，必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。</strong></p><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a><strong>顶点着色器</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout (location &#x3D; 0) in vec3 aPos; &#x2F;&#x2F; 位置变量的属性位置值为0</span><br><span class="line"></span><br><span class="line">out vec4 vertexColor; &#x2F;&#x2F; 为片段着色器指定一个颜色输出</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    gl_Position &#x3D; vec4(aPos, 1.0);</span><br><span class="line">    vertexColor &#x3D; vec4(0.5, 0.0, 0.0, 1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a><strong>片段着色器</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">out vec4 FragColor;</span><br><span class="line"></span><br><span class="line">in vec4 vertexColor; &#x2F;&#x2F; 从顶点着色器传来的输入变量（名称相同、类型相同）</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    FragColor &#x3D; vertexColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Uniform"><a href="#Uniform" class="headerlink" title="Uniform"></a><strong>Uniform</strong></h3><p>uniform 是一种从 CPU 中的应用向 GPU 中的着色器发送数据的方式。</p><p>uniform 是全局的，全局意味着 uniform 变量：</p><ul><li>必须在每个着色器程序对象中都是独一无二的</li><li>它可以被着色器程序的任意着色器在任意阶段访问</li><li>无论 uniform 被设置为什么，uniform 会一直保存它们的数据，直到它们被重置或者更新。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">out vec4 FragColor;</span><br><span class="line"></span><br><span class="line">uniform vec4 ourColor;</span><br><span class="line">void main()&#123;</span><br><span class="line">FragColor &#x3D; ourColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 uniform vec4 的ourColor 全局变量，并在片段着色器的输出颜色设置为 uniform 的值。</p><p><strong>因为 uniform 是全局变量，而无需通过顶点着色器作为中介</strong></p><p><strong>如果声明了 uniform却未曾使用，编译器会默认移除此变量，导致最后编译出的版本中不会包含它</strong></p><p><strong>给着色器中的 uniform 属性添加索引/位置，和数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float timeValue &#x3D; glfwGetTime();</span><br><span class="line">float greenValue &#x3D; (sin(timeValue) &#x2F; 2.0f) + 0.5f;</span><br><span class="line">int vertexColorLocation &#x3D; glGetUniformLocation(shaderProgram, &quot;ourColor&quot;);</span><br><span class="line">glUseProgram(shaderProgram);</span><br><span class="line">glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);</span><br></pre></td></tr></table></figure><p><code>glfwGetTime()</code>获取运行的秒数。</p><p><code>glGetUniformLocation</code> 查询 uniform 中  <code>ourColor</code> 的位置值，如果返回 -1 代表没有找到这个值。</p><p><code>glUniform4f</code> 函数设置 uniform 的值。</p><p><strong>注意：在更新 uniform 之前必须首先使用此着色器程序，通过调用<code>glUseProgram</code> </strong></p><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">while(!glfwWindowShouldClose(window))</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;input</span><br><span class="line">processInput(window);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;render</span><br><span class="line">&#x2F;&#x2F; clear color buffer</span><br><span class="line">glClearColor(0.2f, 0.3f, 0.3f, 1.0f);</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;activate shader</span><br><span class="line">glUseProgram(shaderProgram);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;update uniform color</span><br><span class="line">float timeValue &#x3D; glfwGetTime();</span><br><span class="line">float greenValue &#x3D; sin(timeValue) &#x2F; 2.0f + 0.5f;</span><br><span class="line">int vertexColorLocation &#x3D; glGetUniformLocation(shaderProgram, &quot;ourColor&quot;);</span><br><span class="line">glUnifrom4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;draw triangle</span><br><span class="line">glBindVertexArray(VAO);</span><br><span class="line">glDrawArrays(GL_TRIANGLES, 0, 3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;exchange buffer and look up IO event</span><br><span class="line">glfwSwapBuffers(window);</span><br><span class="line">glfwPollEvents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个属性"><a href="#多个属性" class="headerlink" title="多个属性"></a>多个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">float vertices[] &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; 位置              &#x2F;&#x2F; 颜色</span><br><span class="line">     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   &#x2F;&#x2F; 右下</span><br><span class="line">    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   &#x2F;&#x2F; 左下</span><br><span class="line">     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    &#x2F;&#x2F; 顶部</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置 <code>layout</code> 标识符将 aColor 属性位置设置为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout(location &#x3D; 0) in vec3 aPos;&#x2F;&#x2F;位置变量属性位置值为0</span><br><span class="line">layout(location &#x3D; 1) in vec3 aColor;&#x2F;&#x2F;颜色变量属性位置为1</span><br><span class="line"></span><br><span class="line">out vec3 ourColor; &#x2F;&#x2F; 向片段着色器输出一个颜色</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    gl_Position &#x3D; vec4(aPos, 1.0);</span><br><span class="line">    ourColor &#x3D; aColor; &#x2F;&#x2F; 将ourColor设置为我们从顶点数据那里得到的输入颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210404230945377.png" alt="image-20210404230945377"></p><p><strong>glVertexAttribPointer 来更新顶点格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;position property</span><br><span class="line">glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6*sizeof(float), (void*)0);</span><br><span class="line">glEnableVertexAttribArray(0);</span><br><span class="line">&#x2F;&#x2F;color property</span><br><span class="line">glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6*sizeof(float), (void*)(3*sizeof(float)));</span><br><span class="line">glEnableVertexAttribArray(1);</span><br></pre></td></tr></table></figure><p>自己的着色器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#ifndef SHADER_H</span><br><span class="line">#define SHADER_H</span><br><span class="line"></span><br><span class="line">#include &lt;glad&#x2F;glad.h&gt;; &#x2F;&#x2F; 包含glad来获取所有的必须OpenGL头文件</span><br><span class="line"></span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Shader</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F; 程序ID</span><br><span class="line">    unsigned int ID;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 构造器读取并构建着色器</span><br><span class="line">    Shader(const GLchar* vertexPath, const GLchar* fragmentPath);</span><br><span class="line">    &#x2F;&#x2F; 使用&#x2F;激活程序</span><br><span class="line">    void use();</span><br><span class="line">    &#x2F;&#x2F; uniform工具函数</span><br><span class="line">    void setBool(const std::string &amp;name, bool value) const;</span><br><span class="line">    void setInt(const std::string &amp;name, int value) const;</span><br><span class="line">    void setFloat(const std::string &amp;name, float value) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>工具函数：use 来激活着色器程序，set 函数能够查询一个 unform 的位置并设置它的值。</p><h3 id="从文件读取"><a href="#从文件读取" class="headerlink" title="从文件读取"></a>从文件读取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Shader(const char* vertexPath, const char* fragmentPath)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 从文件路径中获取顶点&#x2F;片段着色器</span><br><span class="line">    std::string vertexCode;</span><br><span class="line">    std::string fragmentCode;</span><br><span class="line">    std::ifstream vShaderFile;</span><br><span class="line">    std::ifstream fShaderFile;</span><br><span class="line">    &#x2F;&#x2F; 保证ifstream对象可以抛出异常：</span><br><span class="line">    vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class="line">    fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 打开文件</span><br><span class="line">        vShaderFile.open(vertexPath);</span><br><span class="line">        fShaderFile.open(fragmentPath);</span><br><span class="line">        std::stringstream vShaderStream, fShaderStream;</span><br><span class="line">        &#x2F;&#x2F; 读取文件的缓冲内容到数据流中</span><br><span class="line">        vShaderStream &lt;&lt; vShaderFile.rdbuf();</span><br><span class="line">        fShaderStream &lt;&lt; fShaderFile.rdbuf();</span><br><span class="line">        &#x2F;&#x2F; 关闭文件处理器</span><br><span class="line">        vShaderFile.close();</span><br><span class="line">        fShaderFile.close();</span><br><span class="line">        &#x2F;&#x2F; 转换数据流到string</span><br><span class="line">        vertexCode   &#x3D; vShaderStream.str();</span><br><span class="line">        fragmentCode &#x3D; fShaderStream.str();</span><br><span class="line">    &#125;</span><br><span class="line">    catch(std::ifstream::failure e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; vertexCode 转为 char *</span><br><span class="line">    &#x2F;&#x2F; c_str()</span><br><span class="line">    const char* vShaderCode &#x3D; vertexCode.c_str();</span><br><span class="line">    const char* fShaderCode &#x3D; fragmentCode.c_str();</span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure><p><strong>编译和链接着色器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 编译着色器</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> vertex, fragment;</span><br><span class="line"><span class="keyword">int</span> success;</span><br><span class="line"><span class="keyword">char</span> infoLog[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line">vertex = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line"></span><br><span class="line">glShaderSource(vertex, <span class="number">1</span>, &amp;vShaderCode, <span class="literal">NULL</span>);</span><br><span class="line">glCompileShader(vertex);</span><br><span class="line"><span class="comment">// 打印编译错误（如果有的话）</span></span><br><span class="line">glGetShaderiv(vertex, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span>(!success)</span><br><span class="line">&#123;</span><br><span class="line">    glGetShaderInfoLog(vertex, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段着色器也类似</span></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 着色器程序</span></span><br><span class="line">ID = glCreateProgram();</span><br><span class="line">glAttachShader(ID, vertex);</span><br><span class="line">glAttachShader(ID, fragment);</span><br><span class="line">glLinkProgram(ID);</span><br><span class="line"><span class="comment">// 打印连接错误（如果有的话）</span></span><br><span class="line">glGetProgramiv(ID, GL_LINK_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span>(!success)</span><br><span class="line">&#123;</span><br><span class="line">    glGetProgramInfoLog(ID, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除着色器，它们已经链接到我们的程序中了，已经不再需要了</span></span><br><span class="line">glDeleteShader(vertex);</span><br><span class="line">glDeleteShader(fragment);</span><br></pre></td></tr></table></figure><h2 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h2><p>我们可以为每个顶点添加颜色来增加图形细节，但是如果想要指定足够多的顶点，就需要足够多的颜色，开销会很大。</p><p><strong>纹理环绕方式</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">环绕方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">GL_REPEAT</td><td style="text-align:left">对纹理的默认行为。重复纹理图像。</td></tr><tr><td style="text-align:left">GL_MIRRORED_REPEAT</td><td style="text-align:left">和GL_REPEAT一样，但每次重复图片是镜像放置的。</td></tr><tr><td style="text-align:left">GL_CLAMP_TO_EDGE</td><td style="text-align:left">纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</td></tr><tr><td style="text-align:left">GL_CLAMP_TO_BORDER</td><td style="text-align:left">超出的坐标为用户指定的边缘颜色。</td></tr></tbody></table></div><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-04-10%20at%2022.31.44.png" alt="Screen Shot 2021-04-10 at 22.31.44"></p><h3 id="纹理加载使用stb-image-h库进行加载"><a href="#纹理加载使用stb-image-h库进行加载" class="headerlink" title="纹理加载使用stb_image.h库进行加载"></a>纹理加载使用stb_image.h库进行加载</h3><p>要使用stb_image.h加载图片，需要使用它的stbi_load函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int width, height, nrChannels;</span><br><span class="line">unsigned char *data &#x3D; stbi_load(&quot;image.jpg&quot;, &amp;width, &amp;height, &amp;nrChannels, 0);</span><br></pre></td></tr></table></figure><h3 id="生成纹理"><a href="#生成纹理" class="headerlink" title="生成纹理"></a>生成纹理</h3><p>与生成的OpenGL对象一样，纹理也是使用ID进行引用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unsigned int texture;</span><br><span class="line">glGenTextures(1, &amp;texture);</span><br></pre></td></tr></table></figure><p>之后就是绑定纹理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glBindTexture(GL_TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure><p>然后使用之前载入的图片数据生成一个纹理，纹理可以通过glTexImage2D来生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glTexImage2D(GL_TEXTURE2D, 0, GL_RGB, width, height, 0, GL_RGB,GL_UNSIGNED_BYTE,data);</span><br><span class="line">glGenerateMipmap(GL_TEXTURE_2D);</span><br></pre></td></tr></table></figure><p>参数含义：</p><ul><li>指定纹理目标</li><li>为纹理置顶多级渐远纹理的级别，0为基本级别</li><li>告诉OpenGL我们希望纹理储存为何种格式，我们的图像为RGB值格式</li><li>宽</li><li>高</li><li>图源格式和数据类型，并把它们储存为 char(byte) 数组</li><li>真正的图像数据</li></ul><p>生成了纹理和相应的多级渐远纹理后，释放图像的内存是一个好的习惯。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stbi_image_free(data);</span><br></pre></td></tr></table></figure><h3 id="完整的纹理生成代码"><a href="#完整的纹理生成代码" class="headerlink" title="完整的纹理生成代码"></a>完整的纹理生成代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">unsigned int texture;</span><br><span class="line">glGenTextures(1, &amp;texture);</span><br><span class="line">glBindTexture(GL_TEXTURE_2D, texture);</span><br><span class="line">&#x2F;&#x2F; 为当前绑定的纹理对象设置环绕、过滤方式</span><br><span class="line">glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</span><br><span class="line">glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</span><br><span class="line">glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">&#x2F;&#x2F; 加载并生成纹理</span><br><span class="line">int width, height, nrChannels;</span><br><span class="line">unsigned char *data &#x3D; stbi_load(&quot;container.jpg&quot;, &amp;width, &amp;height, &amp;nrChannels, 0);</span><br><span class="line">if (data)</span><br><span class="line">&#123;</span><br><span class="line">    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class="line">    glGenerateMipmap(GL_TEXTURE_2D);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Failed to load texture&quot; &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">stbi_image_free(data);</span><br></pre></td></tr></table></figure><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><h3 id="叉乘"><a href="#叉乘" class="headerlink" title="叉乘"></a>叉乘</h3><p>叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202021-04-12%20at%2023.34.50.png" alt="Screen Shot 2021-04-12 at 23.34.50"></p><p>向量A和B的叉积：</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210412233726028.png" alt="image-20210412233726028"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;着色器&quot;&gt;&lt;a href=&quot;#着色器&quot; class=&quot;headerlink&quot; title=&quot;着色器&quot;&gt;&lt;/a&gt;着色器&lt;/h2&gt;&lt;p&gt;顶点着色器&lt;/p&gt;
&lt;p&gt;vertex shader&lt;/p&gt;
&lt;p&gt;如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点
      
    
    </summary>
    
    
    
      <category term="learning-note" scheme="https://github.com/liysky/liysky.github.io.git/tags/learning-note/"/>
    
  </entry>
  
  <entry>
    <title>Analysis of &quot;Dual Attention Network for Scene Segmentation&quot;</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2021/03/29/Analysis-of-Dual-Attention-Network-for-Scene-Segmentation/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2021/03/29/Analysis-of-Dual-Attention-Network-for-Scene-Segmentation/</id>
    <published>2021-03-28T16:06:29.000Z</published>
    <updated>2021-04-19T07:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dual-Attention-Network-for-Scene-Segmentation"><a href="#Dual-Attention-Network-for-Scene-Segmentation" class="headerlink" title="Dual Attention Network for Scene Segmentation"></a><a href="https://arxiv.org/abs/1809.02983" target="_blank" rel="noopener">Dual Attention Network for Scene Segmentation</a></h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Unlike previous works that capture contexts by multi-scale feature fusion.</p><p>Author propose Dual attention:</p><ul><li><p>adaptively integrate local fetures with their global dependecies</p></li><li><p>two types of attention model</p><ul><li><p>spatial dimension</p><p>selectively aggregates the feature at each position by a weighted sum of the features at all positions.</p><p>通过对所有位置上的特征进行加权和，来选择性地聚合每个位置上的特征。</p></li><li><p>channel dimension</p><p>selectively emphasizes interdependent channel maps by integrating associated features among all channel maps.</p><p>通过整合所有通道图中的相关特征，选择性地强调相互依赖的通道图。</p></li></ul></li></ul><p>在公开的有挑战性的三个数据集上获得了 state-of-the-art 的水平：</p><ul><li>Cityscapes</li><li>PASCAL Context</li><li>COCO Stuff dataset</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>（需求）</p><p>场景分割目标就是进行解析不同的图像区域，包括连续的物体（天空、道路、草地）和离散的物体（人、汽车、自行车）。</p><p><strong>前人工作</strong></p><ul><li><p>CNN 方法在这上面的表现</p><p>通过结合不同的扩张卷积和池化操作生成的特征图来聚合多尺度上下文。</p><p>通过扩大卷积核，编解码器结构融合中高层语义特征。</p><p>他们可以进行目标检测，但缺点：</p><p>它们不能在全局试图中利用对象或者视图之间的关系，这也是场景分割的必要条件。</p></li><li><p>RNN 方面</p><p>提高了场景分割精度。利用了 2D 长短期记忆 LSTM 网络来捕捉标签复杂的空间依赖关系。用定向无环图的循环神经网络来捕捉局部特征上丰富的上下文依赖性。</p><p>缺点：这些方法捕捉的全局关系隐含在循环神经网络中，其有效性依赖于长期记忆的学习结果。</p><p>RNN</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210328223755548.png" alt="image-20210328223755548"></p><p><strong>RNN 缺点：</strong></p><p>梯度消失</p><ul><li>误差反向传播时很容易消失</li><li>特征正向传播时也容易消失</li></ul><p>梯度爆炸</p><ul><li>直接把整个网络搞翻车了</li></ul></li></ul><p><strong>解决方法</strong></p><p>双注意力网络</p><p>重点是使用了注意力机制，注意力机制在 CNN 和 RNN 中也有，但是具体来说它们的注意力机制太弱了。不够把握宏观大局，在细分局部把握上也具有一定的距离等的局限性。</p><ul><li><p>位置注意力模块</p><p>捕捉任意两个位置之间的依赖关系。</p><p>对某个位置的特征，通过对所有位置的特征进行加权求和聚合更新，权重由对应两个位置之间的特征相似度决定。</p><p>任意两个位置都可以进行相互改善，不必考虑它们在空间维度上的距离。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210328225301495.png" alt="image-20210328225301495"></p><p>不必考虑空间距离上的关系，这也是 attention 机制所具有的特点。</p></li></ul><ul><li><p>通道注意力模块</p><p>使用相似的自注意力机制捕捉任意两个通道图之间的通道依赖性，并以所有通道图的加权和更新每个通道图。</p></li></ul><p><strong>最后将上面的两个注意力模块的输出进行融合，进一步增强特征表示。</strong></p><p>在处理复杂场景时比前人工作更好。</p><p>对于不明显的对象的特征提取会更好（例如突出对象（汽车、建筑）的上下文会损害不明显对象的标签），注意力机制有选择的聚合不明显对象的相似特征，来突出其特征的表现，避免突出对象对其的影响，以至于其特征会被忽略掉。</p><p>不同位置的特征应该对予以相同对待。</p><p>模型对于任何尺度的相似特征从全局上予以适应性的整合。</p><p>将空间和通道相关行予以整合考虑，场景能够在长距离的依赖中获利。</p><p><strong>主要贡献总结</strong></p><ul><li>提出了双注意力机制，空间上的和通道上的，提高场景的特征区分度能力。</li><li><p>位置注意力模块通过对于空间和通道模块的特征提取，对于通过模型的丰富的上下文依赖进行局部特征提取，显著提高分割的结果。</p></li><li><p>在流行的数据集上取得了 state-of-the-art 的结果。</p></li></ul><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>CNN 在语义分割方面取得的巨大进展。</p><p>对于增强上下文的已有模型：</p><ul><li><p>Deeplab2/3 提出的空间金字塔池化，由不同的扩张率的平行扩张卷积组成。</p></li><li><p>PSP-Net 设计了金字塔池化模块来收集有效的上下文先导，包含不同尺度的信息。</p></li><li><p>编解码器结构融合了中高水平的语义特征获取不同尺度的上下文信息。</p></li><li><p>DAG-RNN 用循环神经网络建立有向无环图模型，捕捉了丰富的上下文依赖性。</p></li><li><p>PSANet 通过卷机层和空间维度的相对位置信息来捕获像素间的关系。</p></li><li><p>OCNet 采用了具有 ASPP 的自注意力机制探索上下文的依赖性。</p></li><li><p>EncNet 引入了通道注意力机制来捕获全局上下文。</p></li></ul><p><strong>自注意力机制</strong></p><p>Google 的 <strong>Attention is all you need </strong> 将 attention 机制发扬光大。</p><p>GAN 生成式对抗网络对于 attention 机制的应用学习有了更好的图像生成器。</p><p>Non-Local Neural Networks 与attention 相关的工作，探索了视频和图像在时空维度上非局部操作的有效性。</p><h2 id="Dual-Attention-Network-双重注意力网络"><a href="#Dual-Attention-Network-双重注意力网络" class="headerlink" title="Dual Attention Network 双重注意力网络"></a>Dual Attention Network 双重注意力网络</h2><p>此份工作注意是在语义分割领域对于 attention 机制的应用，在空间和通道维度上对于更长的上下文信息获取，首次提出了一个通用的网络架构。</p><p>引用自注意力机制解决传统的 CNN 卷机网络对于 receptive field 局部接受场在相同标签的像素上所对应的特征可能会产生差异的问题，即 CNN 不能很好的把握相同的局部信息，这会影响某些情况下的识别精度。</p><p>通过注意力机制将特征将全局上下文信息进行联系，提高了适应性增强长范围的上下文信息的能力，提高了对于语义识别的特征代表。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210329065204740.png" alt="image-20210329065204740"></p><p>首先对图片进行一个有所改进的尽可能保留了更多细节的残差网络 RESnet 生成对于像素级的预测特征，然后分别进入两个注意力机制模块，在两个模块里进行了如下操作：</p><ul><li>首先进行卷机层获得再次降维的特征</li><li>进行空间衰减矩阵操作，就是将特征中任意两个像素之间的空间关系进行建模</li><li>注意力生成矩阵与原始特征矩阵作乘法</li><li>对上述生成的矩阵和原始特征矩阵进行元素求和运算</li></ul><p><strong>得到了长范围上下文的最终表现</strong></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210329213518412.png" alt="image-20210329213518412"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210329213616073.png" alt="image-20210329213616073"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20210329213630370.png" alt="image-20210329213630370"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dual-Attention-Network-for-Scene-Segmentation&quot;&gt;&lt;a href=&quot;#Dual-Attention-Network-for-Scene-Segmentation&quot; class=&quot;headerlink&quot; title=&quot;Du
      
    
    </summary>
    
    
    
      <category term="Paper-reading" scheme="https://github.com/liysky/liysky.github.io.git/tags/Paper-reading/"/>
    
  </entry>
  
</feed>
