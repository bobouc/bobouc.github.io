<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jax&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/liysky/liysky.github.io.git/"/>
  <updated>2020-11-10T04:23:46.118Z</updated>
  <id>https://github.com/liysky/liysky.github.io.git/</id>
  
  <author>
    <name>jax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同阀值处理方法对于二值图像的影响</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/11/10/%E4%B8%8D%E5%90%8C%E9%98%80%E5%80%BC%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E5%AF%B9%E4%BA%8E%E4%BA%8C%E5%80%BC%E5%9B%BE%E5%83%8F%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/11/10/%E4%B8%8D%E5%90%8C%E9%98%80%E5%80%BC%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E5%AF%B9%E4%BA%8E%E4%BA%8C%E5%80%BC%E5%9B%BE%E5%83%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</id>
    <published>2020-11-10T04:22:00.000Z</published>
    <updated>2020-11-10T04:23:46.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比较不同的阀值处理方法对生成二值图像的影响"><a href="#比较不同的阀值处理方法对生成二值图像的影响" class="headerlink" title="比较不同的阀值处理方法对生成二值图像的影响"></a>比较不同的阀值处理方法对生成二值图像的影响</h2><h3 id="全局阀值法"><a href="#全局阀值法" class="headerlink" title="全局阀值法"></a>全局阀值法</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109133450051.png" alt="image-20201109133450051"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109133533603.png" alt="image-20201109133533603"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109141042899.png" alt="image-20201109141042899"></p><p>opencv-python 中提供了cv.threshold 方法，可以设置将大于某一个阀值或者小于某一个阀值为临界，将其设置为0或者最大值。</p><p>第一个参数：原图像</p><p>第二个参数：阀值</p><p>第三个参数：最大值</p><p>第四个参数：阀值类型</p><p>即对于大于或者小于所设定的阀值进行的不同的处理方法类型</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109150217758.png" alt="image-20201109150217758"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#read image</span></span><br><span class="line">img = cv2.imread(<span class="string">'./shot.jpg'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">#thredholding with different type</span></span><br><span class="line">ret,thresh1 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line">ret,thresh2 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_BINARY_INV)</span><br><span class="line">ret,thresh3 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_TRUNC)</span><br><span class="line">ret,thresh4 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_TOZERO)</span><br><span class="line">ret,thresh5 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_TOZERO_INV)</span><br><span class="line">titles = [<span class="string">'Original Image'</span>,<span class="string">'BINARY'</span>,<span class="string">'BINARY_INV'</span>,<span class="string">'TRUNC'</span>,<span class="string">'TOZERO'</span>,<span class="string">'TOZERO_INV'</span>]</span><br><span class="line">images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109142140114.png" alt="image-20201109142140114"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109154734991.png" alt="image-20201109154734991"></p><h3 id="自适应阀值化"><a href="#自适应阀值化" class="headerlink" title="自适应阀值化"></a>自适应阀值化</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109145358273.png" alt="image-20201109145358273"></p><p>使用统一的全局阀值法有缺陷在于，有的图像在不同的地方有不同的光照条件，在这种条件下，自适应阀值化能够提供帮助。</p><p>opencv-python 中提供了 cv.adptiveThreshold 方法</p><p>cv2.adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst])</p><p>其中，又提供了两种不同的阀值计算方法：</p><ul><li>cv.ADPTIVE_THRESH_MEAN_C: 阀值为邻域的平均值减去一个常数C</li><li>cv.ADPTIVE_THRESH_GASSIAN_C: 阀值为邻域高斯加权和减去一个常数C</li></ul><p><strong>blockSize：</strong> 决定邻域的大小</p><p><strong>C：</strong> 常数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'shot.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">img = cv2.medianBlur(img,<span class="number">5</span>)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">ret,th1 = cv2.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line">th2 = cv2.adaptiveThreshold(img,<span class="number">50</span>,cv2.ADAPTIVE_THRESH_MEAN_C,\</span><br><span class="line">            cv2.THRESH_BINARY,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">th3 = cv2.adaptiveThreshold(img,<span class="number">50</span>,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\</span><br><span class="line">            cv2.THRESH_BINARY,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">titles = [<span class="string">'Original Image'</span>, <span class="string">'Global Thresholding (v = 50)'</span>,</span><br><span class="line">            <span class="string">'Adaptive Mean Thresholding'</span>, <span class="string">'Adaptive Gaussian Thresholding'</span>]</span><br><span class="line">images = [img, th1, th2, th3]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">2</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109143750177.png" alt="image-20201109143750177"></p><p><strong>相比较全局阀值方法，可以清晰的看到，自适应阀值化不会使得图像出现大面积的目标丢失——黑色块或者白色块，局部信息的细节更加友好，虽然不会出现大面积的目标丢失，但是对于最终目标的连结性是比较差的，通常包含有许多的噪点噪声，所以对于自适应的局部特性的自适应阀值方法，最后还会进行一些噪声去除的操作，从而消除噪声，来进一步加强对于目标物体的检测。</strong></p><h3 id="Otsu-大津阈值法"><a href="#Otsu-大津阈值法" class="headerlink" title="Otsu 大津阈值法"></a>Otsu 大津阈值法</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109164629903.png" alt="image-20201109164629903"></p><p>将图像按灰度阀值分为两类，分别求出两类的均值和方差，再求出两个类之间的方差，当类之间方差比类内方差最大时，所求出的阀值T，即为所求阀值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv.imread(<span class="string">'shot.jpg'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># global thresholding</span></span><br><span class="line">ret1,th1 = cv.threshold(img,<span class="number">50</span>,<span class="number">255</span>,cv.THRESH_BINARY)</span><br><span class="line"><span class="comment"># Otsu's thresholding</span></span><br><span class="line">ret2,th2 = cv.threshold(img,<span class="number">0</span>,<span class="number">255</span>,cv.THRESH_BINARY+cv.THRESH_OTSU)</span><br><span class="line"><span class="comment"># plot all the images and their histograms</span></span><br><span class="line">images = [img, <span class="number">0</span>, th1,</span><br><span class="line">          img, <span class="number">0</span>, th2]</span><br><span class="line">titles = [<span class="string">'Original Noisy Image'</span>,<span class="string">'Histogram'</span>,<span class="string">'Global Thresholding (v=50)'</span>,</span><br><span class="line">          <span class="string">'Original Noisy Image'</span>,<span class="string">'Histogram'</span>,<span class="string">"Otsu's Thresholding"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">1</span>),plt.imshow(images[i*<span class="number">3</span>],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">2</span>),plt.hist(images[i*<span class="number">3</span>].ravel(),<span class="number">256</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">1</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">3</span>),plt.imshow(images[i*<span class="number">3</span>+<span class="number">2</span>],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">2</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109161123329.png" alt="image-20201109161123329"></p><p><strong>总结</strong></p><ul><li>全局阀值法处理的方法较自适应阀值法，两者的区别最主要集中在噪声分布和对于均匀光照还是非均匀光照的处理上，全局阀值法适合于简单单一的均匀光照条件上进行处理，而自适应阀值法适合于不同的局部光照条件，对于细节的处理会更好，但同时也会有噪声的保留。</li><li>大津法是一种更优的阀值处理方法，能够快速有效地找到类间的分割阀值，但是缺点在于对于目标的检测是单一的，如果想要检测的目标不属于同一或者接近的灰度区域，那么将会导致想要检测的目标物体的信息丢失，反映在图片上就是会有连结信息的消失（黑色块或者白色块），但是相较于普通的全局阀值处理，效果是由明显的提升对比的。</li></ul><table><thead><tr><th>全局阀值法</th><th>自适应阀值法</th><th>大津法</th></tr></thead><tbody><tr><td><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109142140114.png" alt="image-20201109142140114"></td><td><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201109143750177.png" alt="image-20201109143750177"></td><td><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201110121940396.png" alt="image-20201110121940396"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;比较不同的阀值处理方法对生成二值图像的影响&quot;&gt;&lt;a href=&quot;#比较不同的阀值处理方法对生成二值图像的影响&quot; class=&quot;headerlink&quot; title=&quot;比较不同的阀值处理方法对生成二值图像的影响&quot;&gt;&lt;/a&gt;比较不同的阀值处理方法对生成二值图像的影响&lt;/
      
    
    </summary>
    
    
    
      <category term="BuaaAssignments" scheme="https://github.com/liysky/liysky.github.io.git/tags/BuaaAssignments/"/>
    
  </entry>
  
  <entry>
    <title>频率域高通低通滤波&amp;同态滤波</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/10/23/%E9%A2%91%E7%8E%87%E5%9F%9F%E9%AB%98%E9%80%9A%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-%E5%90%8C%E6%80%81%E6%BB%A4%E6%B3%A2/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/10/23/%E9%A2%91%E7%8E%87%E5%9F%9F%E9%AB%98%E9%80%9A%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-%E5%90%8C%E6%80%81%E6%BB%A4%E6%B3%A2/</id>
    <published>2020-10-22T18:27:31.000Z</published>
    <updated>2020-10-31T08:07:32.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字图像处理作业02"><a href="#数字图像处理作业02" class="headerlink" title="数字图像处理作业02"></a>数字图像处理作业02</h2><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h2 id="空间域与频率域"><a href="#空间域与频率域" class="headerlink" title="空间域与频率域"></a>空间域与频率域</h2><p><strong>空间域与频率域提供了观察图像的不同视角</strong></p><ul><li><p>空间域中，数字图像f(x,y)即为一个定义在二维空间中的矩形区域上的离散函数</p></li><li><p>如果将f(x,y)视为幅值变化（即空间域灰度值在平面空间的梯度——直观表现为衡量表征图像中灰度变化剧烈程度的指标）的二维信号——幅值变化即为灰度值的梯度。则可以通过某些变换手段（如傅立叶变换、离散余弦变化、小波变换等）在频域下对图像进行处理。</p></li><li><p>比如在空间图像里不好找出噪声的模式，如果变换到频率域，则比较好找出噪声的模式（高频分量），并能更容易处理。</p></li></ul><p><strong>空间域：</strong></p><p>有<strong>图像像素组成的空间</strong>，其<strong>物理描述的是图像的灰度 分布函数</strong>。</p><p><strong>频率域：</strong></p><p>以频率（即波数）为自变量的描述图像的特征，可以将一幅图像值元值在空间上的变化分解为具有不同振幅、空间频率和相位的简振函数的线性叠加，图像中各种频率成分的组成和分布称为空间频谱，<strong>其物理意义是图像的频率分布函数</strong>。这种对图像的频率特征进行分解、处理和分析称为频率域处理。</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021140831977.png" alt="image-20201021140831977"></p><h2 id="频率域滤波的目的"><a href="#频率域滤波的目的" class="headerlink" title="频率域滤波的目的"></a>频率域滤波的目的</h2><ul><li>引起图像质量下降的噪声占频谱的高频段</li><li>图像边缘占高频段</li><li>图像主题或灰度缓变区域占低频段</li></ul><h2 id="在频率域研究图像的原因"><a href="#在频率域研究图像的原因" class="headerlink" title="在频率域研究图像的原因"></a>在频率域研究图像的原因</h2><ul><li>空间域复杂的问题转变为频谱上简单易于求解的问题</li><li>滤波在频率域更为直观，可以解释空间域滤波的某些性质</li><li>可以在频率域制定滤波器，做饭变换，然后在空间域使用结果滤波器作为空间域滤波器的指导</li></ul><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><ul><li>利用傅立叶变换将原问题转变为频域上解决</li><li>应用反变换，将频域上的解转化为原问题的解</li></ul><h2 id="频率域的特征"><a href="#频率域的特征" class="headerlink" title="频率域的特征"></a>频率域的特征</h2><ul><li>频谱的直流低频分量对应图像的平滑区域</li><li>频谱的高频分量对应图像的边沿或变化剧烈区域</li><li>外界叠加噪声对应于频率较高的部分</li><li>恒定的干扰条纹对应频谱中的某些特征点</li></ul><h2 id="低通滤波"><a href="#低通滤波" class="headerlink" title="低通滤波"></a>低通滤波</h2><ul><li>构造一个低通滤波器，使得低频分量顺利通过，有效阻止高频分量</li><li>低通滤波时一个牺牲图像清晰度为代价来减少干扰效果的修饰过程</li><li>高通滤波与低通滤波作用相反，它使高频分量顺利通过，而削弱低通分量</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021145937937.png" alt="image-20201021145937937"></p><ul><li>低通滤波器类型<ul><li>理想低通滤波器：尖锐</li><li>巴特沃思低通滤波器：处于理想和高斯滤波器之间</li><li>高斯滤波器：平滑</li></ul></li></ul><h3 id="低通滤波器应用实例：模糊，平滑等"><a href="#低通滤波器应用实例：模糊，平滑等" class="headerlink" title="低通滤波器应用实例：模糊，平滑等"></a>低通滤波器应用实例：模糊，平滑等</h3><ul><li><p>字符识别：通过模拟图像，桥接断裂字符的裂缝</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021151648193.png" alt="image-20201021151648193"></p></li><li><p>印刷和出版业：从一幅尖锐的原始图像产生平滑、柔和的外观，如减少人脸皮肤皱纹和小斑点</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021151701682.png" alt="image-20201021151701682"></p></li><li><p>处理卫星和航空图像：尽可能模糊细节，保留大的可识别特征</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021151718012.png" alt="image-20201021151718012"></p></li></ul><h3 id="频率域锐化滤波器"><a href="#频率域锐化滤波器" class="headerlink" title="频率域锐化滤波器"></a>频率域锐化滤波器</h3><p>图像的锐化可以通过高通滤波器过程实现，减弱傅立叶变换的低频成分，而不改变高频信息</p><p>是低通滤波的相反过程：</p><p>$H_{hp}(u,v) = 1-H_{lp}(u,v)$</p><h2 id="高通滤波器类型"><a href="#高通滤波器类型" class="headerlink" title="高通滤波器类型"></a>高通滤波器类型</h2><ul><li>理想高通滤波器：尖锐</li><li>巴特沃思高通滤波器：处于理想和高斯滤波器之间</li><li>高斯高通滤波器：平滑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">###################################################################</span></span><br><span class="line"><span class="comment">###############            进行频率域处理             #############</span></span><br><span class="line"><span class="comment">###################################################################</span></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"fog.jpg"</span>,<span class="number">0</span>)<span class="comment">#读图</span></span><br><span class="line">dft = cv2.dft(np.float64(img),flags = cv2.DFT_COMPLEX_OUTPUT)<span class="comment">#设置输入格式为float32</span></span><br><span class="line">dft_shift = np.fft.fftshift(dft)<span class="comment">#低频分量中心化处理，方便观察</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置振幅大小</span></span><br><span class="line">magnitude_spectrum = <span class="number">20</span> * np.log(cv2.magnitude(dft_shift[:, :, <span class="number">0</span>], dft_shift[:, :, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印输入图像</span></span><br><span class="line">plt.subplot(<span class="number">221</span>), plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'input'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取频谱图</span></span><br><span class="line">plt.subplot(<span class="number">222</span>), plt.imshow(magnitude_spectrum, cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Frequency Domain'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置低通滤波器</span></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = int(rows/<span class="number">2</span>), int(cols/<span class="number">2</span>) <span class="comment">#中心位置</span></span><br><span class="line">mask = np.zeros((rows, cols, <span class="number">2</span>), np.uint8)</span><br><span class="line">mask[crow<span class="number">-30</span>:crow+<span class="number">30</span>, ccol<span class="number">-30</span>:ccol+<span class="number">30</span>] = <span class="number">1</span><span class="comment">#设置矩形窗口遮罩，设为1，过滤高频</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#掩膜图像和频谱图像乘积</span></span><br><span class="line">f = dft_shift * mask</span><br><span class="line"></span><br><span class="line"><span class="comment">#傅里叶逆变换</span></span><br><span class="line">ishift = np.fft.ifftshift(f)</span><br><span class="line">iimg = cv2.idft(ishift)</span><br><span class="line">res = cv2.magnitude(iimg[:,:,<span class="number">0</span>], iimg[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示低通滤波处理图像</span></span><br><span class="line">plt.subplot(<span class="number">223</span>), plt.imshow(res, <span class="string">'gray'</span>), plt.title(<span class="string">'low'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = np.fft.fft2(img)</span><br><span class="line">fshift = np.fft.fftshift(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置高通滤波器</span></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = int(rows/<span class="number">2</span>), int(cols/<span class="number">2</span>)</span><br><span class="line">fshift[crow<span class="number">-30</span>:crow+<span class="number">30</span>, ccol<span class="number">-30</span>:ccol+<span class="number">30</span>] = <span class="number">0</span> <span class="comment">#设置矩形窗口遮罩，设为0，过滤低频</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#傅里叶逆变换</span></span><br><span class="line">ishift = np.fft.ifftshift(fshift)</span><br><span class="line">himg = np.fft.ifft2(ishift)</span><br><span class="line">himg = np.abs(himg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示原始图像和高通滤波处理图像</span></span><br><span class="line">plt.subplot(<span class="number">224</span>), plt.imshow(himg, <span class="string">'gray'</span>), plt.title(<span class="string">'high'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201023022624600.png" alt="image-20201023022624600"></p><h2 id="同态滤波"><a href="#同态滤波" class="headerlink" title="同态滤波"></a>同态滤波</h2><blockquote><p>  同态滤波是一种广泛于信号和图像处理的技术，将原本的信号经由非线性映射，转换到可以使用线性滤波器的不同域，做完运算后再映射回原始域。同态的性质就是保持相关的属性不变，而同态滤波的好处是将原本复杂的运算转为效能相同但相对简单的运算。这个概念在1960年代由Thomas Stockham，Alan V. Oppenheim和Ronald W. Schafer在麻省理工学院提出。——wiki</p></blockquote><p><strong>基本思想</strong></p><p>把图像的灰度函数 f(x,y) 看作为入射光分量和反射光分量两部分组成</p><p>$f(x,y) = i(x,y) r(x,y)$</p><p>i(x,y)：入射光，占据低频段</p><p>r(x,y)：反射光——取决于物体的特性，物体的亮度特征主要取决于反射光，占据高频段</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021161436906.png" alt="image-20201021161436906"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021155933953.png" alt="image-20201021155933953"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021161549234.png" alt="image-20201021161549234"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021161615446.png" alt="image-20201021161615446"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201021161632876.png" alt="image-20201021161632876"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">homomorphic_filter</span><span class="params">(src,d0 = <span class="number">1</span>,r1 = <span class="number">0.5</span>,rh=<span class="number">2</span>,c=<span class="number">4</span>,h=<span class="number">2.0</span>,l=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">    gray = src.copy()      <span class="comment">#duplicate img</span></span><br><span class="line">    <span class="keyword">if</span> len(src.shape) &gt; <span class="number">2</span>:</span><br><span class="line">        gray = cv2.cvtColor(src,cv2.COLOR_BGR2GRAY) <span class="comment">#set image gray</span></span><br><span class="line">    gray = np.float64(gray)</span><br><span class="line">    print(gray)</span><br><span class="line">    rows,cols = gray.shape <span class="comment">#get rows and columns of inputed pic</span></span><br><span class="line"></span><br><span class="line">    gray_fft = np.fft.fft2(gray)    <span class="comment"># two dimension fft</span></span><br><span class="line">    print(gray_fft)</span><br><span class="line">    gray_fftshift = np.fft.fftshift(gray_fft)</span><br><span class="line">    print(gray_fftshift)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    需要fftshift的原因：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1、经过fft变换后，数据的频率范围是从[0,fs]排列的。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2、而一般，我们在画图或者讨论的时候，是从[-fs/2,fs/2]的范围进行分析。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    3、因此，需要将经过fft变换后的图像的[fs/2,fs]部分移动到[-fs/2,0]这个范围内。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    而fftshift就是完成这个功能。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    通常，如果想得到所见的中间是0频的图像，经过fft变换后，都要再经过fftshift。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    dst_fftshift = np.zeros_like(gray_fftshift) <span class="comment">#产生0类似的零矩阵</span></span><br><span class="line">    <span class="comment"># np.meshgrid: 矩阵化   np.arange: start,stop,step 'arange can solve remainder'</span></span><br><span class="line">    M,N = np.meshgrid(np.arange(-cols // <span class="number">2</span>,cols // <span class="number">2</span>),np.arange(-rows//<span class="number">2</span>,rows//<span class="number">2</span>))</span><br><span class="line">    D = np.sqrt(M ** <span class="number">2</span> + N ** <span class="number">2</span>) <span class="comment">#square result</span></span><br><span class="line">    Z = (rh - r1) * (<span class="number">1</span> - np.exp(-c * (D ** <span class="number">2</span> / d0 ** <span class="number">2</span>))) + r1</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用频率增强函数进行对原频域的分量进行处理</span></span><br><span class="line">    dst_fftshift = Z * gray_fftshift                <span class="comment">#对零矩阵进行Z处理，Z*原频域处理后的分量</span></span><br><span class="line">    dst_fftshift = (h - l) * dst_fftshift + l</span><br><span class="line"></span><br><span class="line">    dst_ifftshift = np.fft.ifftshift(dst_fftshift)</span><br><span class="line">    dst_ifft = np.fft.ifft2(dst_ifftshift)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#取实数部分</span></span><br><span class="line">    dst = np.real(dst_ifft)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#np.clip to clip bigger than 255</span></span><br><span class="line">    dst = np.uint8(np.clip(dst,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#resize img</span></span><br><span class="line">    img = cv2.imread(<span class="string">"preSny.jpg"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    img = cv2.resize(img, (<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line"></span><br><span class="line">    img_new = homomorphic_filter(img)</span><br><span class="line">    result = np.hstack((img, img_new))</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">"Contrast"</span>, result)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201023012547066.png" alt="image-20201023012547066"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数字图像处理作业02&quot;&gt;&lt;a href=&quot;#数字图像处理作业02&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理作业02&quot;&gt;&lt;/a&gt;数字图像处理作业02&lt;/h2&gt;&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="BuaaAssignments" scheme="https://github.com/liysky/liysky.github.io.git/tags/BuaaAssignments/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理work-空间域/图像域-直方图均衡化/平滑空间滤波/锐化滤波器</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/10/19/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86work-%E7%A9%BA%E9%97%B4%E5%9F%9F-%E5%9B%BE%E5%83%8F%E5%9F%9F-%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96-%E5%B9%B3%E6%BB%91%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-%E9%94%90%E5%8C%96%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/10/19/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86work-%E7%A9%BA%E9%97%B4%E5%9F%9F-%E5%9B%BE%E5%83%8F%E5%9F%9F-%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96-%E5%B9%B3%E6%BB%91%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2-%E9%94%90%E5%8C%96%E6%BB%A4%E6%B3%A2%E5%99%A8/</id>
    <published>2020-10-19T09:17:58.000Z</published>
    <updated>2020-10-19T09:20:28.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字图像处理作业01"><a href="#数字图像处理作业01" class="headerlink" title="数字图像处理作业01"></a>数字图像处理作业01</h2><h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><p>直方图均衡化是将原图像通过某种变化，得到一幅灰度直方图为均匀分布的新图像的方法。</p><p>这种方法通常用来增加许多图像的全局对比度。增强局部亮度的对比对而不影响整体的对比度。</p><p><strong>实现</strong></p><p>离散的灰度图像{x}，其中$$n_i$$ 表示灰度i出现的次数，有：</p><p>$$p_x(i) = p(x = i ) = \frac{n_i}{n}$$</p><p>关于灰度i的概率密度函数</p><p>相应对 $p_x$ 的累积分布函数，有：</p><p>$f_x(i) = \sum_{j=0}^{i}P_x(j)$</p><p>再创建一个形式为 $y=T(x)$ 的变换，对于原始图像中每个值产生一个y</p><p>最后将进行值的映射和变换：</p><p>$y’ = y(max{x}-min{x}) + min{x}$</p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201015133327561.png" alt="image-20201015133327561" style="zoom:33%;" /><p>应用：</p><ul><li>对于背景和前景太亮或者太暗的图像非常有用。</li><li>例如对X光图像中更好地显示骨骼结构的曝光或曝光不足处理</li></ul><p><em>代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#read image</span></span><br><span class="line">img = cv2.imread(<span class="string">"preSny.jpg"</span>, <span class="number">1</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">"src"</span>, gray)</span><br><span class="line"></span><br><span class="line"><span class="comment">#call opencv-python histogram function: equalizeHist()</span></span><br><span class="line">dst = cv2.equalizeHist(gray)</span><br><span class="line"><span class="comment">#show image</span></span><br><span class="line">cv2.imshow(<span class="string">"dst"</span>, dst)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destoryAllWindows()</span><br></pre></td></tr></table></figure><h3 id="平滑空间滤波器"><a href="#平滑空间滤波器" class="headerlink" title="平滑空间滤波器"></a>平滑空间滤波器</h3><p>作用：主要用于去除图像中一些不重要的细节。</p><p>分类：</p><ul><li>线性滤波器：均值滤波器</li><li>非线性滤波器<ul><li>最大值滤波器</li><li>中值滤波器</li><li>最小值滤波器</li></ul></li></ul><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201015144348111.png" alt="image-20201015144348111" style="zoom: 33%;" /><p><strong>均值滤波器</strong></p><p>均值滤波器属于线性滤波器，有：</p><ul><li>减小图像灰度的“尖锐”变化</li><li>减小噪声</li><li>但由于图像边缘是图像灰度尖锐变化引起的，所以存在<strong>边缘模糊问题</strong></li></ul><p><strong>中值滤波器</strong></p><p>非线性滤波器</p><p>基于滤波器所在图像区域中像素的排序，由排序结果决定的值代替中心像素的值</p><p>中值滤波器：用像素领域内中间值代替该像素（寻找像素周围内的中间值）</p><p>主要计算公式：</p><p>$R = mid{Z_k| k = 1,2,…n}$</p><p><strong>主要用途：去除噪声</strong></p><p>算法的特点</p><ul><li>去除噪声的同时，比较好的保留边的锐度和图像的细节（优于均值滤波器）</li><li>能够有效去除脉冲噪声：以黑白点叠加在图像上</li></ul><p><em>代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#source image and resize image</span></span><br><span class="line">img00 = cv2.imread(<span class="string">"demoShot.png"</span>,<span class="number">1</span>)</span><br><span class="line">scale_percent = <span class="number">45</span></span><br><span class="line">img_width = int(img00.shape[<span class="number">1</span>]*scale_percent / <span class="number">100</span>)</span><br><span class="line">img_height = int(img00.shape[<span class="number">0</span>]*scale_percent / <span class="number">100</span>)</span><br><span class="line">dsize = (img_width, img_height)</span><br><span class="line">img00 = cv2.resize(img00, dsize)</span><br><span class="line"></span><br><span class="line"><span class="comment">#medianBlur and Blur</span></span><br><span class="line">img_medianBlur = cv2.medianBlur(img00, <span class="number">7</span>)</span><br><span class="line">img_Blur = cv2.blur(img00,(<span class="number">7</span>,<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#cv2.imshow("image", np.hstack((img00,img_medianBlur,img_Blur)) )</span></span><br><span class="line">cv2.imshow(<span class="string">"originShot"</span>, img00)</span><br><span class="line">cv2.imshow(<span class="string">"medianBlur"</span>, img_medianBlur)</span><br><span class="line">cv2.imshow(<span class="string">"Blur"</span>, img_Blur)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="锐化滤波器"><a href="#锐化滤波器" class="headerlink" title="锐化滤波器"></a>锐化滤波器</h3><p>主要作用：</p><ul><li><p>突出图像中的细节，增强被模糊的细节</p></li><li><p>印刷中的层次强调，弥补扫描钝化</p></li><li><p>超声探测成像，针对于分辨率低的图片</p></li><li><p>图像识别中的边缘提取</p></li><li><p>回复过度钝化，曝光不足的图像</p></li><li><p>尖锐目标识别</p></li></ul><p>采用的是用微分的方式进行锐化，有一阶微分滤波器和二阶微分滤波器</p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201015143033332.png" alt="image-20201015143033332" style="zoom: 33%;" /><p><strong>梯度算子——一阶微分滤波器</strong></p><p>边缘检测不是非常明显，边缘检测产生的噪声比较多</p><p><strong>拉普拉斯算子——二阶微分滤波器</strong></p><p>主要保留目标轮廓的锐化效果，边缘轮廓显示十分明显，适合于进行目标物体边缘检测</p><p><em>代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"apple.png"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">img = cv2.resize(img, (<span class="number">300</span>,<span class="number">400</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv2.GaussianBlur(img, (3, 3), 0)</span></span><br><span class="line"><span class="comment"># img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cv2.sobel derivative</span></span><br><span class="line">sobel_x = cv2.Sobel(img,cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize = <span class="number">5</span>)</span><br><span class="line">sobel_y = cv2.Sobel(img,cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize = <span class="number">5</span>)</span><br><span class="line"><span class="comment">#converting back to uint8</span></span><br><span class="line">sobel_x = cv2.convertScaleAbs(sobel_x)</span><br><span class="line">sobel_y = cv2.convertScaleAbs(sobel_y)</span><br><span class="line">sobel_xy = cv2.addWeighted(sobel_x, <span class="number">0.5</span>, sobel_y, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#cv2.scharr derivative</span></span><br><span class="line">scharr_x = cv2.Scharr(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">scharr_y = cv2.Scharr(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">scharr_x = cv2.convertScaleAbs(scharr_x)</span><br><span class="line">scharr_y = cv2.convertScaleAbs(scharr_y)</span><br><span class="line">scharr_xy = cv2.addWeighted(scharr_x, <span class="number">0.5</span>, scharr_y, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#apply laplace</span></span><br><span class="line">laplacian = cv2.Laplacian(img,cv2.CV_64F)</span><br><span class="line">laplacian = cv2.convertScaleAbs(laplacian)</span><br><span class="line"></span><br><span class="line"><span class="comment">#show result</span></span><br><span class="line">cv2.imshow(<span class="string">"origin"</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">"sobel"</span>, sobel_xy)</span><br><span class="line"><span class="comment">#cv2.imshow("scharr", scharr_xy)</span></span><br><span class="line">cv2.imshow(<span class="string">"laplacian"</span>, laplacian)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数字图像处理作业01&quot;&gt;&lt;a href=&quot;#数字图像处理作业01&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理作业01&quot;&gt;&lt;/a&gt;数字图像处理作业01&lt;/h2&gt;&lt;h3 id=&quot;直方图均衡化&quot;&gt;&lt;a href=&quot;#直方图均衡化&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="BuaaAssignments" scheme="https://github.com/liysky/liysky.github.io.git/tags/BuaaAssignments/"/>
    
  </entry>
  
  <entry>
    <title>笔记- GAMES101计算机图形学入门-闫令琪</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/10/09/%E7%AC%94%E8%AE%B0-GAMES101%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8-%E9%97%AB%E4%BB%A4%E7%90%AA/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/10/09/%E7%AC%94%E8%AE%B0-GAMES101%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8-%E9%97%AB%E4%BB%A4%E7%90%AA/</id>
    <published>2020-10-09T15:22:19.000Z</published>
    <updated>2020-10-10T19:28:25.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记-GAMES101计算机图形学入门-闫令琪"><a href="#笔记-GAMES101计算机图形学入门-闫令琪" class="headerlink" title="笔记- GAMES101计算机图形学入门-闫令琪"></a>笔记- GAMES101计算机图形学入门-闫令琪</h1><h2 id="P1-Overview-of-Computer-Graphic"><a href="#P1-Overview-of-Computer-Graphic" class="headerlink" title="P1 Overview of Computer Graphic"></a>P1 Overview of Computer Graphic</h2><ul><li><p>什么是好的画面：亮</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009192116202.png" alt="image-20201009192116202"></p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009192142797.png" alt="image-20201009192142797"></p></li></ul><p><strong>课程主要内容</strong></p><ul><li>Resterization 光栅化</li><li>Curves and Meshes 曲线和曲面（几何）</li><li>Ray Tracing 光线追踪</li><li>Animation / Simulation 动画和模拟</li></ul><h3 id="Rasterization-光栅化"><a href="#Rasterization-光栅化" class="headerlink" title="Rasterization 光栅化"></a>Rasterization 光栅化</h3><p>理解：将三位形态的几何形体显示在屏幕上</p><ul><li>Project geometry primitive (3D triangle / polygons) onto the screen</li><li>Break projected primitives into fragments (pixels)</li><li>Gold standard in Video Games (Real-time Applications)</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009225239197.png" alt="image-20201009225239197"></p><h3 id="Curves-and-Meshes"><a href="#Curves-and-Meshes" class="headerlink" title="Curves and Meshes"></a>Curves and Meshes</h3><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009225422283.png" alt="image-20201009225422283"></p><h3 id="Ray-Tracing"><a href="#Ray-Tracing" class="headerlink" title="Ray Tracing"></a>Ray Tracing</h3><ul><li>Shoot rays from the camera though each pixel<ul><li>calculate intersection and shading</li><li>continue to bounce the rays till the hit light sources </li></ul></li><li>Gold standard in Animations / Movies (Offline Applications)</li></ul><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009225708474.png" alt="image-20201009225708474"></p><h3 id="Animation-Simulation"><a href="#Animation-Simulation" class="headerlink" title="Animation / Simulation"></a>Animation / Simulation</h3><ul><li>Key frame Animation</li><li>Mass-spring System</li></ul><h3 id="CG-is-NOT-CV"><a href="#CG-is-NOT-CV" class="headerlink" title="CG is NOT CV"></a>CG is NOT CV</h3><p>计算机图形学不是计算机视觉</p><ul><li><p>计算机视觉是进行图像的识别，比如：识别人</p><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/image-20201009230345629.png" alt="image-20201009230345629"></p></li></ul><h3 id="Use-An-IDE"><a href="#Use-An-IDE" class="headerlink" title="Use An IDE"></a>Use An IDE</h3><ul><li>hints syntax </li><li>function</li></ul><p><strong>Recommended IDEs</strong></p><ul><li>Visual Studio / Visual Studio Code</li><li>Qt Creator</li></ul><h2 id="P2-Review-of-Linear-Algebra"><a href="#P2-Review-of-Linear-Algebra" class="headerlink" title="P2 Review of Linear Algebra"></a>P2 Review of Linear Algebra</h2><p><strong>Graphics’s Dependencies</strong></p><ul><li>Basic mathematics<ul><li>Linear algebra, calculus, statistics</li></ul></li><li>Basic physics<ul><li>Optics, Mechanics</li></ul></li><li>Misc<ul><li>Signal processing</li><li>Numerical analysis</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;笔记-GAMES101计算机图形学入门-闫令琪&quot;&gt;&lt;a href=&quot;#笔记-GAMES101计算机图形学入门-闫令琪&quot; class=&quot;headerlink&quot; title=&quot;笔记- GAMES101计算机图形学入门-闫令琪&quot;&gt;&lt;/a&gt;笔记- GAMES101计算机图
      
    
    </summary>
    
    
    
      <category term="learning-note" scheme="https://github.com/liysky/liysky.github.io.git/tags/learning-note/"/>
    
  </entry>
  
  <entry>
    <title>std::vector in c++</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/09/23/std-vector-in-c/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/09/23/std-vector-in-c/</id>
    <published>2020-09-23T15:57:49.000Z</published>
    <updated>2020-10-09T15:24:48.426Z</updated>
    
    <content type="html"><![CDATA[<p>std::vector in C++</p><p><strong>Declaration of std::vector</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; marks;</span><br></pre></td></tr></table></figure><p><strong>initialization of std::vector</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; marks = &#123;<span class="number">50</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">65</span>, <span class="number">80</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; marks;</span><br><span class="line">marks = &#123;<span class="number">50</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">65</span>, <span class="number">80</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>Length of std::vector</strong></p><p>marks.size() — <strong>function</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; marks = &#123;<span class="number">50</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">65</span>, <span class="number">80</span>&#125;;</span><br><span class="line">    marks = &#123;<span class="number">50</span>, <span class="number">47</span>, <span class="number">60</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"length of array : "</span> &lt;&lt; marks.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Pass a std::vector to function</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">( <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v )</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"v["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span> &lt;&lt; v[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//        v[2] = 4;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    printVector(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>noted from: <a href="https://www.codesdope.com/cpp-stdvector/" target="_blank" rel="noopener">https://www.codesdope.com/cpp-stdvector/</a></p><blockquote><p>  <strong>void printVector(const std::vector&lt;int&gt; &amp;n) - const is used here to prevent the compiler from making a copy of the vector and this enhances the performance. The passed vector will be n in this function as &amp;n is the parameter of the function ‘printArray’.</strong></p></blockquote><p><img src="https://jaximage-1253102271.cos.ap-beijing.myqcloud.com/uPic/Screen%20Shot%202020-09-23%20at%2023.11.10.png" alt="Screen Shot 2020-09-23 at 23.11.10"></p><p><strong>front &amp; back</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//usage of front;</span></span><br><span class="line">marks.front();</span><br><span class="line"><span class="comment">//usage of back;</span></span><br><span class="line">marks.back();</span><br></pre></td></tr></table></figure><p><strong>empty</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">marks.empty() <span class="comment">//if true, return 1; else return 0;</span></span><br></pre></td></tr></table></figure><p><strong>resize</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    v1.resize(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>() ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>assign</strong></p><p>assigns new contents to the vector and replaces its current contents all.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.assign(<span class="number">7</span>, <span class="number">40</span>);  <span class="comment">// 7 elements each of value 40</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>push_back</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    v.push_back(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printing values of v</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"elements of v"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>pop_back</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    v.pop_back();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printing values of v</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"elements of v"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>reserve</strong></p><p>This function increases the capacity of the vector if the desired number of elements is greater than the capacity of the vector.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v1.reserve(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity : "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capacity:100</span><br></pre></td></tr></table></figure><p><strong>erase</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    v1.erase(v1.<span class="built_in">begin</span>()+<span class="number">4</span>);  <span class="comment">// removing a single element at position 4</span></span><br><span class="line">    v2.erase(v2.<span class="built_in">begin</span>()+<span class="number">1</span>, v2.<span class="built_in">begin</span>()+<span class="number">3</span>);   <span class="comment">// removing range of elements from position 1 till 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//printing the values of v1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Values of v1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printing the values of v2</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Values of v2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v2.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Values of v1</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">Values of v2</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>clear</strong></p><p>clear all elements of the vector.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    v1.swap(v2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Vector v1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: v1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Vector v2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: v2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Multidimensional std::vector</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;  v &#123;&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span></span><br><span class="line"><span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>Passing a multidimensional std::vector to a function</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;  v &#123;&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="built_in">display</span>(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;std::vector in C++&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declaration of std::vector&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 7.Reverse Integer</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/09/22/Reverse-Integer/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/09/22/Reverse-Integer/</id>
    <published>2020-09-22T14:29:14.000Z</published>
    <updated>2020-10-09T15:39:32.543Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. Reverse Integer</a></p><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p><strong>Example 1:</strong></p><p>Input: 123<br>Output: 321<br><strong>Example 2:</strong></p><p>Input: -123<br>Output: -321<br><strong>Example 3:</strong></p><p>Input: 120<br>Output: 21<br>Note:<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">           x /= <span class="number">10</span>;</span><br><span class="line">           <span class="keyword">if</span>(ans &gt; INT_MAX / <span class="number">10</span> || ans == INT_MAX / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(ans &lt; INT_MIN / <span class="number">10</span> || ans == INT_MIN / <span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           ans = ans * <span class="number">10</span> + pop;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Explanation：</strong></p><blockquote><p>  #define INT_MAX = 2147483647</p><p>  #define INT_MAX = -INT_MAX-1</p></blockquote><p>也就是关于int的最大值和最小值的说明</p><p>将一个数字进行反转，从个位数进行取，使用取余的方法，再使用“余数X10”进行往高位移动。</p><p>这个过程中需要注意溢出时的条件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;7. Reverse Integer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a 32-bit 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode4. Median of Two Sorted Arrays</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/10/LeetCode4-Median-of-Two-Sorted-Arrays/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/10/LeetCode4-Median-of-Two-Sorted-Arrays/</id>
    <published>2020-03-10T15:09:06.000Z</published>
    <updated>2020-05-05T15:36:19.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-Median-of-Two-Sorted-Arrays"><a href="#4-Median-of-Two-Sorted-Arrays" class="headerlink" title="4. Median of Two Sorted Arrays"></a>4. Median of Two Sorted Arrays</h3><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4. Median of Two Sorted Arrays</a></p><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0<br>Example 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution 1"></a>solution 1</h3><p>merge array1 and array2, then return the median.</p><p><strong>Time complexity: O(m+n)</strong></p><p><strong>Space complexity: O( m+n )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (nums2[n/<span class="number">2</span> - <span class="number">1</span>] + nums2[n/<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums2[n/<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (nums1[m/<span class="number">2</span> -<span class="number">1</span>] + nums1[m/<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[m/<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count != (m+n))&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == m)&#123;</span><br><span class="line">                <span class="keyword">while</span>( j != n)&#123;</span><br><span class="line">                    nums[count++] = nums2[j++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">                <span class="keyword">while</span>(i != m)&#123;</span><br><span class="line">                    nums[count++] = nums1[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])&#123;</span><br><span class="line">                nums[count++] = nums1[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums[count++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count %<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (nums[count/<span class="number">2</span> - <span class="number">1</span>] + nums[count/<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[count/<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;4-Median-of-Two-Sorted-Arrays&quot;&gt;&lt;a href=&quot;#4-Median-of-Two-Sorted-Arrays&quot; class=&quot;headerlink&quot; title=&quot;4. Median of Two Sorted Arrays&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode628. Maximum Product of Three Numbers</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/07/LeetCode628-Maximum-Product-of-Three-Numbers/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/07/LeetCode628-Maximum-Product-of-Three-Numbers/</id>
    <published>2020-03-07T14:48:27.000Z</published>
    <updated>2020-05-05T15:36:19.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="628-Maximum-Product-of-Three-Numbers"><a href="#628-Maximum-Product-of-Three-Numbers" class="headerlink" title="628. Maximum Product of Three Numbers"></a>628. Maximum Product of Three Numbers</h3><p><a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/" target="_blank" rel="noopener">628. Maximum Product of Three Numbers</a></p><p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p><p>Example 1:</p><p>Input: [1,2,3]<br>Output: 6</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><p>Input: [1,2,3,4]<br>Output: 24</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>The length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000].<br>Multiplication of any three numbers in the input won’t exceed the range of 32-bit signed integer.</p><h3 id="Solution-one"><a href="#Solution-one" class="headerlink" title="Solution one"></a>Solution one</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[nums.length-<span class="number">1</span>], nums[nums.length-<span class="number">1</span>]* nums[nums.length-<span class="number">2</span>] * nums[nums.length-<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Solution 1</strong></p><p>Most important key of solution is that the negative situation may be contained in array.</p><p>return two miximum * one maximum compared to three maximum.</p><p><strong>Time complexity: O(nlogn)</strong></p><p><strong>Space complexity: O(0)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[n<span class="number">-1</span>], nums[n<span class="number">-1</span>] * nums[n - <span class="number">2</span>] * nums[n - <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>sort( begin( ), end( ) );</li><li>sort( rbegin( ), rend( ) );</li></ul><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution 2"></a>solution 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max1 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max2 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max3 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> min1 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> min2 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; max1)&#123;</span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = max1;</span><br><span class="line">                max1 = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &gt; max2)&#123;</span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &gt; max3)&#123;</span><br><span class="line">                max3 = num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &lt; min1)&#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                min1 = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; min2)&#123;</span><br><span class="line">                min2 = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max( max1 * min1 * min2, max1 * max2 * max3 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note:</strong> In C++, max is INT_MAX, min is INT_MIN</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;628-Maximum-Product-of-Three-Numbers&quot;&gt;&lt;a href=&quot;#628-Maximum-Product-of-Three-Numbers&quot; class=&quot;headerlink&quot; title=&quot;628. Maximum Product
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode637. Average of Levels in Binary Tree</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/04/LeetCode637-Average-of-Levels-in-Binary-Tree/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/04/LeetCode637-Average-of-Levels-in-Binary-Tree/</id>
    <published>2020-03-04T12:46:13.000Z</published>
    <updated>2020-05-05T15:36:19.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="637-Average-of-Levels-in-Binary-Tree"><a href="#637-Average-of-Levels-in-Binary-Tree" class="headerlink" title="637. Average of Levels in Binary Tree"></a>637. Average of Levels in Binary Tree</h3><p><a href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/" target="_blank" rel="noopener">637. Average of Levels in Binary Tree</a></p><p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>Input:<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>Output: [3, 14.5, 11]</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].<br>Note:</p><p>The range of node’s value is in the range of 32-bit signed integer.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DFS Solution.</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; sum_count;</span><br><span class="line">        preorder(root, <span class="number">0</span>, sum_count);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : sum_count)&#123;</span><br><span class="line">            ans.push_back( <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(p.first)/p.second );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">( TreeNode* root, <span class="keyword">int</span> depth,  <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;&amp; sum_count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(depth &gt;= sum_count.<span class="built_in">size</span>()) sum_count.push_back(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        sum_count[depth].first += root-&gt;val;</span><br><span class="line">        ++sum_count[depth].second;</span><br><span class="line">        preorder(root-&gt;left, depth+<span class="number">1</span>, sum_count);</span><br><span class="line">        preorder(root-&gt;right, depth+<span class="number">1</span>, sum_count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>note：pair using &amp; explain</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CPP program to illustrate pair STL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pair &lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; PAIR1 ;</span><br><span class="line"></span><br><span class="line">    PAIR1.first = <span class="number">100</span>;</span><br><span class="line">    PAIR1.second = <span class="string">'G'</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; PAIR1.first &lt;&lt; <span class="string">" "</span> ; <span class="comment">//visit the first value;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; PAIR1.second &lt;&lt; <span class="built_in">endl</span> ; <span class="comment">//visit the second value;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out:</span></span><br><span class="line"><span class="comment">//100G</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//standard initializtion</span></span><br><span class="line">pair &lt;data_type1, data_type2&gt; pair_name(value1, value2);</span><br><span class="line"><span class="comment">//initialization can be also omitted</span></span><br><span class="line">pair &lt;data_type1, data_type2&gt; pair_name;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: O(N) , N is the nodes number of Tree</strong></p><p><strong>Space Complexity: O(H) , H is the height of Tree</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BFS Solution.</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">      <span class="built_in">vector</span>&lt;TreeNode*&gt; curr, next;</span><br><span class="line">      curr.push_back(root);</span><br><span class="line">      <span class="keyword">while</span>(!curr.empty())&#123;<span class="comment">//when curr point is null, it means all over.</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; node : curr )&#123;</span><br><span class="line">          sum += node-&gt;val;</span><br><span class="line">          <span class="keyword">if</span>(node-&gt;left) next.push_back(node-&gt;left);</span><br><span class="line">          <span class="keyword">if</span>(node-&gt;right) next.push_back(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(sum)/curr.<span class="built_in">size</span>());</span><br><span class="line">        curr.swap(next);<span class="comment">//swap curr with next</span></span><br><span class="line">        next.<span class="built_in">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: O(N) , N is the nodes number of Tree</strong></p><p><strong>Space Complexity: O(M) , M is the maximum  of every level to the Tree</strong></p><p>Solution version using Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java</span></span><br><span class="line"><span class="comment"> * DFS</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; count = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        getSumOfLevel(root, <span class="number">0</span>, ans, count);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)&#123;</span><br><span class="line">            ans.set(i, ans.get(i)/count.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSumOfLevel</span><span class="params">(TreeNode t, <span class="keyword">int</span> depth, List &lt; Double &gt; ans, List &lt; Integer &gt; count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(depth &lt; ans.size())&#123;</span><br><span class="line">            ans.set(depth, ans.get(depth)+t.val);</span><br><span class="line">            count.set(depth, count.get(depth)+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans.add(t.val*<span class="number">1.0</span>);</span><br><span class="line">            count.add(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getSumOfLevel(t.left, depth+<span class="number">1</span>, ans, count);</span><br><span class="line">        getSumOfLevel(t.right, depth+<span class="number">1</span>, ans, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java BFS</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            Queue&lt;TreeNode&gt; temp = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                TreeNode t = queue.remove();</span><br><span class="line">                sum += t.val;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(t.left != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    temp.add(t.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(t.right != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    temp.add(t.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queue = temp;</span><br><span class="line">            ans.add(((<span class="keyword">double</span>)sum)/count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;637-Average-of-Levels-in-Binary-Tree&quot;&gt;&lt;a href=&quot;#637-Average-of-Levels-in-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;637. Average of Leve
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode463. Island Perimeter</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/02/LeetCode463-Island-Perimeter/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/02/LeetCode463-Island-Perimeter/</id>
    <published>2020-03-01T17:05:38.000Z</published>
    <updated>2020-05-05T15:36:19.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="463-Island-Perimeter"><a href="#463-Island-Perimeter" class="headerlink" title="463. Island Perimeter"></a>463. Island Perimeter</h3><p><a href="https://leetcode-cn.com/problems/island-perimeter/" target="_blank" rel="noopener">463. Island Perimeter</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.</p><p>Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p><p>The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island. </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><p>Input:<br>[[0,1,0,0],<br> [1,1,1,0],<br> [0,1,0,0],<br> [1,1,0,0]]</p><p>Output: 16</p><p>Explanation: The perimeter is the 16 yellow stripes in the image below:</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcex6vvgn3j306505xwe9.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid.empty())    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> area = <span class="number">0</span>, nei = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; m; ++y)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; ++x)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[y][x] == <span class="number">1</span>)&#123;</span><br><span class="line">                    area++;</span><br><span class="line">                    <span class="keyword">if</span>(y &gt; <span class="number">0</span> &amp;&amp;grid[y<span class="number">-1</span>][x] == <span class="number">1</span> )  nei++;</span><br><span class="line">                    <span class="keyword">if</span>(y &lt; m<span class="number">-1</span> &amp;&amp; grid[y+<span class="number">1</span>][x] == <span class="number">1</span>) nei++;</span><br><span class="line">                    <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; grid[y][x<span class="number">-1</span>]==<span class="number">1</span>) nei++;</span><br><span class="line">                    <span class="keyword">if</span>(x &lt; n<span class="number">-1</span>&amp;&amp; grid[y][x+<span class="number">1</span>] == <span class="number">1</span>) nei++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area*<span class="number">4</span> - nei;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: O(m*n)</strong></p><p><strong>Space Complexity: O(1)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;463-Island-Perimeter&quot;&gt;&lt;a href=&quot;#463-Island-Perimeter&quot; class=&quot;headerlink&quot; title=&quot;463. Island Perimeter&quot;&gt;&lt;/a&gt;463. Island Perimeter&lt;/h3
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最小数组</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/01/%E6%9C%80%E5%B0%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/01/%E6%9C%80%E5%B0%8F%E6%95%B0%E7%BB%84/</id>
    <published>2020-03-01T15:53:39.000Z</published>
    <updated>2020-05-05T15:36:19.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>第一行输入一个数n，1 &lt;= n &lt;= 1000，下面输入n行数据，每一行有两个数，分别是x y。输出一组x y，该组数据是所有数据中x最小，且在x相等的情况下y最小的。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有多组数据。</span><br><span class="line">每组输入n，然后输入n个整数对。</span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出最小的整数对。</span><br></pre></td></tr></table></figure><p>示例1</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 3</span><br><span class="line">2 2</span><br><span class="line">5 5</span><br><span class="line">2 1</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">int</span> m, n, x, y;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;<span class="comment">//提前输入第一组数据，然后在进行比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++)&#123;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">      <span class="keyword">if</span>(x&lt;m||x==m&amp;&amp;y&lt;n)&#123;</span><br><span class="line">        m = x;</span><br><span class="line">        n = y;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">" "</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整体思路：只保留最小的一组数据</strong></p><p><strong>#include&lt;bits/stdc++.h&gt; 几乎包含了所有C++ 的头文件</strong></p><p>C++常规解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Pair a,Pair b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x&gt;b.x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回升序排序</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.x==b.x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.y&lt;b.y)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//若x相同时，按y升序</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//否则还是按x升序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//按x降序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        Pair *p=<span class="keyword">new</span> Pair[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">        sort(p,p+n,cmp);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[<span class="number">0</span>].x&lt;&lt;<span class="string">" "</span>&lt;&lt;p[<span class="number">0</span>].y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于C++ 的sort函数的使用</strong></p><p>参数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">RandomIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">sort</span>( <span class="title">RandomIt</span> <span class="title">first</span>, <span class="title">RandomIt</span> <span class="title">last</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">RandomIt</span>, <span class="title">class</span> <span class="title">Compare</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">sort</span>( <span class="title">RandomIt</span> <span class="title">first</span>, <span class="title">RandomIt</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure><p>形式：sort(first_pointer,first_pointer+n,cmp)</p><p>其中cmp可以省略，如果省略则默认按照升序排序</p><p>且 <strong>cmp</strong> 函数可以重载</p><ul><li>可在结构体内部重载</li><li>也可在结构体外部进行重载</li></ul><p>cmp基本用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b;<span class="comment">//即返回降序排序</span></span><br><span class="line">  <span class="comment">//return a &lt; b；//返回升序排序</span></span><br><span class="line">    <span class="comment">//----&gt; 其上都是根据字面排序literally</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmp结构体排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student stu[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.x &gt; b.x; <span class="comment">//literally sort by a.x</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;第一行输入一个数n，1 &amp;lt;= n &amp;lt;= 1000，下面输入n行数据，每一行有两个数，分别是x y。输出一组x y
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>比较奇偶个数</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/03/01/%E6%AF%94%E8%BE%83%E5%A5%87%E5%81%B6%E4%B8%AA%E6%95%B0/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/03/01/%E6%AF%94%E8%BE%83%E5%A5%87%E5%81%B6%E4%B8%AA%E6%95%B0/</id>
    <published>2020-03-01T15:20:01.000Z</published>
    <updated>2020-05-05T15:36:19.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>第一行输入一个数，为n，第二行输入n个数，这n个数中，如果偶数比奇数多，输出NO，否则输出YES。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有多组数据。</span><br><span class="line">每组输入n，然后输入n个整数（1&lt;&#x3D;n&lt;&#x3D;1000）。</span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果偶数比奇数多，输出NO，否则输出YES。</span><br></pre></td></tr></table></figure><p>示例1</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 5 2 4 3</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//奇数的个数(净个数)</span></span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">1</span>) count++;</span><br><span class="line">            <span class="keyword">else</span> count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>第一个while 保证了多次测试，只要输入合法就一直在循环判断中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;第一行输入一个数，为n，第二行输入n个数，这n个数中，如果偶数比奇数多，输出NO，否则输出YES。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode504. Base 7</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/29/LeetCode504-Base-7/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/29/LeetCode504-Base-7/</id>
    <published>2020-02-29T13:25:47.000Z</published>
    <updated>2020-05-05T15:36:19.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="504-Base-7"><a href="#504-Base-7" class="headerlink" title="504. Base 7"></a>504. Base 7</h3><p><a href="https://leetcode-cn.com/problems/base-7/" target="_blank" rel="noopener">504. Base 7</a></p><p>Given an integer, return its base 7 string representation.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>Input: 100<br>Output: “202”<br>Example 2:</p><p>Input: -7<br>Output: “-10”<br>Note: The input will be in range of [-1e7, 1e7].</p><h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convertToBase7</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        StringBuilder com = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = num &lt; <span class="number">0</span>;</span><br><span class="line">        num = Math.abs(num);</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line">            com.append(num % <span class="number">7</span>);</span><br><span class="line">            num = num/<span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder com_ = com.reverse();</span><br><span class="line">        String str = com_.toString();</span><br><span class="line">        <span class="keyword">return</span> flag ? <span class="string">"-"</span>+str : str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: O(logn)</strong></p><p><strong>Space Complexity: O(logn)</strong></p><p><strong>note:</strong></p><p>important: num.toString( ); ——&gt; wrong. Object numberdo not has the method “toString( )”</p><p>don’t foget to check the initial condition firstly.</p><h3 id="A-good-solution-of-java-Integer"><a href="#A-good-solution-of-java-Integer" class="headerlink" title="A good solution of java Integer"></a>A good solution of java Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToBase7</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.toString(num, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a>C++ solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convertToBase7</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        bool is_nagetive = num &lt; <span class="number">0</span>;</span><br><span class="line">        num = abs(num);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            ans = std::to_string(num%<span class="number">7</span>) + ans;</span><br><span class="line">            num /=<span class="number">7</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(num &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(is_nagetive)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-"</span>+ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>*<em>key:implicit handle of special case 0 –&gt;&gt; using do{ }while( ); *</em></p><p><strong>Time Complexity: O(logn)</strong></p><p><strong>Space Complexity: O(logn)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;504-Base-7&quot;&gt;&lt;a href=&quot;#504-Base-7&quot; class=&quot;headerlink&quot; title=&quot;504. Base 7&quot;&gt;&lt;/a&gt;504. Base 7&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/pro
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode551. Student Attendance Record I</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/27/LeetCode551-Student-Attendance-Record-I/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/27/LeetCode551-Student-Attendance-Record-I/</id>
    <published>2020-02-27T13:48:48.000Z</published>
    <updated>2020-05-05T15:36:19.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="551-Student-Attendance-Record-I"><a href="#551-Student-Attendance-Record-I" class="headerlink" title="551. Student Attendance Record I"></a>551. Student Attendance Record I</h3><p><a href="https://leetcode-cn.com/problems/student-attendance-record-i/" target="_blank" rel="noopener">551. Student Attendance Record I</a></p><p>You are given a string representing an attendance record for a student. The record only contains the following three characters:<br>‘A’ : Absent.<br>‘L’ : Late.<br>‘P’ : Present.<br>A student could be rewarded if his attendance record doesn’t contain more than one ‘A’ (absent) or more than two continuous ‘L’ (late).</p><p>You need to return whether the student could be rewarded according to his attendance record.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>Input: “PPALLP”<br>Output: True<br>Example 2:</p><p>Input: “PPALLL”<br>Output: False</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkRecord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'A'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( i &lt; (s.length()-<span class="number">2</span>) &amp;&amp; (s.charAt(i) == <span class="string">'L'</span>) &amp;&amp; (s.charAt(i+<span class="number">1</span>) == <span class="string">'L'</span>) &amp;&amp; (s.charAt(i+<span class="number">2</span>) == <span class="string">'L'</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (count &lt; <span class="number">2</span>) ;</span><br><span class="line">        <span class="comment">//return (count &lt; 2) &amp;&amp; (s.indexOf("LLL") &lt; 0)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c++</span></span><br><span class="line"><span class="comment">//from Huahua, good solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkRecord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> l&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'A'</span>) ++a;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'L'</span>) ++l;</span><br><span class="line">            <span class="keyword">else</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(a &gt; <span class="number">1</span> || l &gt; <span class="number">2</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bool <span class="title">checkRecord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.find(<span class="string">'A'</span>, s.find(<span class="string">'A'</span>) + <span class="number">1</span>) == -<span class="number">1</span> &amp;&amp;  s.find(<span class="string">"LLL"</span>) == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: solution1: O(n) + O(n), solution2: O(n)</strong></p><p><strong>Space Complexity: O(1)</strong></p><p><strong>note:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"lipsky"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> p = <span class="string">"l"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = s.<span class="built_in">find</span>(p, <span class="number">2</span>) ;  <span class="comment">//find "l" from 2 index in s; if true return index, else return -1 (same as java)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;551-Student-Attendance-Record-I&quot;&gt;&lt;a href=&quot;#551-Student-Attendance-Record-I&quot; class=&quot;headerlink&quot; title=&quot;551. Student Attendance Record
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 303. Range Sum Query - Immutable</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/26/LeetCode-303-Range-Sum-Query-Immutable/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/26/LeetCode-303-Range-Sum-Query-Immutable/</id>
    <published>2020-02-26T14:53:31.000Z</published>
    <updated>2020-05-05T15:36:19.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="303-Range-Sum-Query-Immutable"><a href="#303-Range-Sum-Query-Immutable" class="headerlink" title="303. Range Sum Query - Immutable"></a>303. Range Sum Query - Immutable</h3><p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/" target="_blank" rel="noopener">303. Range Sum Query - Immutable</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><p>Given nums = [-2, 0, 3, -5, 2, -1]</p><p>sumRange(0, 2) -&gt; 1<br>sumRange(2, 5) -&gt; -1<br>sumRange(0, 5) -&gt; -3<br>Note:</p><p>You may assume that the array does not change.<br>There are many calls to sumRange function.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        sum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sum[i+<span class="number">1</span>] = sum[i] + nums[i];        <span class="comment">//S(n) = S(n-1) + f(n);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[j+<span class="number">1</span>] - sum[i];               <span class="comment">//S(n+2) - S(n) = f(n+1) + f(n+2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray* obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        sum_ = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n, <span class="number">0</span>);</span><br><span class="line">        sum_[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum_[i] = sum_[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> sum_[j];</span><br><span class="line">        <span class="keyword">return</span> sum_[j] - sum_[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gca6v456q8j30x80aujsq.jpg" alt="image-20200226224942382"></p><p><strong>Time Complexity:  Query$O(1)$ Pre-calculate $O(n)$</strong></p><p><strong>Space Complexity: $O(n)$</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;303-Range-Sum-Query-Immutable&quot;&gt;&lt;a href=&quot;#303-Range-Sum-Query-Immutable&quot; class=&quot;headerlink&quot; title=&quot;303. Range Sum Query - Immutable&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode655. Print Binary Tree</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/26/LeetCode655-Print-Binary-Tree/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/26/LeetCode655-Print-Binary-Tree/</id>
    <published>2020-02-25T16:08:29.000Z</published>
    <updated>2020-05-05T15:36:19.356Z</updated>
    
    <content type="html"><![CDATA[<h4 id="655-Print-Binary-Tree"><a href="#655-Print-Binary-Tree" class="headerlink" title="655. Print Binary Tree"></a>655. Print Binary Tree</h4><p><a href="https://leetcode-cn.com/problems/print-binary-tree/" target="_blank" rel="noopener">LeetCode. 655.Print Binary Tree</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Print a binary tree in an m*n 2D string array following these rules:</p><p>The row number m should be equal to the height of the given binary tree.<br>The column number n should always be an odd number.<br>The root node’s value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don’t need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don’t need to leave space for both of them.<br>Each unused space should contain an empty string “”.<br>Print the subtrees following the same rules.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>Input:<br>     1<br>    /<br>   2<br>Output:<br>[[“”, “1”, “”],<br> [“2”, “”, “”]]</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><p>Input:<br>     1<br>    / <br>   2   3<br>    <br>     4<br>Output:<br>[[“”, “”, “”, “1”, “”, “”, “”],<br> [“”, “2”, “”, “”, “”, “3”, “”],<br> [“”, “”, “4”, “”, “”, “”, “”]]</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h3><p>Input:<br>      1<br>     / <br>    2   5<br>   /<br>  3<br> /<br>4<br>Output:</p><p>[[“”,  “”,  “”, “”,  “”, “”, “”, “1”, “”,  “”,  “”,  “”,  “”, “”, “”]<br> [“”,  “”,  “”, “2”, “”, “”, “”, “”,  “”,  “”,  “”,  “5”, “”, “”, “”]<br> [“”,  “3”, “”, “”,  “”, “”, “”, “”,  “”,  “”,  “”,  “”,  “”, “”, “”]<br> [“4”, “”,  “”, “”,  “”, “”, “”, “”,  “”,  “”,  “”,  “”,  “”, “”, “”]]<br>Note: The height of binary tree is in the range of [1, 10].</p><h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; printTree(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">int</span> h = getHeight(root);</span><br><span class="line">        <span class="keyword">int</span> w = (<span class="number">1</span>&lt;&lt;h) - <span class="number">1</span>;</span><br><span class="line">        String[][] res = <span class="keyword">new</span> String[h][w];</span><br><span class="line">        <span class="keyword">for</span>(String[] arr:res)</span><br><span class="line">            Arrays.fill(arr,<span class="string">""</span>);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fill(res, root, <span class="number">0</span>, <span class="number">0</span>, res[<span class="number">0</span>].length);</span><br><span class="line">        <span class="keyword">for</span>(String[] arr:res)</span><br><span class="line">            ans.add(Arrays.asList(arr));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(String[][] res, TreeNode root, <span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        res[h][mid] = Integer.toString(root.val);</span><br><span class="line">        fill(res, root.left, h+<span class="number">1</span>, l, mid-<span class="number">1</span> );</span><br><span class="line">        fill(res, root.right, h+<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(getHeight(root.left), getHeight(root.right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: $O(h*w)$</strong></p><p><strong>Space Complexity: $O(h*w)$</strong></p><p><strong>note:</strong></p><p>java.List</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;655-Print-Binary-Tree&quot;&gt;&lt;a href=&quot;#655-Print-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;655. Print Binary Tree&quot;&gt;&lt;/a&gt;655. Print Binary Tree
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode561. Array Partition I </title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/24/LeetCode561-Array-Partition-I/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/24/LeetCode561-Array-Partition-I/</id>
    <published>2020-02-24T13:38:21.000Z</published>
    <updated>2020-05-05T15:36:19.399Z</updated>
    
    <content type="html"><![CDATA[<h4 id="561-Array-Partition-I"><a href="#561-Array-Partition-I" class="headerlink" title="561. Array Partition I"></a>561. Array Partition I</h4><p><a href="https://leetcode-cn.com/problems/array-partition-i/" target="_blank" rel="noopener">LeetCode 561</a></p><p>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p><p>Example 1:</p><p>Input: [1,4,3,2]</p><p>Output: 4<br>Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).<br>Note:</p><p>n is a positive integer, which is in the range of [1, 10000].<br>All the integers in the array will be in the range of [-10000, 10000].</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: $O(nlogn)$</strong></p><p><strong>Space Complexity: $O(1)$</strong></p><p><strong>note: Arrays.sort algrithm</strong></p><h3 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Arrays.sort(nums);</span></span><br><span class="line">        <span class="comment">// int sum = 0;</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; nums.length; i+=2)&#123;</span></span><br><span class="line">        <span class="comment">//     sum += nums[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return sum;</span></span><br><span class="line">        <span class="keyword">int</span>[] n = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20001</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            n[nums[i]+<span class="number">10000</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.length; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(n[i]!=<span class="number">0</span>)&#123;<span class="comment">//judge n[i] exists number</span></span><br><span class="line">                <span class="keyword">if</span>(index % <span class="number">2</span> == <span class="number">0</span>)&#123;<span class="comment">//judge index is even</span></span><br><span class="line">                    sum += (i-<span class="number">10000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                n[i]--;<span class="comment">//spend a time</span></span><br><span class="line">                index++;<span class="comment">//numbers of existed number add</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;<span class="comment">//n[i] doesn't exitst. i--&gt;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;561-Array-Partition-I&quot;&gt;&lt;a href=&quot;#561-Array-Partition-I&quot; class=&quot;headerlink&quot; title=&quot;561. Array Partition I&quot;&gt;&lt;/a&gt;561. Array Partition I
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode566.Reshape the Matrix 重置矩阵</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/23/LeetCode566-Reshape-the-Matrix-%E9%87%8D%E7%BD%AE%E7%9F%A9%E9%98%B5/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/23/LeetCode566-Reshape-the-Matrix-%E9%87%8D%E7%BD%AE%E7%9F%A9%E9%98%B5/</id>
    <published>2020-02-23T15:38:14.000Z</published>
    <updated>2020-05-05T15:36:19.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="566-Reshape-the-Matrix"><a href="#566-Reshape-the-Matrix" class="headerlink" title="566. Reshape the Matrix"></a>566. Reshape the Matrix</h3><p>In MATLAB, there is a very useful function called ‘reshape’, which can reshape a matrix into a new one with different size but keep its original data.</p><p>You’re given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.</p><p>The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.</p><p>If the ‘reshape’ operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><p>Input:<br>nums =<br>[[1,2],<br> [3,4]]<br>r = 1, c = 4<br>Output:<br>[[1,2,3,4]]</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><p>Input:<br>nums =<br>[[1,2],<br> [3,4]]<br>r = 2, c = 4<br>Output:<br>[[1,2],<br> [3,4]]<br>Explanation:<br>There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.<br>Note:</p><p>The height and width of the given matrix is in range [1, 100].<br>The given r and c are all positive.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] nums, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="keyword">int</span> m = nums.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> ( m*n != r*c) <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m*n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur_r = i/n;</span><br><span class="line">            <span class="keyword">int</span> cur_c = i%n;</span><br><span class="line">            <span class="keyword">int</span> new_r = i/c;</span><br><span class="line">            <span class="keyword">int</span> new_c = i%c;</span><br><span class="line">            arr[new_r][new_c] = nums[cur_r][cur_c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: $O(m*n)$</strong></p><p><strong>Space Complexity: $O(m*n)$</strong></p><p>*<em>Note: reshape matrix algrith, m</em>n == nums.length * nums[0].length  **</p><p><strong>Optimizing arrange:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> = <span class="number">0</span>; i &lt; nums.length; i++ )&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">    arr[m][n] = nums[i][j];</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">if</span>(n == c)&#123;</span><br><span class="line">      m++;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;566-Reshape-the-Matrix&quot;&gt;&lt;a href=&quot;#566-Reshape-the-Matrix&quot; class=&quot;headerlink&quot; title=&quot;566. Reshape the Matrix&quot;&gt;&lt;/a&gt;566. Reshape the Ma
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode174. Dungeon Game🤴地狱救👸</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/23/LeetCode174-Dungeon-Game%F0%9F%A4%B4%E5%9C%B0%E7%8B%B1%E6%95%91%F0%9F%91%B8/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/23/LeetCode174-Dungeon-Game%F0%9F%A4%B4%E5%9C%B0%E7%8B%B1%E6%95%91%F0%9F%91%B8/</id>
    <published>2020-02-22T17:00:28.000Z</published>
    <updated>2020-05-05T15:36:19.347Z</updated>
    
    <content type="html"><![CDATA[<h4 id="174-Dungeon-Game"><a href="#174-Dungeon-Game" class="headerlink" title="174. Dungeon Game"></a>174. Dungeon Game</h4><p>The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p><p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p><p>Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).</p><p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p><p>Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.</p><p>For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</p><p>-2 (K)    -3    3<br>-5    -10    1<br>10    30    -5 (P)</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>The knight’s health has no upper bound.<br>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = dungeon.length;</span><br><span class="line">        <span class="keyword">int</span> cols = dungeon[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rows+<span class="number">1</span>][cols+<span class="number">1</span>];   <span class="comment">//rearrange grids</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i], Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[rows][cols-<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[rows-<span class="number">1</span>][cols] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = rows-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;   <span class="comment">//origin grids</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = cols-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j+<span class="number">1</span>], dp[i+<span class="number">1</span>][j]) - dungeon[i][j];</span><br><span class="line">                dp[i][j] = dp[i][j]&lt;= <span class="number">0</span> ? <span class="number">1</span>:dp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><p>N catains x, y, z</p><p>$F(N) = min{F(N-x), F(N-y), F(N-z)} + 1$</p><p>reference: <a href="https://www.zhihu.com/question/23995189/answer/613096905" target="_blank" rel="noopener">知乎回答</a></p><p><strong>Time Complexity: $O(n^2)$</strong></p><p><strong>Space Complexity: $O(n^2)$</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;174-Dungeon-Game&quot;&gt;&lt;a href=&quot;#174-Dungeon-Game&quot; class=&quot;headerlink&quot; title=&quot;174. Dungeon Game&quot;&gt;&lt;/a&gt;174. Dungeon Game&lt;/h4&gt;&lt;p&gt;The demons h
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 404. Sum of Left Leaves 左叶子结点值之和</title>
    <link href="https://github.com/liysky/liysky.github.io.git/2020/02/20/LeetCode-404-Sum-of-Left-Leaves-%E5%B7%A6%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E5%80%BC%E4%B9%8B%E5%92%8C/"/>
    <id>https://github.com/liysky/liysky.github.io.git/2020/02/20/LeetCode-404-Sum-of-Left-Leaves-%E5%B7%A6%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E5%80%BC%E4%B9%8B%E5%92%8C/</id>
    <published>2020-02-20T14:38:25.000Z</published>
    <updated>2020-05-05T15:36:19.393Z</updated>
    
    <content type="html"><![CDATA[<h4 id="404-Sum-of-Left-Leaves-左叶子结点值之和"><a href="#404-Sum-of-Left-Leaves-左叶子结点值之和" class="headerlink" title="404. Sum of Left Leaves 左叶子结点值之和"></a>404. Sum of Left Leaves 左叶子结点值之和</h4><p>Find the sum of all left leaves in a given binary tree.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><pre><code>3</code></pre><p>   / <br>  9  20<br>    /  <br>   15   7</p><p>There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.</p><h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right)&#123;</span><br><span class="line">            <span class="keyword">return</span> root-&gt;left-&gt;val + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum + sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.left.left == <span class="keyword">null</span> &amp;&amp; root.left.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Time Complexity: $O(n)$</strong></p><p><strong>Space Complexity: $O(h)$</strong></p><p><strong>note：recursion</strong></p><p>The algrithm above is based on how to sum value of all nodes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfTrees</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  //get all value of leaves.</span></span><br><span class="line"><span class="comment">  int sum = 0;</span></span><br><span class="line"><span class="comment">  if(root.left == null &amp;&amp; root.right == null)&#123;</span></span><br><span class="line"><span class="comment">  sum = root.val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">int</span> sum = root.val;</span><br><span class="line">  <span class="keyword">int</span> left = sumOfTrees(root.left);</span><br><span class="line">  <span class="keyword">int</span> right = sumOfTrees(root.right);</span><br><span class="line">  <span class="keyword">return</span> sum + left + right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;404-Sum-of-Left-Leaves-左叶子结点值之和&quot;&gt;&lt;a href=&quot;#404-Sum-of-Left-Leaves-左叶子结点值之和&quot; class=&quot;headerlink&quot; title=&quot;404. Sum of Left Leaves 左叶子结点值
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://github.com/liysky/liysky.github.io.git/tags/LeetCode/"/>
    
  </entry>
  
</feed>
